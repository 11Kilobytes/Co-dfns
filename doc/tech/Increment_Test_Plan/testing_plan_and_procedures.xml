  <section xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Testing Plan and Procedures</title>
    <simpara>
      Each Increment will be tested against two sets of test
      cases. The first is a set of coverage tests which do not
      contribute to any sort of statistical results, but that serves
      to verify the correctness of the code behavior along all
      abstract edges and states of the <citetitle>Function
      Specification</citetitle>. After successfully passing all tests
      for the coverage tests, the statistical testing certification
      process begins.
    </simpara>
    <simpara>
      Increment 1, at the time of this writing has already undergone
      certification. However, it and Increment 2 are to be certified
      only against their ability to recognize and generate the correct
      code. The produced code will not be examined or tested, and test
      cases for the resulting code will not be used. Each further
      increment will also be tested mechanically to ensure that the
      resulting output code produces the correct results. This is
      because Increment 3 and onward should return a valid Namespace
      which can be used for testing. 
    </simpara>
    <simpara>
      Each test case for each increment is tested against the 
      <citetitle>Function Specification</citetitle> as well as an
      inspection to ensure that the code produced by the compiler
      matches expectations. A failure of any single test will trigger
      an engineering change and a halt to testing until the change has
      been completed. At this point, the statistical experiment is
      over, recorded, and must begin anew as a new experiement from
      the beginning of the test cases. Meticuluous notes should be 
      kept about the sort of error, the reason for the error, both
      apparent and actual, as well as the impact of the error, the fix
      applied to address the problem, and so forth.
    </simpara>
    <simpara>
      When doing coverage testing, any failures of the system should
      not necessitate an immediate engineering change. All possible
      errors should be recorded and as many of the coverage tests
      completed as possible before beginning an engineering change. 
    </simpara>
    <simpara>
      When examining test failures, a causal analysis should be run to
      determine the reason for the error in the development
      process. That is, the logical fault in the process that lead to
      the introduction of the error should be examined, and any
      adjustments made to ensure that the error is not introduced
      again through a change in the process and the methods of
      development. 
    </simpara>
    <simpara>
      Testing is complete when the compiler passes all of the
      statistical test cases without error. At this point, the
      compiler Increment can be considered and recored as having
      passed certification and the testing process concluded.
    </simpara>
    <simpara>
      The testing environment should be a fresh Co-dfns workspace with
      only the appropriate namespace <classname>CoDfns</classname>
      loaded from the namespace script or equivalent process, and the
      statistical and coverage test cases to be run. No other elements
      should be in the system and the system should start in its
      default state.
    </simpara>
  </section>
