    <informaltable frame="void" rules="rows"
                   xmlns="http://docbook.org/ns/docbook" 
                   version="5.0">
      <thead>
        <tr>
          <th colspan="4">Standard pass: AnchorVars</th>
        </tr>
        <tr>
          <th>Type</th>
          <th colspan="3">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Intended function</td>
          <td colspan="3">
            Associate with each assignment, scope, and variable reference
	      an appropriate slot pointing to a specific region of memory
	      within the stack frames, or in the case of scopes, the size
	      of the stack frame of that scope.
          </td>
        </tr>
        <tr>
          <td>Right argument</td>
          <td colspan="3">A valid <varname>Namespace</varname> AST</td>
        </tr>
        <tr>
          <td>Output</td>
          <td colspan="3">A valid <varname>Namespace</varname> AST</td>
        </tr>
        <tr>
          <td>Invariant</td>
          <td colspan="3">
            On output, no function has any free variables.
          </td>
        </tr>
        <tr>
          <td>Invariant</td>
          <td colspan="3">
            On output, all variables are either references into an
            environment or references to a binding in local scope.
          </td>
        </tr>
        <tr>
          <td>Invariant</td>
          <td colspan="3">
            Input has only variable references and function calls in
            expressions.
          </td>
        </tr>
        <tr>
          <td>Invariant</td>
          <td colspan="3">
	      On output all function bodies have an <parameter>alloca</parameter>
	      attribute that indicates the number of slots in the current scope.
          </td>
        </tr>
        <tr>
          <td>Invariant</td>
          <td colspan="3">
	      All variable references and assignments have a slot to indicate
	      where they go in the local memory.
          </td>
        </tr>
      </tbody>
    </informaltable>
