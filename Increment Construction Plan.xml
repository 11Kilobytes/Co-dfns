<?xml version="1.0" encoding="utf-8" ?>

<article xmlns="http://docbook.org/ns/docbook" version="5.0">
  <info>
    <title>Co-Dfns Increment Construction Plan</title>
    <author><personname>Aaron W. Hsu</personname></author>
    <date>Tuesday, October 8th, 2013</date>
  </info>
  <simpara>
    This is a documentation of a series of sub-divisions of the 
    Co-Dfns compiler development into a series of increments for 
    implementing specific elements over time. Each of these series 
    is design to be very very short due to the short iteration 
    cycle that we have, hopefully to be tested rapidly and easily.
  </simpara>
  <table frame="void" rules="rows">
    <caption>Co-Dfns Design Increments</caption>
    <thead>
      <tr>
        <th>#</th>
        <th colspan="6">Functionality</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td colspan="6">
          <simplelist type="horiz">
            <member>Support an empty namespace</member>
            <member>Generate an empty LLVM Object to a file</member>
            <member>Create passes Tokenize, GenLLVM, Parse</member>
            <member>
              Add support for stimuli: Fix Break Eot Fnb Fne Fnf
              Lle Lls Nl Nse Nss
            </member>
          </simplelist>
        </td>
      </tr>
      <tr>
        <td>2</td>
        <td colspan="6">
          <simplelist type="horiz">
            <member>Support static global constants of integers</member>
            <member>New Stimuli: N <literal>←</literal> V { }</member>
            <member>Support functions that return constants of integers</member>
            <member>New Passes: KillLines, LiftConsts</member>
            <member>Modified Passes: GenLLVM, Tokenize, Parse</member>
          </simplelist>
        </td>
      </tr>
		  <tr>
			  <td>3</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Complete the implementation of top-level state space</member>
					  <member>Top-level Stimuli Covered: <literal>⋄</literal>
					  <literal>←</literal> Break Eot Fix Fnb Fne Fnf Lle Lls Nl
					  Nse Nss Vi Vfo Vu E Fe Fnm Fnd</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>4</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Complete all code to cover Bind
					  <literal>∊</literal> NO states in the Functions
					  space</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>5</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support all expression states where Nest
					  <literal>∊</literal> NONE and ~Class <literal>∊</literal>
					  SELECT</member>
					  <member>Support atomic Function Expression states</member>
					  <member>Support basic scalar primitives and basic structural primitives</member>
					  <member>Support only the integer numeric type and do not worry about overflow</member>
					  <member>Use a simple C runtime</member>
					  <member>Return a JIT'd or Fixed Namespace (Functions only)</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>6</td>
			  <td colspan="6">
				  <simplelist type="horiz">
            <member>Ensure that generated names do not overlap with user names</member>
					  <member>Support all PAREN and non SELECT expression states</member>
					  <member>Support all Bind <literal>∊</literal> BOUND
					  UNBOUND Function states where ~Value <literal>∊</literal> FUNC</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>7</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support the rest of the Function states</member>
            <member>Ensure reasonable semantics for rebinding a name</member>
            <member>Support Shy results correctly</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>8</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support non-SELECT bracket expression states</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>9</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support non-parenthesized and non-bracketed Function Expression states</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>10</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support parenthesized Function Expression states</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>11</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support Axis operator and bracket Function Expression states</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>12</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Complete support for primitive functions</member>
					  <member>Add support for additional numeric and string types</member>
					  <member>Add support for overflow and numeric type promotion and compaction</member>
					  <member>Support nested arrays</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>13</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Support selective assignment expressions and selective assignment</member>
				  </simplelist>
			  </td>
		  </tr>
		  <tr>
			  <td>14</td>
			  <td colspan="6">
				  <simplelist type="horiz">
					  <member>Add optimization for scalar function fusion</member>
				  </simplelist>
			  </td>
		  </tr>
    </tbody>
  </table>
</article>
