\documentclass[10pt,oneside,american]{book}
\usepackage[margin=1in]{geometry}
\usepackage{fontspec}
\usepackage{unicode-math}
\setmainfont[Ligatures=TeX]{STIX}
\setsansfont[Ligatures=TeX]{Cantarell}
\setmonofont{APL385 Unicode}
\setmathfont{STIX Math}
\usepackage{noweb}
\pagestyle{noweb}
\noweboptions{}
\usepackage{babel}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=false,backref=false,colorlinks=true,allcolors=blue]
 {hyperref}
\usepackage{breakurl}
\usepackage{multicol}
\usepackage{booktabs}

\begin{document}

\frontmatter
\title{The Co-dfns Compiler}
\author{Aaron W. Hsu}
\date{\today}
\maketitle

\thispagestyle{empty}
\vspace*{\fill}\noindent
The Co-dfns Compiler: High-performance, Parallel APL Compiler \\
Copyright \copyright\ 2012--\the\year\ Aaron W. Hsu <arcfide@sacrideo.us> \\
\\
This program is free software: you can redistribute it and/or modify it
under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.\\
\\
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
General Public License for more details.\\
\\
You should have received a copy of the GNU Affero General Public License
along with this program. If not, see \url{http://www.gnu.org/licenses/}.

\tableofcontents

@
\chapter{Acknowledgments}

Dyalog, Ltd. has provided significant funding and resources to bring the 
Co-dfns compiler to fruition, and this project would not be what it is today 
without their assistance. 

\chapter{Preface}

This is a good place to put some basic meta-information that needs to be
discussed. Information on how to read a WEB document would be good here.
We probably also need information on commercial interests and how to get
the licensing for proprietary use.

Maybe some philosophical underpinnings of why the Co-dfns compiler exists?
This would include the target user base, but also what makes the compiler
interesting from an academic standpoint and what it tries to accomplish
from a programming languages research standpoing, as well as a compiler
design standpoint. Probably also cover something about the nature of
computing, programming, and HCI.

We should probably also describe how this file stores all of the information
on the compiler, including the testing and such.

We should also probably include some comments about the style of APL
terminology used in ths guide, in particular the J-isms of verbs, adverbs,
and so forth.

The Preface should also include information about how to extract the files 
from this document and how to weave this document into a PDF.

@
\mainmatter
\chapter{Overview}

The Co-dfns compiler exists as a single monolithic Dyalog APL namespace
called conveniently enough, [[codfns]]. This has a number of specific
advantages considered desirable for the compiler:

\begin{itemize}
\item A single namespace is very easy to distribute and maintain
\item Hacking and debugging on the single namespace aids in transparency
\item There is little to no clutter to the end user
\item It avoids complex build or infrastructure support outside of [[noweb]]
\item It reduces the overall burden to self-hosting
\end{itemize}
%
Within the compiler itself there are a number of logical sections. To which
we will normally dedicate a chapter for each major section. The extra comment
here is to assist the indexing facilities with global implicit nouns so
that we get better information in the index.

<<codfns.dyalog>>=
:Namespace codfns
<<Choices for [[⎕IO]], [[⎕ML]], and [[⎕WX]]>> ⍝ ⎕IO, ⎕ML, ⎕WX
<<Global Configuration>>
<<Unprocessed code>>
:EndNamespace
@ %def codfns
The entire namespace and the rest of this document all assume the following
settings for the global nouns [[⎕IO]], [[⎕ML]], and [[⎕WX]]. It is
important that these nouns are fixed throughout the code, and we also
make the assumption that the end user is compiling under these nouns.
That is, there is no facility in the compiler for supporting different
values of, say, [[⎕IO]].

<<Choices for [[⎕IO]], [[⎕ML]], and [[⎕WX]]>>=
⎕IO ⎕ML ⎕WX←0 1 3
@ %def ⎕IO ⎕ML ⎕WX

\section{Coding Conventions/Style Guide}

@

\section{Utilites for Developing the Compiler}

On the whole the compiler is relatively self-contained, but when working with
the compiler, there are specific utilities that come in quite handy when
debugging or playing with things. These are not meant to be refereneced or
included in the [[codfns]] namespace, and so it makes the most sense to load
these utilities only after we have successfully loaded the compiler proper.
See [[<<load.dyapp>>]] and [[<<test.dyapp>>]] for how we do this.

The [[util]] namespace stores these utility functions, as well as testing
and other functions that we may require that facilitate the development of
the compiler.

<<util.dyalog>>=
:Namespace util
<<The [[display]] verb for boxed display>>
<<The [[pp]] verb for pretty-printing arrays during debugging>>
<<The [[utf8get]] verb for reading in UTF-8 encoded text files>>
<<Testing Verbs, Adverbs, and Conjunctions>>
:EndNamespace
@ %def util
The [[display]] verb comes from the Dyalog dfns repository \cite{dfnsrepo} and
provides a verbose boxed display of arrays. We make no effort to explicate
the function here, but instead refer the reader to the appropriate explanations
in the upstream repository.

<<The [[display]] verb for boxed display>>=
display←{⎕IO ⎕ML←0 1                        ⍝ Boxed display of array.

    box←{                                   ⍝ box with type and axes
        vrt hrz←(¯1+⍴⍵)⍴¨'│─'               ⍝ vert. and horiz. lines
        top←'─⊖→'[¯1↑⍺],hrz                 ⍝ upper border with axis
        bot←(⊃⍺),hrz                        ⍝ lower border with type
        rgt←'┐│',vrt,'┘'                    ⍝ right side with corners
        lax←'│⌽↓'[¯1↓1↓⍺],¨⊂vrt             ⍝ left side(s) with axes,
        lft←⍉'┌',(↑lax),'└'                 ⍝ ... and corners
        lft,(top⍪⍵⍪bot),rgt                 ⍝ fully boxed array
    }

    deco←{⍺←type open ⍵ ⋄ ⍺,axes ⍵}         ⍝ type and axes vector
    axes←{(-2⌈⍴⍴⍵)↑1+×⍴⍵}                   ⍝ array axis types
    open←{16::(1⌈⍴⍵)⍴⊂'[ref]' ⋄ (1⌈⍴⍵)⍴⍵}   ⍝ exposure of null axes
    trim←{(~1 1⍷∧⌿⍵=' ')/⍵}                 ⍝ removal of extra blank cols
    type←{{(1=⍴⍵)⊃'+'⍵}∪,char¨⍵}            ⍝ simple array type
    char←{⍬≡⍴⍵:'─' ⋄ (⊃⍵∊'¯',⎕D)⊃'#~'}∘⍕    ⍝ simple scalar type
    line←{(6≠10|⎕DR' '⍵)⊃' -'}              ⍝ underline for atom

    {                                       ⍝ recursive boxing of arrays:
        0=≡⍵:' '⍪(open ⎕FMT ⍵)⍪line ⍵       ⍝ simple scalar
        1 ⍬≡(≡⍵)(⍴⍵):'∇' 0 0 box ⎕FMT ⍵     ⍝ object rep: ⎕OR
        1=≡⍵:(deco ⍵)box open ⎕FMT open ⍵   ⍝ simple array
        ('∊'deco ⍵)box trim ⎕FMT ∇¨open ⍵   ⍝ nested array
    }⍵
}
@ %def display
The [[pp]] verb is very similar to the [[display]] verb, but it also prints
the shape information for the array to make sure that there is no ambiguity
there. It also makes sure to return the input array instead of returning the
boxed version. Instead, [[pp]] displays the boxed version of the array as a
side-effect.

The intended use of this verb is for printing the intermediate arrays that
exist through the flow of the compiler to determine where something goes wrong.
This allows a [[printf(3)]] style debugging for programs defined in the Co-dfns
style of development. This helps to compensate for the lack of a sophisticated
debugger in Dyalog APL capable of adequately handling function trains and
dfns. (Hopefully, in future versions of Dyalog APL, the need for [[pp]] will
gradually lessen.)

<<The [[pp]] verb for pretty-printing arrays during debugging>>=
pp←{⍵⊣⎕←display ⍵⊣⍞←⍴⍵⊣⍞←'Shape: '}
@ %def pp
It sometimes helps to be able to read in files, either for testing or for
bringing in code examples that have been prepared in advance from somewhere
else. It can be useful during test development as well. The [[utf8get]] verb
provides this functionality, and it again comes from the Dyalog dfns
repository. \cite{dfnsrepo}

<<The [[utf8get]] verb for reading in UTF-8 encoded text files>>=
utf8get←{                              ⍝ Char vector from UTF-8 file ⍵.
    0::⎕SIGNAL ⎕EN                     ⍝ signal error to caller.
    tie←⍵ ⎕NTIE 0                      ⍝ file handle.
    ints←⎕NREAD tie 83,⎕NSIZE tie      ⍝ all UTF-8 file bytes.
    ('UTF-8'⎕UCS 256|ints)⊣⎕NUNTIE tie ⍝ ⎕AV chars.
}
@ %def utf8get

\section{Testing Requirements and Methods}
\label{sec:test_reqs_methods}

The Co-dfns compiler follows a very specific philosophy when it comes to 
quality control. It dreams of the day that formal methods catch up to testing, 
and quietly waits for this moment to be right in the APL community; until then, 
the developer's rely on Direct Development strategies
\cite{taylor2016second,bussell2006software,taylor2006pair}. As this relates to 
testing, it can be summed up nicely as customer-driven black-box testing.

The Co-dfns compiler has a testing harness explicitly designed for black-box 
testing only. That is, the only sorts of supported tests are tests that invoke 
the entire compiler as a single black box, rather than having many unit tests.%
\footnote{The inspiration for black-box centered testing rather than the 
more in-vogue emphasis on a combination of unit testing and integration 
testing derives chiefly from two sources: Prof. Kent Dybvig's Compilers course 
P423 at Indiana University and the Software Engineering methodology known as 
Cleanroom Software Engineering. Kent's course demonstrated the value of 
architectural designs that were flexible, adaptable, and easily refactored, 
which in turn resulted in a compiler whose interlocking interfaces were 
simple enough that unit testing gave precious little extra over simple 
automatic verification on the API boundaries, while heavily increasing the 
testing burden. Unit Testing of ASTs is especially difficult, since one must 
have a good way of serializing the AST used at any given point. Automatic 
verification works better. Cleanroom SE \cite{prowell1999cleanroom} 
took this idea even further by 
relying strongly on stochastic methods for ensuring that testing coverage was 
based both on the edge cases as well as the general usage models, and eschews 
unit testing for formal methods during development. Translated to a program 
like this one, this means essentially that design trumps unit tests; by 
designing the compiler in the right way, we can improve our ability to reason 
about the compiler, and greatly reduce the errors that would be caught by 
unit testing but not caught by black box testing. We additionally lower 
the barrier of entry to black box testing and increase our use of black-box 
testing in such a way that unit testing simply overlaps too much, further 
reducing its value.}
Experience suggests that this is, in fact, more useful on a rapidly evolving 
code base than unit testing, and it provides the same degree of testing 
``expressivity'' in terms of the end-user experience, which is really what 
we care about. In other words, we really don't care how well each unit works 
individually, we only care how well they work as a whole, because that is what 
the user sees, and that's what matters, and if you cannot test it with a black 
box, then it's probably not as valuable to test. 

We design the compiler with this in mind. This also means that we have a high 
demand for black box tests. Pretty much any program or complaint or issue that 
comes up is given a test to illustrate it, both a small and a large version of 
the test, one for isolating the problem, and one for confirming at scale, 
respectively. Sometimes these two are the same. 

Because Co-dfns is developed remotely, it can be hard sometimes to work 
directly with customers to make changes to the code base. To account for this, 
we try to make the testing harness as easy to use as possible, with the idea 
that if an user can do nothing else with the code base, at least submitting a 
test case is not out of reach. 

All of the testing harness definitions are defined in the [[util]] namespace
defined in [[<<util.dyalog>>]]. The testing harness is built around the 
[[APLUnit]] \cite{alongi2013aplunit} framework, 
which is defined as a submodule in the 
git repository, and should be included in the [[APLUnit]] directory in the 
Co-dfns distribution. 

Most, if not all of the tests for the compiler are included in this document, 
and designed to be tangled out into a specific [[Testing/]] directory for use. 
They should, of course, follow the naming conventions given below as required 
by the [[APLUnit]] framework. Test suites should be focused on a single 
``feature'' that needs to be tested, and should not grow too large. Try to 
keep suites close to and near the definitions of the things that are being 
tested, preferrably woven into the fabric of the examples demonstrating correct 
behavior in the description of the function. 

<<Testing Verbs, Adverbs, and Conjunctions>>=
<<[[util.TEST]] verb for running all the tests>>
<<[[util.test]] verb for running individual tests>>
<<Test Makers (conjunctions) for Abstracting a Single Test Case>>
<<Test Generators (conjunctions) for Abstracting a Single Test Input>>
@ 

\subsection{Using APLUnit}

As a basic tutorial for the [[APLUnit]] framework, we include some information 
on the features upon which we rely here, so that the harness code will make 
more sense. Interested readers are encouraged to look at the upstream 
repository \cite{alongi2016aplunit} for more information. 

A given testing suite is given as a namespace script whose filename ends in 
[[_tests.dyalog]]. Inside, each test is a verb whose name ends with 
[[_TEST]]. This verb should set the [[UT.expect]] noun to the expected 
return value and then return the value to test for equivalency. Failure 
indicates the returned value did not equal (in the [[≢]] sense) the value 
in [[UT.expect]]. 

A test, test suite, or multiple tests suites in a directory may be launched 
by using the [[UT.run]] verb, which takes the name of a test, suite, or 
directory containing suites as its right argument. 

The output of the testing can be controlled by the use of two parameters. 

\begin{description}
\item[ [[UT.print_passed]] ] $0$ or $1$: Tells [[APLUnit]] whether to print out 
a line for each test that passed or only to print failures.
\item[ [[UT.print_summary]] ] $0$ or $1$: Tells [[APLUnit]] whether to print 
a summary of the testing results at the end or not.
\end{description}

@ \subsection{Running Tests}

The primary mode of testing is the [[util.TEST]] utility verb. This will run 
the entire testing suite. We expect the entire set of tests to be in the 
[[Testing/]] directory, and each should have the suffix [[_tests.dyalog]]. 
The invocation looks like this:

\begin{verbatim}
util.TEST
\end{verbatim}
%
Because there are so many tests to run, it does not help at all to print out 
each test passed. Instead, we set [[UT.print_passed]] to [[0]] so that it 
will simply print out the name of the suite currently being tested. We do 
however want to keep the summary printing, and set [[UT.print_summary]] as 
appropriate. 

<<[[util.TEST]] verb for running all the tests>>=
∇TEST
##.UT.print_passed←0
##.UT.print_summary←1
##.UT.run './Testing'
∇
@ %def util.TEST
While running all the tests is nice, this can take a very long time. When 
working on a specific test or a specific problem, and needing to focus in 
on a single test suite, the [[util.test]] verb should be used instead. It takes 
the name of the test suite without the [[_tests.dyalog]] suffix. For example, 

\begin{verbatim}
util.test'reduce'
\end{verbatim}
%
This should not be relied on to replace [[util.TEST]] however, and the 
[[util.TEST]] suite should be run through on a regular basis. 

<<[[util.test]] verb for running individual tests>>=
test←{##.UT.run './Testing/',⍵,'_tests.dyalog'}
@ %def util.test

\subsection{Generating Tests for Specific Inputs}

When generating tests for a set of inputs, first break up the tests into suites. 
Each suite should focus on a specific thing to test. After that, you can write 
a single file for each test ``suite.'' 
These files will eventually go into the [[Testing/]] directory. It's important 
to note than when tangling these files out of the main Co-dfns program, you'll 
need to use [[sample\_tests.dyalog]] as the target instead of 
[[sample_tests.dyalog]] because the Noweb implementation does not handle 
underscores explicitly, so we need to do this ourselves. Files should be stored 
without the backslash when they are placed in the [[Testing/]] directory. 

The following test is called [[sample01]] in the results, which is the result 
of a catenation of the test identifier and the suite identifier. The above 
test will test the [[Run]] function from namespace [[S]] 
with inputs [[A]] and [[B]] on each of the compilers that are enabled in 
[[TEST∆COMPILERS]]. 
The test suites normally look something like this:

<<sample\_tests.dyalog>>=
﻿:Namespace sample

S←':Namespace' 'Run←{...}' ':EndNamespace'

'01'('sample' S 'Run' ##.util.GEN∆T2 ⎕THIS)A B
...

:EndNamespace
@ %
The [[GEN∆T2]] conjunction and its siblings do all of the hard work for us. Their 
basic job is to make it easy to create a set of tests over a single function 
and a single input into that function. They use the [[MK∆T2]] conjunction  
under the hood. These conjunctions create new definitions in the same scope in
which they appear, which means that we must take advantage of the dynamic 
scoping behavior of trad-fns, rather than using the usually more preferrable 
dfns syntax. This means that we also need to use some structured programming 
to get things done for clarity rather than the more prefferrable functional 
style. 

The left operand for the generators are vectors containing the following 
elements:

\begin{description}
\item[ [[NS]] ] The name of the testing suite
\item[ [[TC]] ] The namespace script containing the function to test in the 
form of a vector of strings
\item[ [[FN]] ] The name of the function to test
\end{description}
%
We use the test maker conjunctions defined further down to create the tests 
themselves, and catenate the test suite name to the test identifier [[ID]] 
given as the left argument to create the name of the individual test. Each 
individual ``test'' is actually a set of tests, one for each different compiler 
that we support. We iterate over each compiler type and create a test for each. 

<<Test Generators (conjunctions) for Abstracting a Single Test Input>>=
∇Z←ID(NCF GEN∆T1 THIS)IN;NS;FN;CMP;TC;TMP
 NS TC FN←NCF
 :For CMP :In 'gcc' 'icc' 'vsc' 'pgcc'
     TMP←(NS,ID)CMP TC FN MK∆T1 IN
     ⍎'THIS.',NS,'∆',ID,'∆',CMP,'_TEST←TMP'
 :EndFor
 Z←0 0⍴⍬
∇

∇Z←ID(NCF GEN∆T2 THIS)IN;NS;FN;CMP;TC;TMP
 NS TC FN←NCF
 :For CMP :In 'gcc' 'icc' 'vsc' 'pgcc'
     TMP←(NS,ID)CMP TC FN MK∆T2 IN
     ⍎'THIS.',NS,'∆',ID,'∆',CMP,'_TEST←TMP'
 :EndFor
 Z←0 0⍴⍬
∇
@ %def GEN∆T1 GEN∆T2
The [[GEN∆T3]] conjunction differs from [[GEN∆T2]] in that it tests 
approximately rather than exactly. This requires the use of the [[TL]] tolerance 
parameter in addition to the normal parameters. 

\begin{description}
\item[ [[TL]] ] The tolerance for approximate matches when testing the 
expected and actual results
\end{description}

<<Test Generators (conjunctions) for Abstracting a Single Test Input>>=
∇Z←ID(NCFT GEN∆T3 THIS)IN;NS;FN;CMP;TC;TMP;TL
 NS TC FN TL←NCFT
 :For CMP :In 'gcc' 'icc' 'vsc' 'pgcc'
     TMP←(NS,ID)CMP TC FN TL MK∆T3 IN
     ⍎'THIS.',NS,'∆',ID,'∆',CMP,'_TEST←TMP'
 :EndFor
 Z←0 0⍴⍬
∇
@ %def GEN∆T3

\subsection{Making a Single Test Function}

There are a few main maker conjunctions designed to create 
testing verbs. The first two define the simple cases where the expected 
output and the actual output should match exactly. They differ only in whether 
the inputs are monadic or dyadic. We use [[MK∆T1]] for monadic inputs, and 
[[MK∆T2]] for dyadic inputs, obviously.

We compare for equivalence by running a Dyalog APL version of the code to be 
tested against the Co-dfns version and compare the two, to see if they come 
out the same. In this way we never have to define our expected values, we 
simply ensure that we are operationally equivalent to the Dyalog APL 
interperter, which is our gold standard. 

<<Test Makers (conjunctions) for Abstracting a Single Test Case>>=
MK∆T1←{id cmp ns fn←⍺⍺ ⋄ r←⍵⍵
    <<Fix and compile test namespaces [[NS]] and [[CS]]>>
    ##.UT.expect←(⍎'NS.',fn)r ⋄ (⍎'CS.',fn)r}
MK∆T2←{id cmp ns fn←⍺⍺ ⋄ l r←⍵⍵
    <<Fix and compile test namespaces [[NS]] and [[CS]]>>
    ##.UT.expect←l(⍎'NS.',fn)r ⋄ l(⍎'CS.',fn)r}
@ %def MK∆T1 MK∆T2
All of the maker conjunctions rely on being able to have two versions of the 
same namespace to test. Essentially, for every given test, we expect to 
have the following information:

\begin{description}
\item[ [[id]] ] The string identifier for this test suite, which is used to 
generate the right intermediate files when compiling the function, and also 
for generally having some idea of the family of tests being conducted. 
\item[ [[cmp]] ] The string idnetifier for which compiler to use for this 
test. 
\item[ [[ns]] ] The actual namespace script represented as a vector of strings 
that contains the code to test.
\item[ [[fn]] ] The function defined in the namespace described by [[ns]] that 
we are to test. 
\end{description}
%
Once we have all of this stuff, we verify that the compiler in this test is 
currently part of the compilers that we are going to test, and if it is not, 
we simply consider the test as passed for now. (Todo: later we may wish to 
somehow mark this test as ``not run'' so that we can distinguish a skipped 
test from a test that was run and passed.) At this point, we set the 
[[COMPILER]] to the compiler we are testing and create two namespaces, the 
first using [[⎕FIX]] to get a Dyalog APL versions of the namespace, and the 
other using [[codfns.Fix]] to get what should be an equivalent namespace 
compiled with Co-dfns. These are called [[NS]] and [[CS]] respectively. 

<<Fix and compile test namespaces [[NS]] and [[CS]]>>=
~(⊂cmp)∊##.codfns.TEST∆COMPILERS:0⊣##.UT.expect←0
##.codfns.COMPILER←cmp
CS←id ##.codfns.Fix ns
NS←⎕FIX ns
@ %
The third type of test is basically the same as [[MK∆T2]] with the main 
difference that we only expect the expected return values and the actual 
return values to be ``approximately'' equivalent. This is for testing floating 
point code which will naturally have different rounding behaviors. For this 
we introduce a fifth element in the left argument of the conjunction to give 
the tolerance [[tl]] for rounding errors in the relative difference of the 
expected and actual values. The absolute difference (always positive) of the 
actual and expected results should be less than the tolerance [[tl]].

<<Test Makers (conjunctions) for Abstracting a Single Test Case>>=
MK∆T3←{id cmp ns fn tl←⍺⍺ ⋄ l r←⍵⍵
    <<Fix and compile test namespaces [[NS]] and [[CS]]>>
    nv←l(⍎'NS.',fn)r ⋄ cv←l(⍎'CS.',fn)r
    ##.UT.expect←(≢,nv)⍴1 ⋄ ,tl>|nv-cv}
@ %def MK∆T3

\chapter{Public Interface}

@
\chapter{Installation, Configuration, and Settings}

@
\section{Global Configuration}

There are a number of configuration settings that can be set in the [[codfns]]
namespace that control the behavior of the compiler. These can roughly be 
divided into three types: settings for choosing your backend, settings for 
choosing the working directories, and settings for configuring the compiler 
backends themselves. 

<<Global Configuration>>=
<<[[COMPILER]] and [[TEST∆COMPILERS]] settings for choosing compiler backends>>
<<[[DWA∆PATH]] and [[BUILD∆PATH]] settings for compiler artifacts>>
<<Compiler backend search paths for Windows backends>>
@

\subsection{Choosing Your Compiler Backend}

The Co-dfns compiler is really more of a front-end compiler for a specific 
backend C compiler. The compiler processes your APL namespace into C code that 
is then compiled with the back-end compiler of your choice. Table 
\ref{tab:compbackends} 
describes the C compilers that we support, the [[code]] for that compiler, 
and the operating systems on which we support that specific compiler.

\begin{table}
\centering
\begin{tabular}{lll}
\toprule
Compiler Code & Compiler & Supported Operating System \\
\midrule
[[gcc]] & GNU C Compiler & Linux \\
[[icc]] & Intel C++ Compiler & Linux \\
[[icl]] & Intel C++ Compiler & Windows \\
[[pgcc]] & PGI C/OpenACC Compiler & Linux \\
[[pgi]] & PGI C/OpenACC Compiler & Windows \\
[[vsc]] & Microsoft Visual Studio C++ Compiler & Windows \\
\bottomrule
\end{tabular}
\caption{The supported compiler backends and their associated codes.}
\label{tab:compbackends}
\end{table}

The relative support for each compiler differs principally in the type of 
performance that one can expect from each C compiler backend. We make 
significant efforts to ensure that the Intel and PGI backends perform well, 
but we do not make any extraordinary or special efforts to ensure that the 
Visual Studio or GNU C compilers produce fast code. The Visual Studio and 
GNU C compilers are intended to serve as safe defaults and readily accessible 
options for those who lack the Intel or PGI compilers, which are not freely 
available. This provides an option for trial, but it is not intended to replace 
using one of the other compilers for higher performance on your specific 
platform. 

The [[COMPILER]] noun determines what backend the Co-dfns compiler will use 
when calling the [[Fix]] verb. It should be set to one of the codes listed 
above. We choose [[vsc]] as the default code since we assume that it is more 
likely to find someone wanting to test this out on Windows than on Linux. 
The [[gcc]] code is the appropriate default on Linux if you don't know which 
one to use. 

<<[[COMPILER]] and [[TEST∆COMPILERS]] settings for choosing compiler backends>>=
COMPILER←'vsc'
@ %def COMPILER
The [[TEST∆COMPILERS]] noun is a vector of compiler codes (selected from 
Table \ref{tab:compbackends}) 
indicating which compilers are available and desired to use when 
running the Co-dfns test suite through [[util.TEST]] or [[util.test]]. See 
Section \ref{sec:test_reqs_methods} for more information on the use of this 
setting. Notice that we need to enclose the code if we are using only a single 
compiler for our testing. We also use the [[vsc]] compiler as our default 
as explained for [[COMPILER]].

<<[[COMPILER]] and [[TEST∆COMPILERS]] settings for choosing compiler backends>>=
TEST∆COMPILERS←⊂'vsc'
@ %def TEST∆COMPILERS

\subsection{Setting Up Compiler Support Directories}

<<[[DWA∆PATH]] and [[BUILD∆PATH]] settings for compiler artifacts>>=
DWA∆PATH   ←'dwa'
BUILD∆PATH ←'Build'
@ %def DWA∆PATH BUILD∆PATH

\subsection{Configuring Compiler Backend Paths}

<<Compiler backend search paths for Windows backends>>=
VISUAL∆STUDIO∆PATH ←'C:\Program Files (x86)\Microsoft Visual Studio 14.0\'
INTEL∆C∆PATH       ←'C:\Program Files (x86)\IntelSWTools\'
INTEL∆C∆PATH      ,←'compilers_and_libraries_2016.0.110\windows\bin\'
PGI∆PATH           ←'C:\Program Files\PGI\win64\15.7\'
@ %def VISUAL∆STUDIO∆PATH INTEL∆C∆PATH PGI∆PATH

\section{Configuration File}

We recommend the use of a configuration file for loading and using the compiler.
This is a small file that you use to store your system specific settings that
configure the compiler for your specific use case. You would load this file
into your workspace after you have loaded the [[<<codfns.dyalog>>]] file.

We frame the code in the form of an empty namespace that, as a side effect of
loading, sets the appropriate [[codfns]] global settings to make the compiler
ready for action. At a bare minimum we recommend that you set at least the
[[COMPILER]] and [[TEST∆COMPILERS]] global settings. You could also include
settings to configure each individual backend compiler that you are going to
use if the default settings for those compilers do not work. This is more
likely to be a concern on the Windows platform where the paths are subject to
change based on your versioning. On a UNIX-like platform it should not be
necessary to configure paths for your back end compilers.

The following sample template may be tangled and used as a starting point for
your own configuration. It assumes that you are on UNIX and that you wish to
use the PGI OpenACC C compiler for your primary compiler, but that when you
run tests you want to use [[gcc]], [[icc]], and [[pgcc]] compilers all.

The use of an empty namespace here allows us to test whether the configuration
has been loaded, but this could be of limited value, and as such, an user
may wish to simply set these settings as a part of the loading process for
whatever program uses the compiler, instead of an explicit [[config]]
namespace for this purpose.

<<config.dyalog>>=
:Namespace config

##.codfns.COMPILER←'pgcc'
##.codfns.TEST∆COMPILERS←'gcc' 'icc' 'pgcc'

:EndNamespace
@ %def config COMPILER TEST∆COMPILERS

\section{Loading the Compiler}

As a single namespace script, the Co-dfns compiler is particularly well suited
to loading using the SALT system from Dyalog. In particular, the developers
use themselves and recommend the use of two special Dyalog Application Scripts
that load the compiler and run the entire test suite, respectively.

@ The core element is loading the compiler itself. We will assume that you also
want to load all of the utility definitions, the testing harness and your own
personal configuration settings in the form of a [[<<config.dyalog>>]] file. This
represents the ``Kitchen Sink'' solution so that you have everything that you
could possibly require at your fingertips whenever your are using the compiler,
and it is particularly well suited for use as is by developers and other
users who are tinkering with the compiler, as it will allow them to test that
the compiler works using test scripts without requiring additional elements to
be loaded.

The result will of course, be four loaded namespaces loaded into the [[#]]
namespace: [[util]], [[codfns]], [[UT]], and [[config]]. You can change [[#]]
to be anything you want, but all of the namespaces should be loaded into the
same parent namespace.

Note that we make sure to load the [[codfns]] namespace first. This is important
since it serves as a check that the compiler can load without any dependencies
having accidentally arisen by referring to one of the other namespaces inside
of the [[codfns]] namespace.

<<load.dyapp>>=
Target #
Load codfns
Load util
Load APLUnit\UT
Load config
@ %def UT.run UT.expect UT.print_passed UT.print_summary
Running the test suite in its entirety is a good practice, and it can be
helpful as a debugging tool when submitting error reports if the compiler is
not doing what you expect. It is the same as [[<<load.dyapp>>]] but it includes
a final command to [[Run]] the [[util.TEST]] function, which will attempt to
run all of the tests for all of the compilers that you have defined in
[[TEST∆COMPILERS]]. See the note on [[<<load.dyapp>>]] about the loading order.

<<test.dyapp>>=
Target #
Load codfns
Load util
Load APLUnit\UT
Load config
Run util.TEST
@ %def UT.run UT.expect UT.print_passed UT.print_summary

\chapter{Parsing}

@
\chapter{Core Compiler Architecture}

@
\chapter{Placeholder for Passes, 1 per chapter}

@
\chapter{Code Generation}

@
\chapter{Runtime: Architecture}

@
\chapter{Runtime: Scalars}

@
\chapter{Runtime: Mixed Verbs}

@
\chapter{Runtime: Operators}

@
\chapter{Runtime: Performance/Internal Hacks}

@
\chapter{Backend Compilers}

@
\chapter{Licensing/Legal Information}

The copyright notice is given at the beginning of this program, but as we
produce a distribution where the files are tangled and woven, and the original
source is omitted, it makes sense to include the common [[LICENSE.txt]] and
[[COPYING.txt]] files.

@ The [[LICENSE.txt]] file contains the same bare necessities for understanding
the distribution and copyright restrictions on the compiler as distributed
here.

<<LICENSE.txt>>=
Co-dfns Compiler: High-performance, Parallel APL Compiler
Copyright (C) 2012-2014 Aaron W. Hsu <arcfide@sacrideo.us>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
@
The [[COPYING.txt]] file contains the full contents of the Affero General
Public License referenced in [[LICENSE.txt]] and should be distributed with
any version of the Co-dfns compiler, whether tangled or woven.

<<COPYING.txt>>=
                    GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<http://www.gnu.org/licenses/>.
@
\backmatter
\chapter{Chunks} \nowebchunks
\chapter{Index}
\begin{multicols}{2}
\nowebindex
\end{multicols}
@

\nocite{*}
\bibliographystyle{plain}
\bibliography{codfnsbiblio}

@
\chapter*{Unprocessed Code}

This chapter includes all of the unprocessed code that has not yet been
incorporated into the rest of the document.

<<Unprocessed code>>=
⍝[of]:Backend Compilers
⍝[of]:UNIX Generic Flags/Options
cfs	←'-funsigned-bitfields -funsigned-char -fvisibility=hidden -std=c11 '
cds	←'-DxxBIT=64 -DHAS_UNICODE=1 -DUNIX=1 -DWANT_REFCOUNTS=1 -D_DEBUG=1 '
cio	←{'-I',DWA∆PATH,' -o ''',BUILD∆PATH,'/',⍵,'_',⍺,'.so'' '}
fls	←{'''',DWA∆PATH,'/dwa_fns.c'' ''',BUILD∆PATH,'/',⍵,'_',⍺,'.c'' '}
log	←{'> ',BUILD∆PATH,'/',⍵,'_',⍺,'.log 2>&1'}
⍝[cf]
⍝[of]:GCC (Linux Only)
gop	←'-Ofast -g -Wall -Wno-unused-function -Wno-unused-variable -fPIC -shared '
gcc	←{⎕SH'gcc ',cfs,cds,gop,'gcc'(cio,fls,log)⍵}
⍝[cf]
⍝[of]:Intel C Linux
iop	←'-fast -g -fno-alias -static-intel -Wall -Wno-unused-function -fPIC -shared '
icc	←{⎕SH'icc ',cfs,cds,iop,'icc'(cio,fls,log)⍵}
⍝[cf]
⍝[of]:PGI C Linux
pop	←' -fast -acc -ta=tesla:nollvm,nordc,cuda7.5 -Minfo -Minfo=ccff -fPIC -shared '
pgcc	←{⎕SH'pgcc ',cds,pop,'pgcc'(cio,fls,log)⍵}
⍝[cf]
⍝[of]:VS/IC Windows Flags
vsco	←'/W3 /Gm- /O2 /Zc:inline ' ⍝ /Zi /Fd"Build\vc140.pdb" '
vsco	,←'/D "HAS_UNICODE=1" /D "xxBIT=64" /D "WIN32" /D "NDEBUG" /D "_WINDOWS" '
vsco	,←'/D "_USRDLL" /D "DWA_EXPORTS" /D "_WINDLL" '
vsco	,←'/errorReport:prompt /WX- /MD /EHsc /nologo '
vslo	←'/link /DLL /OPT:REF /INCREMENTAL:NO /SUBSYSTEM:WINDOWS '
vslo	,←'/OPT:ICF /ERRORREPORT:PROMPT /TLBID:1 '
⍝[cf]
⍝[of]:Visual Studio C
vsc1	←{'""',VISUAL∆STUDIO∆PATH,'VC\vcvarsall.bat" amd64 && cl ',vsco,'/fast '}
vsc2	←{'/I"',DWA∆PATH,'\\" /Fo"',BUILD∆PATH,'\\" "',DWA∆PATH,'\dwa_fns.c" '}
vsc3	←{'"',BUILD∆PATH,'\',⍵,'_vsc.c" ',vslo,'/OUT:"',BUILD∆PATH,'\',⍵,'_vsc.dll" '}
vsc4	←{'> "',BUILD∆PATH,'\',⍵,'_vsc.log""'}
vsc	←⎕CMD '%comspec% /C ',vsc1,vsc2,vsc3,vsc4
⍝[cf]
⍝[of]:Intel C Windows
icl1	←{'""',INTEL∆C∆PATH,'\ipsxe-comp-vars.bat" intel64 vs2015 && icl ',vsco,'/Ofast '}
icl3	←{'"',BUILD∆PATH,'\',⍵,'_icl.c" ',vslo,'/OUT:"',BUILD∆PATH,'\',⍵,'_icl.dll" '}
icl4	←{'> "',BUILD∆PATH,'\',⍵,'_icl.log""'}
icl	←⎕CMD '%comspec% /E:ON /V:ON /C ',icl1,vsc2,icl3,icl4
⍝[cf]
⍝[of]:PGI C Windows
pgio	←'-D "HAS_UNICODE=1" -D "xxBIT=64" -D "WIN32" -D "NDEBUG" -D "_WINDOWS" '
pgio	,←'-D "_USRDLL" -D "DWA_EXPORTS" -D "_WINDLL" -D "HASACC" '
pgwc	←{z←'pgcc -fast -Bdynamic -acc -Minfo ',pgio,'-I "',DWA∆PATH,'\\" '
 	z,←'-c "',⍵,'.c" -o "',⍵,'.obj"' ⋄ z}
pglk	←{z←'pgcc -fast -Mmakedll -acc -Minfo -o "',BUILD∆PATH,'\',⍵,'_pgi.dll" "'
	z,←BUILD∆PATH,'\',⍵,'_pgi.obj" "',DWA∆PATH,'\dwa_fns.obj"' ⋄ z}
pgi1	←{'""',PGI∆PATH,'pgi_env.bat" && ',(pgcc BUILD∆PATH,'\',⍵,'_pgi'),' && '}
pgi2	←{(pgwc DWA∆PATH,'\dwa_fns'),' && ',pglk ⍵}
pgi3	←{' > "',BUILD∆PATH,'\',⍵,'_pgi.log""'}
pgi	←⎕CMD '%comspec% /C ',pgi1,pgi2,pgi3
⍝[cf]
⍝[cf]
⍝[of]:Primary Interface/API
dirc	←{'\/'⊃⍨'gcc' 'icc' 'pgcc'∊⍨⊂COMPILER}
soext	←{'.dll' '.so'⊃⍨'gcc' 'icc' 'pgcc'∊⍨⊂COMPILER}
tie	←{0::⎕SIGNAL ⎕EN ⋄ 22::⍵ ⎕NCREATE 0 ⋄ 0 ⎕NRESIZE ⍵ ⎕NTIE 0}
put	←{s←(¯128+256|128+'UTF-8'⎕UCS ⍺)⎕NAPPEND(t←tie ⍵)83 ⋄ 1:r←s⊣⎕NUNTIE t}
Cmp	←{n⊣(⍎COMPILER)⍺⊣(BUILD∆PATH,(dirc⍬),⍺,'_',COMPILER,'.c')put⍨gc tt⊃a n←ps ⍵}
mkf	←{f←⍵,'←{' ⋄ fn←BUILD∆PATH,(dirc⍬),⍺,'_',COMPILER,(soext⍬),'|',⍵,' '
	f,←'_←''dya''⎕NA''',fn,'>PP <PP <PP'' ⋄ _←''mon''⎕NA''',fn,'>PP P <PP'' ⋄ '
	f,'0=⎕NC''⍺'':mon 0 0 ⍵ ⋄ dya 0 ⍺ ⍵} ⋄ 0'}
MkNS	←{ns←#.⎕NS⍬ ⋄ ns⊣⍺∘{ns.⍎⍺ mkf ⍵}¨(1=1⌷⍉⍵)⌿0⌷⍉⍵}
Fix	←{⍺ MkNS ⍺ Cmp ⍵}
Xml	←{⎕XML (0⌷⍉⍵),(,∘⍕⌿2↑1↓⍉⍵),(⊂''),⍪(⊂(¯3+≢⍉⍵)↑,¨'nrsvyel'),∘⍪¨↓⍉3↓⍉⍵}
BSO	←{BUILD∆PATH,(dirc⍬),⍵,'_',COMPILER,(soext⍬)}
MKA←{	_	←'mka'⎕NA 'P ',(BSO ⍺),'|mkarray <PP'
		mka ⊂⍵}
EXA←{	_	←'exa'⎕NA (BSO ⍺),'|exarray >PP P I4'
		exa ⍬ (0⊃⍵) (1⊃⍵)}
FREA←{	_	←'frea'⎕NA (BSO ⍺),'|frea P'
		frea ⍵}
⍝[cf]
⍝[of]:AST
get	←{⍺⍺⌷⍉⍵}
up	←⍉(1+1↑⍉)⍪1↓⍉
bind	←{n _ e←⍵ ⋄ (0 n_⌷e)←⊂n ⋄ e}

d_ t_ k_ n_	←⍳f∆←4	⋄ d←d_ get	⋄ t←t_ get	⋄ k←k_ get	⋄ n←n_ get
r_ s_ v_ y_ e_	←f∆+⍳5	⋄ r←r_ get	⋄ s←s_ get	⋄ v←v_ get	⋄ y←y_ get	⋄ e←e_ get
l_	←f∆+5+⍳1	⋄ l←l_ get

new	←{⍉⍪f∆↑0 ⍺,⍵}	⋄ msk	←{(t ⍵)∊⊂⍺⍺}	⋄ sel	←{(⍺⍺ msk ⍵)⌿⍵}
A	←{('A'new ⍺⍺)⍪up⊃⍪/⍵}	⋄ Am	←'A'msk	⋄ As	←'A'sel
E	←{('E'new ⍺⍺)⍪up⊃⍪/⍵}	⋄ Em	←'E'msk	⋄ Es	←'E'sel
F	←{('F'new 1)⍪up⊃⍪/(⊂0 f∆⍴⍬),⍵}	⋄ Fm	←'F'msk	⋄ Fs	←'F'sel
M	←{('M'new⍬)⍪up⊃⍪/(⊂0 f∆⍴⍬),⍵}	⋄ Mm	←'M'msk	⋄ Ms	←'M'sel
N	←{'N'new 0 (⍎⍵)}	⋄ Nm	←'N'msk	⋄ Ns	←'N'sel
O	←{('O'new ⍺⍺)⍪up⊃⍪/⍵}	⋄ Om	←'O'msk	⋄ Os	←'O'sel
P	←{'P'new 0 ⍵}	⋄ Pm	←'P'msk	⋄ Ps	←'P'sel
S	←{'S'new 0 ⍵}	⋄ Sm	←'S'msk	⋄ Ss	←'S'sel
V	←{'V'new ⍺⍺ ⍵}	⋄ Vm	←'V'msk	⋄ Vs	←'V'sel
Y	←{'Y'new 0 ⍵}	⋄ Ym	←'Y'msk	⋄ Ys	←'Y'sel
Z	←{'Z'new 1 ⍵}	⋄ Zm	←'Z'msk	⋄ Zs	←'Z'sel
⍝[cf]
⍝[of]:Parser
⍝[of]:Parsing Combinators
_s←{0<⊃c a e r←z←⍺ ⍺⍺ ⍵:z ⋄ 0<⊃c2 a2 e r←z←e ⍵⍵ r:z ⋄ (c⌈c2)(a,a2) e r}
_o←{0≥⊃c a e r←z←⍺ ⍺⍺ ⍵:z ⋄ 0≥⊃c a e r2←z←⍺ ⍵⍵ ⍵:z ⋄ c a e(r↑⍨-⌊/≢¨r r2)}
_any←{⍺(⍺⍺ _s ∇ _o _yes)⍵} ⋄ _some←{⍺(⍺⍺ _s (⍺⍺ _any))⍵}
_opt←{⍺(⍺⍺ _o _yes)⍵} ⋄ _yes←{0 ⍬ ⍺ ⍵}
_t←{0<⊃c a e r←⍺ ⍺⍺ ⍵:c a e r ⋄ e ⍵⍵ a:c a e r ⋄ 2 ⍬ ⍺ ⍵}
_set←{(0≠≢⍵)∧(⊃⍵)∊⍺⍺:0(,⊃⍵)⍺(1↓⍵) ⋄ 2 ⍬ ⍺ ⍵}
_tk←{((≢,⍺⍺)↑⍵)≡,⍺⍺:0(⊂,⍺⍺)⍺((≢,⍺⍺)↓⍵) ⋄ 2 ⍬ ⍺ ⍵}
_as←{0<⊃c a e r←⍺ ⍺⍺ ⍵:c a e r ⋄ c (,⊂⍵⍵ a) e r} ⋄ _enc←{⍺(⍺⍺ _as {⍵})⍵}
_ign←{c a e r←⍺ ⍺⍺ ⍵ ⋄ c ⍬ e r}
_env←{0<⊃c a e r←p←⍺ ⍺⍺ ⍵:p ⋄ c a (e ⍵⍵ a) r}
_aew←{⍺(⍵⍵ _o (⍺⍺ _s ∇))⍵}
⍝[cf]
⍝[of]:Terminals/Tokens
ws←(' ',⎕UCS 9)_set
aws←ws _any _ign ⋄ awslf←(⎕UCS 10 13)_set _o ws _any _ign
nss←awslf _s(':Namespace'_tk)_s awslf _ign
nse←awslf _s(':EndNamespace'_tk)_s awslf _ign
gets←aws _s('←'_tk)_s aws ⋄ him←'¯'_set ⋄ dot←'.'_set ⋄ jot←'∘'_set
lbrc←aws _s('{'_tk)_s aws _ign ⋄ rbrc←aws _s('}'_tk)_s aws _ign
lpar←aws _s('('_tk)_s aws _ign ⋄ rpar←aws _s(')'_tk)_s aws _ign
lbrk←aws _s('['_tk)_s aws _ign ⋄ rbrk←aws _s(']'_tk)_s aws _ign
alpha←'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'_set
digits←'0123456789'_set
prim←(prims←'+-÷×|*⍟⌈⌊<≤=≠≥>∧∨⍲⍱⌷⍴,⍪⌽⊖⍉∊⊃⍳○~≡≢⊢⊣/⌿\⍀⊤⊥↑↓')_set
mop←'¨/⌿⍀\⍨'_set ⋄ dop←'.⍤⍣∘'_set
eot←aws _s {''≡⍵:0 ⍬ ⍺ '' ⋄ 2 ⍬ ⍺ ⍵} _ign
digs←digits _some ⋄ odigs←digits _any
int←aws _s (him _opt) _s digs _s aws
float←aws _s (int _s dot _s odigs _o (dot _s digs)) _s aws
name←aws _s alpha _s (alpha _o digits _any) _s aws
aw←aws _s ('⍺⍵'_set) _s aws
sep←aws _s (('⋄',⎕UCS 10 13)_set _ign) _s aws
⍝[cf]
⍝[of]:Productions
Sfn	←aws _s (('⎕sp' _tk)_o('⎕XOR' _tk)) _s aws _as {P ∊⍵}
Prim	←prim _as {P⍵⍴⍨1+⍵∊'/⌿⍀\'} _o Sfn
Fn	←{0<⊃c a e r←p←⍺(lbrc _s (Stmt _aew rbrc) _as F)⍵:p ⋄ c a ⍺ r}
Fnp	←Fn _o Prim
Mop	←(jot _s dot _as P) _s Fnp _as (1 O∘⌽) _o (Fnp _s (mop _as P) _as (1 O))
Dop	←Fnp _s (dop _as P) _s Fnp _as (2 O)
Bop	←{⍺(Prim _s lbrk _s Ex _s rbrk _as ('i'O))⍵}
Bind	←{⍺(name _enc _s gets _s ⍺⍺ _env (⍵⍵{(⊃⍵)⍺⍺⍪⍺}) _as bind)⍵}
Fex	←{⍺(∇ Bind 1 _o Dop _o Mop _o Bop _o Fn _o (1 Var'f') _o Prim)⍵}
Vt	←{((0⌷⍉⍺)⍳⊂⍵)1⌷⍺⍪'' ¯1}
Var	←{⍺(aw _o (name _t (⍺⍺=Vt)) _as (⍵⍵ V))⍵}
Num	←float _o int _as N
Strand	←0 Var 'a'  _s (0 Var 'a' _some) _as ('s'A)
Atom	←{⍺(Num _some _as ('n'A) _o Strand _o (0 Var'a' _as ('v'A)) _o Pex)⍵}
Mon	←{⍺(Fex _s Ex _as (1 E))⍵}
Dya	←{⍺((Idx _o Atom) _s Fex _s Ex _as (2 E))⍵}
Idx	←{⍺(Atom _s lbrk _s Ex _s rbrk _as ('i'E))⍵}
Ex	←{⍺(∇ Bind 0 _o Dya _o Mon _o Idx _o Atom)⍵}
Pex	←lpar _s Ex _s rpar
Stmt	←sep _any _s (Ex _o Fex) _s (sep _any)
Ns	←nss _s (Stmt _aew nse) _s eot _as M
⍝[cf]
ps←{0≠⊃c a e r←(0 2⍴⍬)Ns ∊⍵,¨⎕UCS 10:⎕SIGNAL c ⋄ (⊃a)e}
⍝[cf]
⍝[of]:Core Compiler
tt←{fd fz ff if ef td vc fs rl av va lt nv fv ce ur fc∘pc⍣≡ ca fe mr dn lf du df rd rn ⍵}
⍝[of]:Utilities
scp	←(1,1↓Fm)⊂[0]⊢
mnd	←{A⊣((⍺ ⍺⍺ ⍵)⌿A)←⍺⊣A←⍵⍵ ⍵}
sub	←{⍺←⊢ ⋄ A⊣(m⌿A)←⍺ ⍺⍺(m←⍺ ⍵⍵ ⍵)⌿A←⍵}
prf	←((≢↑¯1↓(0≠⊢)(/∘⊢)⊢)⍤1↑∘r)⊢
blg	←{⍺←⊢ ⋄ ⍺((prf(⌈/(⍳∘≢⊢)×⍤1(1↓⊣)∧.(=∨0=⊢)∘⍉⊢)⍺⍺(⌿∘↑)r)⌷⍤0 2 ⍺⍺(⌿∘⊢)⍵⍵)⍵}
enc	←⊂⊣,∘⊃((⊣,'_',⊢)/(⊂''),(⍕¨(0≠⊢)(/∘⊢)⊢))
veo	←∪((⊂'%u'),(,¨prims),⊣)~⍨∘{⊃,/{⊂⍣(1≡≡⍵)⊢⍵}¨⍵}¯1↓⊢(/⍨)(∧/¨0≠((⊃0⍴⊢)¨⊢))
ndo	←{⍺←⊢ ⋄ m⊃∘(⊂,⊢)¨⍺∘⍺⍺¨¨⍵⊃∘(,∘⊂⍨⊂)¨⍨m←1≥≡¨⍵}
n2f	←(⊃,/)((1=≡)⊃,∘⊂⍨∘⊂)¨
⍝[cf]
⍝[of]:Passes
⍝[of]:Record Node Coordinates
rn←⊢,∘↓(1+d)↑⍤¯1(+⍀d∘.=∘⍳1+(⌈/0,d))
⍝[cf]
⍝[of]:Record Function Depths
rd←⊢,(+/↑∘r∧.(=∨0=⊢)∘⍉∘↑∘r Fs)
⍝[cf]
⍝[of]:Drop Unnamed Functions
df←(~(+\1=d)∊((1=d)∧(Om∨Fm)∧0∊⍨n)(/∘⊢)(+\1=d))(⌿∘⊢)⊢
⍝[cf]
⍝[of]:Drop Unreachable Code
dua	←(Fm∨↓∘prf∊r∘Fs)(⊣(⍀∘⊢)(⊣(⌿∘⊢)0∊⍨n)(0,1↓(¯1⌽⊣)∧⊢=¯1⌽⊢)⊣(⌿∘⊢)d)⊢
du	←(~dua∨(∨/(prf∧.(=∨0=⊢)∘⍉dua(⌿∘⊢)prf)∧↑∘r∧.≥∘⍉dua(⌿∘⊢)↑∘r×0=prf))(⌿∘⊢)⊢
⍝[cf]
⍝[of]:Lift Functions
lfv	←⍉∘⍪(1+⊣),'Vf',('fn'enc 4⊃⊢),4↓⊢
lfn	←('F'≡1⊃⊢)⌷(⊣-⍨∘⊃⊢)((⊂∘⍉∘⍪⊣,1↓⊢),∘⊂(⊣,'Of',3↓⊢)⍪lfv)⊢
lfh	←(1<(+/⊣))⊃(⊂0↑⊢),∘⊂∘⍉∘⍪1'F'1,('fn'enc⊣),(⊂⊣),5↓∘,1↑⊢
lf	←(1↑⊢)⍪∘⊃(⍪/(1,1↓Fm)blg(↑r)(⊂lfh⍪∘⊃(⍪/((¯2+1=(+/⊣))+∘⊃⊢)lfn⍤¯1⊢))⌸1↓⊢)
⍝[cf]
⍝[of]:Drop Redundant Nodes
dn←((0∊⍨n)∧(Am∧'v'∊⍨k)∨Om∧'f'∊⍨k)((~⊣)(⌿∘⊢)(d-¯1⌽⊣),1↓[1]⊢)⊢
⍝[cf]
⍝[of]:Mark/Unmark Unit Returns
mre	←(⊢⍴⍨6,⍨≢×2<≢)(2 'E' 'u',3↓∘,1↑⊢)⍪(3'P'0(,'⊢'),4↓∘,1↑⊢)⍪(1+d),1↓⍤1⊢
mrm	←∨\(Vm∨Am)∧((¯1+≢)-1⍳⍨∘⌽2=d)=(⍳≢)
mr	←(⊃⍪/)((1↑⊢),((⊢(⌿⍨∘~⍪∘mre(⌿⍨))mrm)¨1↓⊢))∘scp
ur	←((2↑⊢),1,('um'enc∘⊃r),4↓⊢)⍤1sub(Em∧'u'∊⍨k)
⍝[cf]
⍝[of]:Flatten Expressions
fen	←((⊂'fe')(⊃enc)¨((0∊⍨n)∧Em∨Om∨Am)(⌿∘⊢)r)((0∊⍨n)∧Em∨Om∨Am)mnd n⊢
fet	←('V'0⍴⍨2,⍨(+/0,1↓Em∨Om∨Am))(0,1↓Em∨Om∨Am)mnd(t,∘⍪k)⊢
fee	←(⍪/⌽)(1,1↓Em∨Om∨Am)blg⊢((⊂(d-⊃-2⌊⊃),fet,fen,4↓⍤1⊢)⍪)⌸1↓⊢
fe	←(⊃⍪/)(+\Fm)(⍪/(⊂1↑⊢),∘((+\d=⊃)fee⌸⊢)1↓⊢)⌸⊢
⍝[cf]
⍝[of]:Compress Atomic Nodes
can	←(+\Am∨Om)((,1↑⊢),∘(⊂(¯1+2⌊≢)⊃(⊂∘⊂⊃),⊂)∘n 1↓⊢)⌸⊢
cam	←Om∧'f'∊⍨k
cas	←(Am(1↑⊢)⍪(Mm∨Am)blg⊢)∨¯1⌽cam
ca	←(can (cam∨cas∨Am)(⌿∘⊢)⊢)(Am∨cam)mnd⊢⍬,∘⊂⍨(~cas)(⌿∘⊢)⊢
⍝[cf]
⍝[of]:Propogate Constants
pcc	←(⊂⊢(⌿⍨)Am∨Om∧'f'∊⍨k)∘((⍳∘∪⍨n)⌷⍤0 2(1⌈≢)↑⊢)∘((1+⊃),1↓⍤1⊢)∘(⊃⍪⌿)∘⌽(⌿∘⊢)
pcs	←(d,'V','f',(⊃v),r,(⊂⍬),⍨∘⍪s)sub Om
pcv	←(d,'V','a',(⊃v),r,(⊂⍬),⍨∘⍪s)sub (Am∧'v'∊⍨k)
pcb	←((,∧.(=∨0=⊣)∘⍪)⍤2 1⍨∘↑∘r(1↑⊢)⍪Fs)pcc⍤1((⊢(⌿⍨)d=1+⊃)¨⊣)
pcd	←((~(Om∧('f'∊⍨k)∧1≠d)∨Am∧d=1+(∨\Fm))(⌿∘⊢)⊢)∘(⊃⍪/)
pc	←pcd scp(pcb(pcv∘pcs(((1⌈≢)↑⊢)⊣)⌷⍤0 2⍨(n⊣)⍳n)sub(Vm∧n∊∘n⊣)¨⊣)⊢
⍝[cf]
⍝[of]:Fold Constant Expressions
fce	←(⊃∘n Ps){⊂⍎' ⍵',⍨(≢⍵)⊃''(⍺,'⊃')('⊃',⍺,'/')⊣⍵}(v As)
fcm	←(∧/Em∨Am∨Pm)∧'u'≢∘⊃∘⊃k
fc	←((⊃⍪/)(((d,'An',3↓¯1↓,)1↑⊢),fce)¨sub(fcm¨))('MFOE'∊⍨t)⊂[0]⊢
⍝[cf]
⍝[of]:Compress Expressions
ce←(+\Fm∨Em∨Om)((¯1↓∘,1↑⊢),∘⊂(⊃∘v 1↑⊢),∘((v As)Am mnd n⊢)1↓⊢)⌸⊢
⍝[cf]
⍝[of]:Record Final Return Value
fv←(⊃⍪/)(((1↓⊢)⍪⍨(,1 6↑⊢),∘⊂∘n ¯1↑⊢)¨scp)
⍝[cf]
⍝[of]:Normalize Values Field
nvu	←⊂'%u' ⋄ nvi	←⊂'%i'
nvo	←((¯1↓⊢),({⍺'%b'⍵}/∘⊃v))⍤1sub(Om∧'i'∊⍨k)
nve	←((¯1↓⊢),({,¨⍺'['⍵}/∘⊃v))⍤1sub(Em∧'i'∊⍨k)
nvk	←((2↑⊢),2,(3↓⊢))⍤1sub(Em∧'i'∊⍨k)
nv	←nvk(⊢,⍨¯1↓⍤1⊣)Om((¯1⊖(¯1+≢)⊃(⊂nvu,nvi,⊢),(⊂nvu⍪⊢),∘⊂⊢){⌽⍣⍺⊢⍵})¨v∘nvo∘nve
⍝[cf]
⍝[of]:Lift Type-Checking
⍝[c]Type:	Index	Right	Left		Type Codes:	Value	Type
⍝[c]	0	Unknown	Unknown			Unknown	0
⍝[c]	1	Unknown	Integer			Integer	1
⍝[c]	2	Unknown	Float			Float	2
⍝[c]	3	Unknown	Bitvector			Bitvector	3
⍝[c]	4	Unknown	Not bound			Not bound	4
⍝[c]	5	Integer	Unknown
⍝[c]	6	Integer	Integer
⍝[c]	7	Integer	Float		Operator Codes:	Meaning	Code
⍝[c]	8	Integer	Bitvector			Left	0
⍝[c]	9	Integer	Not bound			Right	1
⍝[c]	10	Float	Unknown			Error	¯N
⍝[c]	11	Float	Integer
⍝[c]	12	Float	Float
⍝[c]	13	Float	Bitvector
⍝[c]	14	Float	Not bound
⍝[c]	15	Bitvector	Unknown
⍝[c]	16	Bitvector	Integer
⍝[c]	17	Bitvector	Float
⍝[c]	18	Bitvector	Bitvector
⍝[c]	19	Bitvector	Not bound
⍝[c]
⍝[of]:Primitive Types
pf1←9 14 19 6 7 8 ⋄ pf2←11 12 13 16 17 18
pn←⍬	⋄ pt←56 20⍴0
pn,←⊂'%b'	⋄ pt[00;pf1,pf2]←1 2 3 1 1 1 2 2 2 3 3 3
pn,←⊂'%i'	⋄ pt[01;pf1,pf2]←1 2 3 1 1 1 2 2 2 3 3 3
pn,←⊂'%u'	⋄ pt[02;]←20⍴4
⍝[c]
⍝[c]Name	RL:	IN	FN	BN	II	IF	IB
⍝[c]		FI	FF	FB	BI	BF	BB
pn,←⊂,'⍺'
	pt[03;pf1]←	¯6	¯6	¯6	1	2	3
	pt[03;pf2]←	1	2	3	1	2	3
pn,←⊂,'⍵'
	pt[04;pf1]←	1	2	3	1	1	1
	pt[04;pf2]←	2	2	2	3	3	3
pn,←⊂,'+'
	pt[05;pf1]←	1	2	3	1	2	1
	pt[05;pf2]←	2	2	2	1	2	1
pn,←⊂,'-'
	pt[06;pf1]←	1	2	1	1	2	1
	pt[06;pf2]←	2	2	2	1	2	1
pn,←⊂,'÷'
	pt[07;pf1]←	2	2	3	2	2	2
	pt[07;pf2]←	2	2	2	1	2	3
pn,←⊂,'×'
	pt[08;pf1]←	1	1	3	1	2	1
	pt[08;pf2]←	2	2	2	1	2	3
pn,←⊂,'|'
	pt[09;pf1]←	1	2	3	1	2	1
	pt[09;pf2]←	2	2	2	1	2	3
pn,←⊂,'*'
	pt[10;pf1]←	2	2	2	2	2	3
	pt[10;pf2]←	2	2	3	1	2	3
pn,←⊂,'⍟'
	pt[11;pf1]←	2	2	¯11	2	2	¯11
	pt[11;pf2]←	2	2	¯11	¯11	¯11	¯11
pn,←⊂,'⌈'
	pt[12;pf1]←	1	1	3	1	2	1
	pt[12;pf2]←	2	2	2	1	2	3
pn,←⊂,'⌊'
	pt[13;pf1]←	1	1	3	1	2	1
	pt[13;pf2]←	2	2	2	1	2	3
pn,←⊂,'<'
	pt[14;pf1]←	¯2	¯2	¯2	3	3	3
	pt[14;pf2]←	3	3	3	3	3	3
pn,←⊂,'≤'
	pt[15;pf1]←	¯2	¯2	¯2	3	3	3
	pt[15;pf2]←	3	3	3	3	3	3
⍝[c]
⍝[c]Name	RL:	IN	FN	BN	II	IF	IB
⍝[c]		FI	FF	FB	BI	BF	BB
pn,←⊂,'='
	pt[16;pf1]←	¯2	¯2	¯2	3	3	3
	pt[16;pf2]←	3	3	3	3	3	3
pn,←⊂,'≠'
	pt[17;pf1]←	¯2	¯2	¯2	3	3	3
	pt[17;pf2]←	3	3	3	3	3	3
pn,←⊂,'≥'
	pt[18;pf1]←	¯2	¯2	¯2	3	3	3
	pt[18;pf2]←	3	3	3	3	3	3
pn,←⊂,'>'
	pt[19;pf1]←	¯2	¯2	¯2	3	3	3
	pt[19;pf2]←	3	3	3	3	3	3
pn,←⊂,'⌷'
	pt[20;pf1]←	1	2	3	1	¯11	1
	pt[20;pf2]←	2	¯11	2	3	¯11	3
pn,←⊂,'⍴'
	pt[21;pf1]←	1	1	1	1	¯11	1
	pt[21;pf2]←	2	¯11	2	3	¯11	3
pn,←⊂,','
	pt[22;pf1]←	1	2	3	1	2	1
	pt[22;pf2]←	2	2	2	1	2	3
pn,←⊂,'⍳'
	pt[23;pf1]←	1	¯11	3	1	1	1
	pt[23;pf2]←	1	1	1	1	1	1
pn,←⊂,'○'
	pt[24;pf1]←	2	2	2	2	¯11	2
	pt[24;pf2]←	2	¯11	2	2	¯11	2
pn,←⊂,'~'
	pt[25;pf1]←	¯11	¯11	3	1	2	3
	pt[25;pf2]←	1	2	3	1	2	3
pn,←⊂,'['
	pt[26;pf1]←	¯2	¯2	¯2	1	2	3
	pt[26;pf2]←	¯11	¯11	¯11	1	2	3
pn,←⊂,'∧'
	pt[27;pf1]←	¯2	¯2	¯2	1	1	1
	pt[27;pf2]←	1	2	2	1	2	3
pn,←⊂,'∨'
	pt[28;pf1]←	¯2	¯2	¯2	1	2	1
	pt[28;pf2]←	2	2	2	1	2	3
⍝[c]
⍝[c]Name	RL:	IN	FN	BN	II	IF	IB
⍝[c]		FI	FF	FB	BI	BF	BB
pn,←⊂,'⍲'
	pt[29;pf1]←	¯2	¯2	¯2	¯11	¯11	¯11
	pt[29;pf2]←	¯11	¯11	¯11	¯11	¯11	3
pn,←⊂,'⍱'
	pt[30;pf1]←	¯2	¯2	¯2	¯11	¯11	¯11
	pt[30;pf2]←	¯11	¯11	¯11	¯11	¯11	3
pn,←⊂,'⍪'
	pt[31;pf1]←	1	2	3	1	2	1
	pt[31;pf2]←	2	2	2	1	2	3
pn,←⊂,'⌽'
	pt[32;pf1]←	1	2	3	1	¯11	1
	pt[32;pf2]←	2	¯11	2	3	¯11	3
pn,←⊂,'∊'
	pt[33;pf1]←	1	2	3	3	3	3
	pt[33;pf2]←	3	3	3	3	3	3
pn,←⊂,'⊃'
	pt[34;pf1]←	1	2	3	1	1	1
	pt[34;pf2]←	2	2	2	3	3	3
pn,←⊂,'⊖'
	pt[35;pf1]←	1	2	3	1	1	1
	pt[35;pf2]←	2	2	2	3	3	3
pn,←⊂,'≡'
	pt[36;pf1]←	1	1	1	1	1	1
	pt[36;pf2]←	1	1	1	1	1	1
pn,←⊂,'≢'
	pt[37;pf1]←	1	1	1	1	1	1
	pt[37;pf2]←	1	1	1	1	1	1
pn,←⊂,'⊢'
	pt[38;pf1]←	1	2	3	1	1	1
	pt[38;pf2]←	2	2	2	3	3	3
pn,←⊂,'⊣'
	pt[39;pf1]←	1	2	3	1	2	3
	pt[39;pf2]←	1	2	3	1	2	3
pn,←⊂'//'
	pt[40;pf1]←	¯2	¯2	¯2	1	¯11	1
	pt[40;pf2]←	2	¯11	2	3	¯11	3
pn,←⊂,'⍉'
	pt[41;pf1]←	1	2	3	1	1	1
	pt[41;pf2]←	2	2	2	3	3	3
⍝[c]
⍝[c]Name	RL:	IN	FN	BN	II	IF	IB
⍝[c]		FI	FF	FB	BI	BF	BB
pn,←⊂,'↑'
	pt[42;pf1]←	1	2	3	1	1	1
	pt[42;pf2]←	2	2	2	3	3	3
pn,←⊂,'↓'
	pt[43;pf1]←	1	2	3	1	1	1
	pt[43;pf2]←	2	2	2	3	3	3
pn,←⊂,'⊤'
	pt[44;pf1]←	¯2	¯2	¯2	1	¯16	1
	pt[44;pf2]←	¯16	¯16	¯16	3	3	3
pn,←⊂,'⊥'
	pt[45;pf1]←	¯2	¯2	¯2	1	¯16	1
	pt[45;pf2]←	¯16	¯16	¯16	1	¯16	1
pn,←⊂,'¨'
	pt[46;pf1]←	0	0	0	0	0	0
	pt[46;pf2]←	0	0	0	0	0	0
pn,←⊂,'⍨'
	pt[47;pf1]←	0	0	0	0	0	0
	pt[47;pf2]←	0	0	0	0	0	0
pn,←⊂,'/'
	pt[48;pf1]←	0	0	0	0	¯11	0
	pt[48;pf2]←	0	¯11	0	0	¯11	0
pn,←⊂,'⌿'
	pt[49;pf1]←	0	0	0	0	¯11	0
	pt[49;pf2]←	0	¯11	0	0	¯11	0
pn,←⊂,'\'
	pt[50;pf1]←	0	0	0	¯11	¯11	¯11
	pt[50;pf2]←	¯11	¯11	¯11	¯11	¯11	¯11
pn,←⊂,'⍀'
	pt[51;pf1]←	0	0	0	¯11	¯11	¯11
	pt[51;pf2]←	¯11	¯11	¯11	¯11	¯11	¯11
pn,←⊂'∘.'
	pt[52;pf1]←	¯2	¯2	¯2	0	0	0
	pt[52;pf2]←	0	0	0	0	0	0
pn,←⊂,'.'
	pt[53;pf1]←	¯2	¯2	¯2	0	0	0
	pt[53;pf2]←	0	0	0	0	0	0
pn,←⊂'⎕sp'
	pt[54;pf1]←	¯2	¯2	¯2	¯11	¯11	1
	pt[54;pf2]←	¯11	¯11	¯11	¯11	¯11	¯11
⍝[c]
⍝[c]Name	RL:	IN	FN	BN	II	IF	IB
⍝[c]		FI	FF	FB	BI	BF	BB
pn,←⊂'⎕XOR'
	pt[55;pf1]←	¯2	¯2	¯2	1	¯16	¯16
	pt[55;pf2]←	¯16	¯16	¯16	¯16	¯16	¯16
⍝[cf]
⍝[of]:Operator Indirections
⍝[c]oti:	(0 Lop) (1 Rop) (2 Rarg) (3 Larg)
otn←⍬	⋄ oti←0 2 2⍴⍬
otn,←⊂,'.'	⋄ oti⍪←↑(1 1)	(2 3)	⋄ otn,←⊂,'/'	⋄ oti⍪←↑(2 2)	(2 3)
otn,←⊂,'⌿'	⋄ oti⍪←↑(2 2)	(2 3)	⋄ otn,←⊂,'\'	⋄ oti⍪←↑(2 2)	(2 3)
otn,←⊂,'⍀'	⋄ oti⍪←↑(2 2)	(2 3)	⋄ otn,←⊂'∘.'	⋄ oti⍪←↑(2 3)	(2 3)
otn,←⊂,'¨'	⋄ oti⍪←↑(2 3)	(2 3)
	oti⍪←↑(2 3)	(2 3)
⍝[cf]

lte	←((20⌊1 4 5⊥((∨⌿¯1=×)⍪|))2↑⊢)⌷⍤0 1∘,(⌊/∘,2↑⊢),⍨¯1↑⊢
ltoa	←lte⍤2(2↑⊣),[1]⍨(oti⌷⍨otn⍳¯1↑∘⊃v)(⌷⍤0 2)(4 5⊤⍳20)⍪⍨(2↑1↓(⊃y))
ltob	←(⍴⊣)⍴(,(⌈/⊢))(⌷⍤0 1)0 4 3 1 2,⍤1 0∘,⊣
ltoc	←ltoa(⊣ltob 5 0 3 4 2 1⌷⍤0 1⍨1+¯1⌈,∘⍪⍤1)(4 5⊤⍳20)×(,¨'/⌿\⍀')∊⍨¯1↑∘⊃v
lto	←(((1+¯1⌈⊃)⌷0 0,⍨⊢)⍤1∘⍉⍪1⊖⊢)(¯1↑⊣)⍪ltoc
ltv	←(1⊃⊣)⌷⍤0 2⍨(⊃¨(0⊃⊣)⍳∘⊂ndo(⊃v))
ltt	←(Om∧1 2∨.=∘⊃k)⊃⊣(((lte⍪⊢)ltv){⍺⍵}ltv lto ⊢)(⍉∘⍪⊢)
lta	←(1↓¨(⊂⊢),∘⊂(20⍴1+(≢∘⌊⍨⊃∘⊃))⍤0)∘(0,∘∪(0≡∘⊃0⍴⊢)¨(⌿∘⊢)⊢)∘(⊃,/)∘v Es⍪Os
ltb	←⊣⍪¨(⊂n),∘⊂∘↑((,1↑⊢)¨y)
lt	←(pn pt⍪¨lta)(ltb((,¯1↓⊢),∘⊂ltt)⍤1⊢)⍣≡(⊂4 20⍴0),⍨⊢
⍝[cf]
⍝[of]:Allocate Value Slots
val	←(n⍳∘∪n),¨⊢(⊢+(≢⊣)×0=⊢)(⌈/(⍳≢)×⍤1(∪n)∘.((⊂⊣)∊⊢)(n2f¨v))
vag	←∧∘~∘(∘.=⍨∘⍳≢)⍨(∘.(((1⌷⊢)>0⌷⊣)∧(0⌷⊢)<1⌷⊣)⍨val)
vae	←(∪n)(⊣,⍤0⊣(⌷⍨⍤1 0)∘⊃((⊢,(⊃(⍳∘≢⊣)~((≢⊢)↑⊣)(/∘⊢)⊢))/∘⌽(⊂⍬),∘↓⊢))vag
vac	←(((0⌷∘⍉⊣)⍳∘⊂⊢)⊃(1⌷∘⍉⊣),∘⊂⊢)ndo
va	←((⊃⍪/)(1↑⊢),(((vae Es)(d,t,k,(⊣vac n),r,s,y,∘⍪⍨(⊂⊣)vac¨v)⊢)¨1↓⊢))scp
⍝[cf]
⍝[of]:Anchor Variables to Values
avb	←{(((,¨'⍺⍵')↑⍨1↓⍴)⍪⊢)⍺⌷⍨⍤2 0⊢⍺⍺⍳⍺⍺∩⍨(↓(⌽1+∘⍳0⍳⍨⊢)((≢⊢)↑↑)⍤0 1⊢)⊃r ⍵}
avi	←¯1 0+(⍴⊣)⊤(,⊣)⍳(⊂⊢)
avh	←{⊂⍵,(n⍵)((⍺⍺(⍵⍵ avb)⍵){⍺⍺ avi ndo(⊂⍺),⍵})¨v⍵}
av	←(⊃⍪/)(+\Fm){⍺((⍺((∪∘⌽n)Es)⌸⍵)avh(r(1↑⍵)⍪Fs ⍵))⌸⍵}⊢
⍝[cf]
⍝[of]:Record Live Variables
rlf	←(⌽↓(((1⊃⊣)∪⊢~0⌷⊣)/∘⌽(⊂⍬),↑)⍤0 1⍨1+∘⍳≢)(⊖1⊖n,⍤0(⊂⊣)veo¨v)
rl	←⊢,∘(⊃,/)(⊂∘n Os⍪Fs)rlf¨scp
⍝[cf]
⍝[of]:Fuse Scalar Loops
fsf	←(∪∘⊃,/)(⊂⊂⍬ ⍬ ⍬),(⌽¯1↓⊢)¨~¨(⊂,⊂'%u'(4⍴⍨≢⍉pt)(¯1 0))∪¨∘(⍳∘≢↑¨⊂)⊣
fsn	←↓n,((,1↑⊢)¨y),⍤0(⊃¨e)
fsv	←v(↓,∘⊃⍤0)¨((↓1↓⊢)¨y)(↓,⍤0)¨1↓¨e
fsh	←(⍉⍪)2'S'0 ⍬ ⍬ 0,(((⊂0⌷⊢),(⊂∘↑1⌷⊢),(⊂2⌷⊢))∘⍉1↓∘↑fsn fsf fsv),∘l ¯1↑⊢
fsm	←Em∧(1∊⍨k)∧(,¨'~⌷')∊⍨(⊃∘⌽¨v)
fss	←fsm∨Em∧(1 2∊⍨k)∧((⊂'⎕XOR'),⍨,¨'+-×÷|⌊⌈*⍟○!∧∨⍱⍲<≤=≥>≠')∊⍨(⊃∘⌽¨v)
fsx	←(⊣(/∘⊢)fss∧⊣)(⊣⊃(⊂⊢),(⊂fsh⍪(1+d),'E',0,3↓⍤1⊢))¨⊂[0]
fs	←(⊃⍪/)(((((⊃⍪/)(⊂0 10⍴⍬),((2≠/(~⊃),⊢)fss)fsx⊢)Es)⍪⍨(~Em)(⌿∘⊢)⊢)¨scp)
⍝[cf]
⍝[of]:Compress Scalar Expressions
vc←(⊃⍪/)(((1↓⊢)⍪⍨(1 6↑⊢),(≢∘∪∘n Es),1 ¯3↑⊢)¨scp)
⍝[cf]
⍝[of]:Type Dispatch/Specialization
tdn	←'ii' 'if' 'ib' 'in' 'fi' 'ff' 'fb' 'fn' 'bi' 'bf' 'bb' 'bn'
tdi	←6 7 8 9 11 12 13 14 16 17 18 19
tde	←((¯3↓⊢),(Om⌷y,⍨∘⊂(tdi⌷⍨⊣)⌷∘⍉∘⊃y),¯2↑⊢)⍤1
tdf	←(1↓⊢)⍪⍨(,1 3↑⊢),(⊂(⊃n),tdn⊃⍨⊣),(4↓∘,1↑⊢)
td	←((⊃⍪/)(1↑⊢),∘(⊃,/)(((⍳12)(⊣tdf tde)¨⊂)¨1↓⊢))scp
⍝[cf]
⍝[of]:Convert Error Functions
eff	←(⊃⍪/)⊢(((⊂∘⍉∘⍪d,'Fe',3↓,)1↑⊣),1↓⊢)(d=∘⊃d)⊂[0]⊢
ef	←(Fm∧¯1=∘×∘⊃¨y)((⊃⍪/)(⊂⊢(⌿⍨)∘~(∨\⊣)),(eff¨⊂[0]))⊢
⍝[cf]
⍝[of]:Create Initializer for Globals
ifn	←1 'F' 0 'Init' ⍬ 0,(4⍴0) ⍬ ⍬,⍨⊢
if	←(1↑⊢)⍪(⊢(⌿⍨)Om∧1=d)⍪((up⍪⍨∘ifn∘≢∘∪n)⊢(⌿⍨)Em∧1=d)⍪(∨\Fm)(⌿∘⊢)⊢
⍝[cf]
⍝[of]:Flatten Functions
fft	←(,1↑⊢)(1 'Z',(2↓¯5↓⊣),(v⊣),n,y,(⊂2↑∘,∘⊃∘⊃e),l)(¯1↑⊢)
ff	←((⊃⍪/)(1↑⊢),(((1↑⊢)⍪(((¯1+d),1↓⍤1⊢)1↓⊢)⍪fft)¨1↓⊢))scp
⍝[cf]
⍝[of]:Flatten Scalar Groups
fzh	←((∪n)∩(⊃∘l⊣))(¯1⌽(⊂⊣),((≢⊢)-1+(⌽n)⍳⊣)((⊂⊣⊃¨∘⊂(⊃¨e)),(⊂⊣⊃¨∘⊂(⊃¨y)),∘⊂⊣)⊢)⊢
fzf	←0≠(≢∘⍴¨∘⊃∘v⊣)
fzb	←(((⊃∘v⊣)(⌿⍨)fzf),n),∘⍪('f'∘,∘⍕¨∘⍳(+/fzf)),('s'∘,∘⍕¨∘⍳∘≢⊢)
fzv	←((⊂⊣)(⊖↑)⍨¨(≢⊣)(-+∘⍳⊢)(≢⊢))((⊢,⍨1⌷∘⍉⊣)⌷⍨(0⌷∘⍉⊣)⍳⊢)⍤2 0¨v
fze	←(¯1+d),t,k,fzb((⊢/(-∘≢⊢)↑⊣),r,s,fzv,y,e,∘⍪l)⊢
fzs	←(,1↑⊢)(1⊖(⊣((1 'Y',(2⌷⊣),⊢)⍪∘⍉∘⍪(3↑⊣),⊢)1⌽fzh,¯1↓6↓⊣)⍪fze)(⌿∘⊢)
fz	←((⊃⍪/)(1↑⊢),(((2=d)(fzs⍪(1↓∘~⊣)(⌿∘⊢)1↓⊢)⊢)¨1↓⊢))(1,1↓Sm)⊂[0]⊢
⍝[cf]
⍝[of]:Create Function Declarations
fd←(1↑⊢)⍪((1,'Fd',3↓⊢)⍤1 Fs)⍪1↓⊢
⍝[cf]
⍝[cf]
⍝[cf]
⍝[of]:Code Generator
dis	←{⍺←⊢ ⋄ 0=⊃t⍵:5⍴⍬ ⋄ ⍺(⍎(⊃t⍵),⍕⊃k⍵)⍵}
gc	←{((⊃,/)⊢((fdb⍪⍨∘(dis⍤1)(⌿⍨))(⊂dis)⍤2 1(⌿⍨∘~))(Om∧1 2 'i'∊⍨k))⍵}
E1	←{r u f←⊃v⍵ ⋄ (2↑⊃y⍵)(f fcl ⍺)(⊃n⍵)r,⍪2↑⊃e⍵}
E2	←{r l f←⊃v⍵ ⋄ (¯1↓⊃y⍵)(f fcl ⍺)((⊃n⍵)r l),⍪¯1↓⊃e⍵}
E0	←{r l f←⊃v⍵ ⋄ (n⍵)((⊃y⍵)sget)(¯1↓⊃y⍵)(f scal sdb)r l}
Oi	←{(⊃n⍵)('Fexim()i',nl)('catdo')'' ''}
O1	←{(n⍵),odb(o ocl(⊃y⍵))⊂f⊣f u o←⊃v⍵}
O2	←{(n⍵),odb(o ocl(⊃y⍵))2↑⊣r l o←⊃v⍵}
O0	←{'' '' '' '' ''}
Of	←{(fndy ⍵),nl,nl,(⊃,/(⍳12)fncd¨⊂⍵),nl}
Fd	←{frt,(⊃n⍵),flp,';',nl}
Fe	←{frt,(⊃n⍵),flp,'{',nl,'error(',(⍕|⊃⊃y⍵),');',nl}
F0	←{frt,(⊃n⍵),flp,'{',nl,'A*env[]={tenv};',nl,('tenv'reg ⍵),nl}
F1	←{frt,(⊃n⍵),flp,'{',nl,('env0'dnv ⍵),(fnv ⍵),('env0'reg ⍵),nl,''⊣fnacc⍵}
Z0	←{'}',nl,nl}
zap	←{'memcpy(z,',((⊃n⍵)var ⊃e⍵),',sizeof(A));'}
Z1	←{'cpaa(z,',((⊃n⍵)var⊃e⍵),');',nl,'fe(&env0[1],',(⍕¯1+⊃s⍵),');}',nl,nl}
Ze	←{'}',nl,nl}
M0	←{rth,('tenv'dnv ⍵),nl,'A*env[]={',((0≡⊃⍵)⊃'tenv' 'NULL'),'};',nl}
S0	←{(('{',rk0,srk,'DO(i,prk)cnt*=sp[i];',spp,sfv,slp)⍵)}
Y0	←{⊃,/((⍳≢⊃n⍵)((⊣sts¨(⊃l),¨∘⊃s),'}',nl,⊣ste¨(⊃n)var¨∘⊃r)⍵),'}',nl}
⍝[cf]
⍝[of]:Runtime Code
⍝[of]:Runtime Utilities
nl	←⎕UCS 13 10
enc	←⊂⊣,∘⊃((⊣,'_',⊢)/(⊂''),(⍕¨(0≠⊢)(/∘⊢)⊢))
fvs	←,⍤0(⌿⍨)0≠(≢∘⍴¨⊣)
cln	←'¯'⎕R'-'
var	←{(,'⍺')≡⍺:,'l' ⋄ (,'⍵')≡⍺:,'r' ⋄ ¯1≥⊃⍵:,⍺ ⋄ '&env[',(⍕⊃⍵),'][',(⍕⊃⌽⍵),']'}
dnv	←{(0≡z)⊃('A ',⍺,'[',(⍕z←⊃v⍵),'];')('A*',⍺,'=NULL;')}
reg	←{'DO(i,',(⍕⊃v⍵),')',⍺,'[i].v=NULL;'}
fnv	←{'A*env[]={',(⊃,/(⊂'env0'),{',penv[',(⍕⍵),']'}¨⍳⊃s ⍵),'};',nl}
git	←{⍵⊃¨⊂'/* XXX */ aplint32 ' 'aplint32 ' 'double ' 'U8 ' '?type? '}
gie	←{⍵⊃¨⊂'/* XXX */ APLLONG' 'APLLONG' 'APLDOUB' 'APLBOOL' 'APLNA'}
pacc	←{('pg'≡2↑COMPILER)⊃''('#pragma acc ',⍵,nl)}
simdc	←{('#pragma acc kernels loop ',⍵,nl)('')('')}
simd	←{('pg' 'ic'⍳⊂2↑COMPILER)⊃simdc ⍵}
⍝[cf]
⍝[of]:Function Entry
frt	←'static void '
fre	←'void EXPORT '
foi	←'if(!isinit){Init(NULL,NULL,NULL,NULL);isinit=1;}',nl
flp	←'(A*z,A*l,A*r,A*penv[])'
elp	←'(LOCALP*z,LOCALP*l,LOCALP*r)'
tps	←'A cl,cr;cl.v=NULL;cr.v=NULL;cpda(&cr,r);if(l!=NULL)cpda(&cl,l);',nl
tps	,←'int tp=0;switch(r->p->ELTYPE){',nl
tps	,←'case APLINTG:case APLSINT:case APLLONG:break;',nl
tps	,←'case APLDOUB:tp=4;break;case APLBOOL:tp=8;break;',nl
tps	,←'default:error(16);}',nl
tps	,←'if(l==NULL)tp+=3;else switch(l->p->ELTYPE){',nl
tps	,←'case APLINTG:case APLSINT:case APLLONG:break;',nl
tps	,←'case APLDOUB:tp+=1;break;case APLBOOL:tp+=2;break;',nl
tps	,←'default:error(16);}',nl
tps	,←'A za;za.v=NULL;',nl,'switch(tp){',nl
fcln	←'frea(&cl);',nl,'frea(&cr);',nl,'frea(&za);',nl
dcl	←{(0>e)⊃((⊃⊃v⍵),(⍺⊃tdn),'(',⍺⍺,',env);')('error(',(cln⍕|e←⊃(⍺⌷tdi)⌷⍉⊃y⍵),');')}
dcp	←{(0>e)⊃('cpad(z,&za,',(⊃gie 0⌈e←⊃(⍺⌷tdi)⌷⍉⊃y ⍵),');')''}
case	←{'case ',(⍕⍺),':',(⍺('&za,&cl,&cr'dcl)⍵),(⍺ dcp ⍵),'break;',nl}
fnacc	←{(pacc 'data copyin(env0[:',(⍕⊃v⍵),'])'),'{'}
fndy	←{fre,(⊃n⍵),elp,'{',nl,foi,tps,(⊃,/(⍳12)case¨⊂⍵),'}',nl,fcln,'}'}
fncd	←{fre,(⊃n⍵),(⍺⊃tdn),'(A*z,A*l,A*r){',(⍺('z,l,r'dcl)⍵),'}',nl}
⍝[cf]
⍝[of]:Scalar Primitives
⍝ respos←'⍵ % ⍺'
respos	←'fmod((D)⍵,(D)⍺)'
resneg	←'⍵-⍺*floor(((D)⍵)/(D)(⍺+(0==⍺)))'
residue	←'(0==⍺)?⍵:((0<=⍺&&0<=⍵)?',respos,':',resneg,')'

sdb←0 5⍴⊂'' ⋄ scl←{cln ((≢⍵)↑,¨'⍵⍺')⎕R(scln∘⍕¨⍵) ⊃⍺⌷⍨((⊂⍺⍺)⍳⍨0⌷⍉⍺),≢⍵}
⍝[c]
⍝[c]Prim	Monadic	Dyadic	Monadic Bool	Dyadic Bool
sdb⍪←,¨'+'	'⍵'	'⍺+⍵'	'⍵'	'⍺+⍵'
sdb⍪←,¨'-'	'-1*⍵'	'⍺-⍵'	'-1*⍵'	'⍺-⍵'
sdb⍪←,¨'×'	'(⍵>0)-(⍵<0)'	'⍺*⍵'	'⍵'	'⍺&⍵'
sdb⍪←,¨'÷'	'1.0/⍵'	'((D)⍺)/((D)⍵)'	'⍵'	'⍺&⍵'
sdb⍪←,¨'*'	'exp((D)⍵)'	'pow((D)⍺,(D)⍵)'	'exp((double)⍵)'	'⍺|~⍵'
sdb⍪←,¨'⍟'	'log((D)⍵)'	'log((D)⍵)/log((D)⍺)'	''	''
sdb⍪←,¨'|'	'fabs(⍵)'	residue	'⍵'	'⍵&(⍺^⍵)'
sdb⍪←,¨'○'	'PI*⍵'	'error(16)'	'PI*⍵'	'error(16)'
sdb⍪←,¨'⌊'	'floor((double)⍵)'	'⍺ < ⍵ ? ⍺ : ⍵'	'⍵'	'⍺&⍵'
sdb⍪←,¨'⌈'	'ceil((double)⍵)'	'⍺ > ⍵ ? ⍺ : ⍵'	'⍵'	'⍺|⍵'
sdb⍪←,¨'<'	'error(99)'	'⍺<⍵'	'error(99)'	'(~⍺)&⍵'
sdb⍪←,¨'≤'	'error(99)'	'⍺<=⍵'	'error(99)'	'(~⍺)|⍵'
sdb⍪←,¨'='	'error(99)'	'⍺==⍵'	'error(99)'	'(⍺&⍵)|((~⍺)&(~⍵))'
sdb⍪←,¨'≥'	'error(99)'	'⍺>=⍵'	'error(99)'	'⍺|(~⍵)'
sdb⍪←,¨'>'	'error(99)'	'⍺>⍵'	'error(99)'	'⍺&(~⍵)'
sdb⍪←,¨'≠'	'error(99)'	'⍺!=⍵'	'error(99)'	'⍺^⍵'
sdb⍪←,¨'~'	'0==⍵'	'error(16)'	'~⍵'	'error(16)'
sdb⍪←,¨'∧'	'error(99)'	'lcm(⍺,⍵)'	'error(99)'	'⍺&⍵'
sdb⍪←,¨'∨'	'error(99)'	'gcd(⍺,⍵)'	'error(99)'	'⍺|⍵'
sdb⍪←,¨'⍲'	'error(99)'	'!(⍺ && ⍵)'	'error(99)'	'~(⍺&⍵)'
sdb⍪←,¨'⍱'	'error(99)'	'!(⍺ || ⍵)'	'error(99)'	'~(⍺|⍵)'
sdb⍪←,¨'⌷'	'⍵'	'error(99)'	'⍵'	'error(99)'
sdb⍪←'⎕XOR'	'error(99)'	'⍺ ^ ⍵'	'error(99)'	'⍺ ^ ⍵'
⍝[cf]
⍝[of]:Scalar Loop Generators
simp	←{' present(',(⊃{⍺,',',⍵}/'d',∘⍕¨⍳≢var/(m←~0=(⊃0⍴∘⊂⊃)¨0⌷⍉⍵)⌿⍵),')'}
sima	←{{' copyin(',(⊃{⍺,',',⍵}/⍵),')'}⍣(0<a)⊢'d',∘⍕¨(+/~m)+⍳a←≢⊣/(m←0=(⊃0⍴∘⊂⊃)¨0⌷⍉⍵)⌿⍵}
simr	←{' present(',(⊃{⍺,',',⍵}/'r',∘⍕¨⍳≢⊃n⍵),')'}
simc	←{fv←(⊃v⍵)fvs(⊃e⍵) ⋄ ' independent ',(simp fv),(sima fv),simr ⍵}
slpd	←'I n=ceil(cnt/8.0);',nl
slp	←{slpd,(simd simc ⍵),'DO(i,n){',nl,⊃,/(1⌷⍉(⊃v⍵)fvs(⊃y⍵))sip¨⍳≢(⊃v⍵)fvs(⊃e⍵)}
rk0	←'I prk=0;B sp[15];B cnt=1;',nl
rk1	←'if(prk!=(' ⋄ rk2←')->r){if(prk==0){',nl
rsp	←{'prk=(',⍵,')->r;',nl,'DO(i,prk) sp[i]=(',⍵,')->s[i];'}
rk3	←'}else if((' ⋄ rk4←')->r!=0)error(4);',nl
spt	←{'if(sp[i]!=(',⍵,')->s[i])error(4);'}
rkv	←{rk1,⍵,rk2,(rsp ⍵),rk3,⍵,rk4,'}else{',nl,'DO(i,prk){',(spt ⍵),'}}',nl}
rk5	←'if(prk!=1){if(prk==0){prk=1;sp[0]='
rka	←{rk5,l,';}else error(4);}else if(sp[0]!=',(l←⍕≢⍵),')error(4);',nl}
crk	←{⍵((⊃,/)((rkv¨var/)⊣(⌿⍨)(~⊢)),(rka¨0⌷∘⍉(⌿⍨)))0=(⊃0⍴∘⊂⊃)¨0⌷⍉⍵}
srk	←{crk(⊃v⍵)(,⍤0(⌿⍨)0≠(≢∘⍴¨⊣))(⊃e⍵)}
ste	←{'cpaa(',⍵,',&p',(⍕⍺),');',nl}
stsn	←{⊃,/((⍳8){'r',(⍕⍵),'[i*8+',(⍕⍺),']='}¨⍺),¨(⍳8){'s',(⍕⍵),'_',(⍕⍺),';',nl}¨⍵}
sts	←{i t←⍵ ⋄ 3≡t:'r',(⍕⍺),'[i]=s',(⍕i),';',nl ⋄ ⍺ stsn i}
rkp	←{'I m',(⍕⊃⌽⍺),'=(',(⍕⍵),')->r==0?0:1;',nl}
gdp	←{(⊃git ⊃⍺),'*restrict d',(⍕⊃⌽⍺),'=(',⍵,')->v;',nl}
gda	←{'d',(⍕⍺),'[]={',(⊃{⍺,',',⍵}/⍕¨⍵),'};',nl,'B m',(⍕⍺),'=1;',nl}
sfa	←{(git m/⍺),¨{((+/~m)+⍳≢⍵)gda¨⍵}⊣/(m←0=(⊃0⍴∘⊂⊃)¨0⌷⍉⍵)⌿⍵}
sfp	←{(m⌿⍺){(⍺,¨⍳≢⍵)(gdp,rkp)¨⍵}var/(m←~0=(⊃0⍴∘⊂⊃)¨0⌷⍉⍵)⌿⍵}
sfv	←(1⌷∘⍉(⊃v)fvs(⊃y))((⊃,/)sfp,sfa)(⊃v)fvs(⊃e)
ack	←{'ai(&p',(⍕⍺),',prk,sp,',(⍕⍺⌷⍺⍺),');',nl}
gpp	←{⊃,/{'A p',(⍕⍵),';p',(⍕⍵),'.v=NULL;',nl}¨⍳≢⍵}
grs	←{(⊃git ⍺),'*restrict r',(⍕⍵),'=p',(⍕⍵),'.v;',nl}
spp	←(⊃s){(gpp⍵),(⊃,/(⍳≢⍵)(⍺ ack)¨⍵),(⊃,/⍺ grs¨⍳≢⍵)}(⊃n)var¨(⊃r)
sip←{	w←⍕⍵
	3≡⍺:	(⊃git ⍺),'f',w,'=d',w,'[i*m',w,'];',nl
		⊃,/(⍕¨⍳8)((⊃git ⍺){⍺⍺,'f',⍵,'_',⍺,'=d',⍵,'[(i*8+',⍺,')*m',⍵,'];',nl})¨⊂w}
⍝[cf]
⍝[of]:Scalar Expression Generators
sfnl	←{⊃⍺⍺⌷⍨((⊂⍺)⍳⍨0⌷⍉⍺⍺),(2×∧/∨⌿3 4∘.=⍵)+4+.≠⍵}
scln	←(,¨'%&')⎕R'\\\%' '\\\&'
sstm	←{cln (,¨'⍵⍺')⎕R(scln∘⍕∘⊃¨⍺ ⍵)⊢⍺⍺(⍵⍵ sfnl)⊃∘⌽¨⍺ ⍵}
sidx←{	0=⊃⊃0⍴⊂⍵:	8⍴⊂⍵ (⍺⊃⍺⍺)
	∧/⊃3 4∨.=⊂⍺⍺:	⊂⍵ (⍺⊃⍺⍺)
	3=⍺⊃⍺⍺:	↓(⍺⊃⍺⍺),⍨⍪(⌽⍳8){'(1&(',⍵,'>>',(⍕⍺),'))'}¨⊂⍵
		↓(⍺⊃⍺⍺),⍨⍪(⍳8){⍵,'_',⍕⍺}¨⊂⍵}
scal	←{⊃⍺⍺ sstm ⍵⍵¨/1 2(⍺ sidx)¨⍵}
sgtbn	←{⍺⍺,'|=((U8)(',⍵,'))<<',(⍕7-⍺),';',nl}
sgtnn	←{⍺⍺,'_',(⍕⍺),'=',⍵,';',nl}
sgtbb	←{⍺,'=',⍵,';',nl}
sget←{	nm	←(⊃git⊃⍺⍺),⊃⍺
	∧/⊃3 4∨.=⊂3↑⍺⍺:	⊃,/nm∘sgtbb¨⍵
	3=⊃⍺⍺:	nm,'=0;',nl,⊃,/(⍳8)((⊃⍺)sgtbn)¨⍵
		⊃,/(⍳8)(nm sgtnn)¨⍵}
⍝[cf]
⍝[of]:Scalar/Mixed Conversion
mxsm←{	siz	←'zr=rr;DO(i,zr){zc*=rs[i];zs[i]=rs[i];}'
	exe	←(simd''),'DO(i,zc){zv[i]=',(,'⍵')⎕R'rv[i]'⊢⍺⍺,';}'
		'' siz exe mxfn 1 ⍺ ⍵}
mxsd←{	chk	←'if(lr==rr){DO(i,lr){if(rs[i]!=ls[i])error(5);}}',nl
	chk	,←'else if(lr!=0&&rr!=0){error(4);}'
	siz	←'if(rr==0){zr=lr;DO(i,lr){zc*=ls[i];lc*=ls[i];zs[i]=ls[i];}}',nl
	siz	,←'else{zr=rr;DO(i,rr){zc*=rs[i];rc*=rs[i];zs[i]=rs[i];}DO(i,lr)lc*=ls[i];}',nl
	exe	←simd 'pcopyin(lv[:lc],rv[:rc])'
	exe	,←'DO(i,zc){zv[i]=',(,¨'⍺⍵')⎕R'lv[i\%lc]' 'rv[i\%rc]'⊢⍺⍺,';}'
		chk siz exe mxfn 1 ⍺ ⍵}
scmx←{	(⊂⍺⍺)∊0⌷⍉sdb:(⊃⍵),'=',';',⍨sdb(⍺⍺ scl)1↓⍵ ⋄ ⍺(⍺⍺ fcl ⍵⍵)⍵,⍤0⊢⊂2⍴¯1}
sdbm	←(0⌷⍉sdb),'mxsm' 'mxsd' 'mxbm' 'mxbd' {'(''',⍵,'''',⍺,')'}¨⍤1⊢⍉1↓⍉sdb
⍝[cf]
⍝[of]:Primitive Operators
ocl	←{⍵∘(⍵⍵{'(',(opl ⍺),(opt ⍺⍺),⍵,' ⍵⍵)'})¨1↓⍺⌷⍨(0⌷⍉⍺)⍳⊂⍺⍺}
opl	←{⊃,/{'(,''',⍵,''')'}¨⍵}
opt	←{'(',(⍕⍴⍵),'⍴',(⍕,⍵),')'}
odb	←0 5⍴⊂''
⍝[c]
⍝[c]Prim	Monadic	Dyadic	Monadic Bool	Dyadic Bool
odb⍪←,¨'⍨'	'comm'	'comd'	''	''
odb⍪←,¨'¨'	'eacm'	'eacd'	''	''
odb⍪←,¨'/'	'redm'	'redd'	''	''
odb⍪←,¨'⌿'	'rd1m'	'rd1d'	''	''
odb⍪←,¨'\'	'scnm'	'err16'	''	''
odb⍪←,¨'⍀'	'sc1m'	'err16'	''	''
odb⍪←,¨'.'	'err99'	'inpd'	''	''
odb⍪←'∘.'	'err99'	'oupd'	''	''

err99←{_←⍺⍺ ⍵⍵ ⋄ ⎕SIGNAL 99}
err16←{_←⍺⍺ ⍵⍵ ⋄ ⎕SIGNAL 16}

⍝[of]:Commute
comd	←{((1↑⍺)⍪⊖1↓⍺)((⊃⍺⍺)fcl(⍵⍵⍪sdbm))(1↑⍵)⍪⊖1↓⍵}
comm	←{((1↑⍺)⍪⍪⍨1↓⍺)((⊃⍺⍺)fcl(⍵⍵⍪sdbm))(1↑⍵)⍪⍪⍨1↓⍵}
⍝[cf]
⍝[of]:Each
eacm←{	siz	←'zr=rr;DO(i,zr){zc*=rs[i];zs[i]=rs[i];}'
	exe	←pacc'update host(rv[:rgt->c])'
	exe	,←'DO(i,zc){',(⍺((⊃⍺⍺)scmx ⍵⍵)'zv[i]' 'rv[i]'),'}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		'' siz exe mxfn 1 ⍺ ⍵}
eacd←{	chk	←'if(lr==rr){DO(i,lr){if(rs[i]!=ls[i])error(5);}}',nl
	chk	,←'else if(lr!=0&&rr!=0){error(4);}'
	siz	←'if(rr==0){zr=lr;DO(i,lr){zc*=ls[i];lc*=ls[i];zs[i]=ls[i];}}',nl
	siz	,←'else{zr=rr;DO(i,rr){zc*=rs[i];rc*=rs[i];zs[i]=rs[i];}DO(i,lr)lc*=ls[i];}'
	exe	←pacc'update host(lv[:lft->c],rv[:rgt->c])'
	exe	,←'DO(i,zc){',(⍺((⊃⍺⍺)scmx ⍵⍵)'zv[i]' 'rv[i]' 'lv[i]'),'}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Reduce
redm←{	idf	←(,¨'+-×÷|⌊⌈*!∧∨<≤=>≥≠⊤∪/⌿\⍀⌽⊖'),⊂'⎕XOR'
	idv	←⍕¨0 0 1 1 0 '1.7e308' '-1.7e308' 1 1 1 0 0 1 1 0 1 0 0 '-1' 1 1 1 1 0 0 0 ''
	hid	←idf∊⍨0⌷⍺⍺
	gpf	←(,¨'+×∧∨'),⊂'⎕XOR'
	gpv	←⍕¨0 1 1 0 0 ''
	gid	←gpf∊⍨0⌷⍺⍺
	chk	←hid⊃('if(rr>0&&rs[rr-1]==0)error(11);')''
	siz	←'if(rr==0){zr=0;}',nl
	siz	,←'else{zr=rr-1;DO(i,zr){zc*=rs[i];zs[i]=rs[i];};rc=rs[zr];}'
	exe	←'I zn=',((3=⊃0⌷⍺)⊃'zc' 'ceil(zc/8.0)'),';'
	exe	,←'I rn=',((3=⊃1⌷⍺)⊃'rc' 'ceil(rc/8.0)'),';',nl
	exe	,←'if(rc==0){'
	exe1a	←'error(11);',nl
	exe1b	←nl,simd'present(zv[:zc])'
	exe1b	,←'DO(i,zc){zv[i]=',(idv⊃⍨idf⍳0⌷⍺⍺),';}',nl
	exe1c	←nl,simd'present(zv[:zn])'
	exe1c	,←'DO(i,zn){zv[i]=',('0' '-1' ''⊃⍨(,¨'01')⍳idv⌷⍨idf⍳0⌷⍺⍺),';}',nl
	exe	,←(2⊥hid(3=⊃0⌷⍺))⊃exe1a exe1a exe1b exe1c
	exe	,←'}else if(rc==1){'
	exe	,←nl,simd'present(zv[:zn],rv[:zn])'
	exe	,←'DO(i,zn){zv[i]=rv[i];}',nl
	exe	,←'}else if(zc==1){'
	exe3a	←nl,pacc gid⊃'update host(rv[:rc])' 'update host(rv[rc-1:1])'
	exe3a	,←(⊃git⊃⍺),'val=rv[rc-1];I n=rc-1;',nl
	exe3a	,←pacc gid⊃'enter data copyin(val)' 'kernels loop present(rv[:rc])'
	exe3a	,←'DO(i,n){',nl
	exe3a	,←((⊃⍺),⍺)((⊃⍺⍺)scmx ⍵⍵)'val' 'val' 'rv[rc-(2+i)]'
	exe3a	,←gid⊃(nl,pacc'update device(val)')''
	exe3a	,←'}',nl,gid⊃(pacc'exit data delete(val)')''
	exe3a	,←'zv[0]=val;',nl,pacc'update device(zv[:1])'
	exe3b	←nl,pacc gid⊃'update host(rv[:rn])' 'update host(rv[rn-1:1])'
	exe3b	,←(⊃git⊃⍺),'val=1&(rv[rn-1]>>(7-((rc-1)%8)));I n=rc-1;',nl
	exe3b	,←pacc gid⊃'enter data copyin(val)' 'kernels loop present(rv[:rn])'
	exe3b	,←'DO(i,n){I ri=rc-(2+i);I cr=1&(rv[ri/8]>>(7-(ri%8)));',nl
	exe3b	,←gid⊃(pacc'data copyin(cr)')''
	exe3b	,←((2⍴⊃⍺),1,2↓⍺)((⊃⍺⍺)scmx ⍵⍵)'val' 'val' 'cr'
	exe3b	,←gid⊃(nl,pacc'update device(val)')''
	exe3b	,←'}',nl,gid⊃(pacc'exit data delete(val)')''
	exe3b	,←'zv[0]=',('val;' 'val<<7;'⊃⍨3=⊃0⌷⍺),nl
	exe3b	,←pacc'update device(zv[:1])'
	exe	,←(2⊥(3=2↑⍺))⊃exe3a exe3b exe3a exe3b
	exe	,←'}else if(0==zc*rc){',nl
	exe	,←'}else{'
	exe4lp	←'kernels loop gang worker(32) present(zv[:zn],rv[:rn])'
	exe4a	←nl,pacc gid⊃'update host(rv[:rc])' exe4lp
	exe4a	,←'DO(i,zc){',(⊃git⊃⍺),'val=rv[(i*rc)+rc-1];L n=rc-1;',nl
	exe4a	,←pacc gid⊃'enter data copyin(val)' 'loop vector(32)'
	exe4a	,←'DO(j,n){',nl
	exe4a	,←((⊃⍺),⍺)((⊃⍺⍺)scmx ⍵⍵)'val' 'val' 'rv[(i*rc)+(rc-(2+j))]'
	exe4a	,←gid⊃(nl,pacc'update device(val)')''
	exe4a	,←'}',nl,gid⊃(pacc'exit data delete(val)')''
	exe4a	,←'zv[i]=val;}',nl, gid⊃(pacc'update device(zv[:zc])')''
	exe4b	←nl,(simd'present(zv[:zn])'),'DO(i,zn){zv[i]=0;};I n=rc-1;',nl
	exe4b	,←pacc gid⊃'update host(rv[:rn])' exe4lp
	exe4b	,←'DO(i,zc){I si=(i*rc)+rc-1;',nl
	exe4b	,←(⊃git⊃⍺),'val=1&(rv[si/8]>>(7-(si%8)));',nl
	exe4b	,←pacc gid⊃'enter data copyin(val)' 'loop vector(32)'
	exe4b	,←'DO(j,n){I ri=(i*rc)+(rc-(2+j));I cr=1&(rv[ri/8]>>(7-(ri%8)));',nl
	exe4b	,←((2⍴⊃⍺),1,2↓⍺)((⊃⍺⍺)scmx ⍵⍵)'val' 'val' 'cr'
	exe4b	,←gid⊃(nl,pacc'update device(val)')''
	exe4b	,←'}',nl,gid⊃(pacc'exit data delete(val)')''
	exe4b	,←(3=⊃0⌷⍺)⊃'zv[i]=val;' 'zv[i/8]|=val<<(7-(i%8));'
	exe4b	,←'}',nl,gid⊃(pacc'update device(zv[:zn])')''
	exe	,←(2⊥(3=2↑⍺))⊃exe4a exe4b exe4a exe4b
	exe	,←'}'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Reduce N-wise
redd←{	idf	←'+-×÷|⌊⌈*!∧∨<≤=>≥≠⊤∪/⌿\⍀⌽⊖'
	hid	←idf∊⍨⊃⊃⍺⍺ ⋄ a←0 1 1⊃¨⊂⍺
	idv	←⍕¨0 0 1 1 0 '1.7e308' '-1.7e308' 1 1 1 0 0 1 1 0 1 0 0 '-1' 1 1 1 1 0 0 ''
	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(5);',nl
	chk	,←'if(rr==0)error(4);',nl,hid⊃('if(lv[0]==0)error(11);',nl)''
	chk	,←'if((rs[rr-1]+1)<lv[0])error(5);rc=(1+rs[rr-1])-lv[0];'
	siz	←'zr=rr;I n=zr-1;DO(i,n){zc*=rs[i];zs[i]=rs[i];};zs[zr-1]=rc;lc=rs[rr-1];'
	exe	←pacc'update host(rv[:rgt->c],lv[:lft->c])'
	exe	,←'DO(i,zc){DO(j,rc){zv[(i*rc)+j]='
	exe	,←hid⊃'rv[(i*lc)+j+lv[0]-1];'(';',⍨idv⊃⍨idf⍳⊃⊃⍺⍺)
	val	←'zv[(i*rc)+j]' 'zv[(i*rc)+j]'('rv[(i*lc)+j+(lv[0]-(k+',(hid⌷'21'),'))]')
	exe	,←nl,' L n=lv[0]',(hid⊃'-1' ''),';DO(k,n){'
	exe	,←hid⊃(nl,pacc'update device(zv[(i*rc)+j:1])')''
	exe	,←(a((⊃⍺⍺)scmx ⍵⍵)val),'}}}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Reduce First Axis
rd1m←{	idf	←'+-×÷|⌊⌈*!∧∨<≤=>≥≠⊤∪/⌿\⍀⌽⊖'
	hid	←idf∊⍨⊃⊃⍺⍺
	idv	←⍕¨0 0 1 1 0 '1.7e308' '-1.7e308' 1 1 1 0 0 1 1 0 1 0 0 '-1' 1 1 1 1 0 0 ''
	chk	←hid⊃('if(rr>0&&rs[0]==0)error(11);')''
	siz	←'if(rr==0){zr=0;}',nl
	siz	,←'else{zr=rr-1;DO(i,zr){zc*=rs[i+1];zs[i]=rs[i+1];};rc=rs[0];}'
	exe	←pacc 'update host(rv[:rgt->c])'
	exe	,←'if(rc==1){DO(i,zc)zv[i]=rv[i];}',nl,'else '
	exe	,←hid⊃''('if(rc==0){DO(i,zc)zv[i]=',(';',⍨idv⊃⍨idf⍳⊃⊃⍺⍺),'}',nl,'else ')
	exe	,←'{DO(i,zc){zv[i]=rv[((rc-1)*zc)+i];',nl,' L n=rc-1;DO(j,n){'
	exe	,←((⊂⊃⍺⍺)∊0⌷⍉sdb)⊃(nl,pacc'update device(zv[i:1])')''
	exe	,←(((⊃⍺),⍺)((⊃⍺⍺)scmx ⍵⍵)'zv[i]' 'zv[i]' 'rv[(zc*(rc-(j+2)))+i]'),'}}}',nl
	exe	,←pacc 'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
rd1d←{	idf	←'+-×÷|⌊⌈*!∧∨<≤=>≥≠⊤∪/⌿\⍀⌽⊖'
	hid	←idf∊⍨⊃⊃⍺⍺
	a	←0 1 1⊃¨⊂⍺
	idv	←⍕¨0 0 1 1 0 '1.7e308' '-1.7e308' 1 1 1 0 0 1 1 0 1 0 0 '-1' 1 1 1 1 0 0 ''
	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(5);',nl
	chk	,←'if(rr==0)error(4);',nl,hid⊃('if(lv[0]==0)error(11);',nl)''
	chk	,←'if((rs[0]+1)<lv[0])error(5);rc=(1+rs[0])-lv[0];'
	siz	←'zr=rr;I n=zr-1;DO(i,n){zc*=rs[i+1];zs[i+1]=rs[i+1];};zs[0]=rc;'
	exe	←pacc'update host(rv[:rgt->c],lv[:lft->c])'
	exe	,←'DO(i,zc){DO(j,rc){zv[(j*zc)+i]='
	exe	,←hid⊃'rv[((j+lv[0]-1)*zc)+i];'(';',⍨idv⊃⍨idf⍳⊃⊃⍺⍺)
	val	←'zv[(j*zc)+i]' 'zv[(j*zc)+i]'('rv[((j+(lv[0]-(k+',(hid⌷'21'),')))*zc)+i]')
	exe	,←nl,' L n=lv[0]',(hid⊃'-1' ''),';DO(k,n){'
	exe	,←hid⊃(nl,pacc'update device(zv[(j*zc)+i:1])')''
	exe	,←(a((⊃⍺⍺)scmx ⍵⍵)val),'}}}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Scan
scnm←{	siz	←'zr=rr;rc=rr==0?1:rs[rr-1];DO(i,zr)zs[i]=rs[i];',nl
	siz	,←'I n=zr==0?0:zr-1;DO(i,n)zc*=rs[i];'
	val	←'zv[(i*rc)+j+1]' 'zv[(i*rc)+j]' 'rv[(i*rc)+j+1]'
	exe	←pacc'update host(zv[:rslt->c],rv[:rgt->c])'
	exe	,←'if(rc!=0){DO(i,zc){zv[i*rc]=rv[i*rc];',nl
	exe	,←' L n=rc-1;DO(j,n){'
	exe	,←((⊂⊃⍺⍺)∊0⌷⍉sdb)⊃(nl,pacc'update device(zv[(i*rc)+j:1])')''
	exe	,←(((⊃⍺),⍺)((⊃⍺⍺)scmx ⍵⍵)val),'}}}',nl
	exe	,←pacc'update device(zv[:rslt->c],rv[:rgt->c])'
		'' siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Scan First Axis
sc1m←{	siz	←'zr=rr;rc=rr==0?1:rs[0];DO(i,zr)zs[i]=rs[i];',nl
	siz	,←'I n=zr==0?0:zr-1;DO(i,n)zc*=rs[i+1];'
	exe	←pacc'update host(zv[:rslt->c],rv[:rgt->c])'
	exe	,←'if(rc!=0){DO(i,zc){zv[i]=rv[i];}',nl
	val	←'zv[((j+1)*zc)+i]' 'zv[(j*zc)+i]' 'rv[((j+1)*zc)+i]'
	exe	,←' DO(i,zc){L n=rc-1;DO(j,n){'
	exe	,←((⊂⊃⍺⍺)∊0⌷⍉sdb)⊃(nl,pacc'update device(zv[(j*zc)+i:1])')''
	exe	,←(((⊃⍺),⍺)((⊃⍺⍺)scmx ⍵⍵)val),'}}}',nl
	exe	,←pacc'update device(zv[:rslt->c],rv[:rgt->c])'
		'' siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Outer Product
oupd←{	siz	←'zr=lr+rr;DO(i,lr)zs[i]=ls[i];DO(i,rr)zs[i+lr]=rs[i];'
	scl	←(⊂⊃⍺⍺)∊0⌷⍉sdb
	cpu	←pacc'update host(lv[:lft->c],rv[:rgt->c])'
	gpu	←simd'present(rv[:rgt->c],lv[:lft->c])'
	exe	←'DO(i,lr)lc*=ls[i];DO(i,rr)rc*=rs[i];',nl
	exe	,←scl⊃cpu gpu
	exe	,←'DO(i,lc){DO(j,rc){',(⍺((⊃⍺⍺)scmx ⍵⍵)'zv[(i*rc)+j]' 'rv[j]' 'lv[i]'),'}}',nl
	exe	,←scl⊃(pacc'update device(zv[:rslt->c])')''
		'' siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Inner Product
inpd←{	idf	←'+-×÷|⌊⌈*!∧∨<≤=>≥≠⊤∪/⌿\⍀⌽⊖'
	hid	←idf∊⍨⊃0⊃⍺⍺
	idv	←⍕¨0 0 1 1 0 '1.7e308' '-1.7e308' 1 1 1 0 0 1 1 0 1 0 0 '-1' 1 1 1 1 0 0 ''
	chk	←'if(rr!=0&&lr!=0){',nl
	chk	,←'if(ls[lr-1]!=rs[0])error(5);',nl
	chk	,←(hid⊃('if(rs[0]==0)error(11);',nl)''),'}'
	siz	←'zr=0;if(lr>0){zr=lr-1;DO(i,zr)zs[i]=ls[i];}',nl
	siz	,←'if(rr>0){I n=rr-1;DO(i,n){zs[i+zr]=rs[i+1];}zr+=rr-1;}'
	typ	←2⌷(4 5⊥2↑1↓⍺)⌷⍉2⊃⍺⍺
	exe	←'I n=lr==0?0:lr-1;DO(i,n)zc*=ls[i];n=rr==0?0:rr-1;DO(i,n)rc*=rs[i+1];',nl
	exe	,←'if(lr!=0)lc=ls[lr-1];else if(rr!=0)lc=rs[0];',nl,(⊃git typ),'tmp[1];',nl
	exe	,←hid⊃(pacc'enter data create(tmp[:1])')''
	exe	,←'BOUND lz,rz;lz=lr==0?1:zc*lc;rz=rr==0?1:rc*lc;',nl
	exe	,←pacc'update host(lv[:lz],rv[:rz])'
	exe	,←hid⊃''('L m=zc*rc;DO(i,m){zv[i]=',(⍕idv⊃⍨idf⍳⊃0⊃⍺⍺),';}')
	stp rng	←hid⊃('2' 'lc-1')('1' 'lc')
	arg1	←'tmp[0]'('rv[(((lc-(j+',stp,'))*rc)+k)%rz]')('lv[((i*lc)+(lc-(j+',stp,')))%lz]')
	arg2	←'zv[(i*rc)+k]' 'zv[(i*rc)+k]' 'tmp[0]'
	fil	←'zv[(i*rc)+j]' 'rv[(((lc-1)*rc)+j)%rz]' 'lv[((i*lc)+(lc-1))%lz]'
	exe	,←'DO(i,zc){',hid⊃('DO(j,rc){',(⍺((1⊃⍺⍺)scmx ⍵⍵)fil),'}',nl)''
	exe	,←hid⊃(pacc'update device(zv[:rslt->c])')''
	exe	,←' L n=',rng,';DO(j,n){DO(k,rc){',nl
	exe	,←((typ,1↓⍺)((1⊃⍺⍺)scmx ⍵⍵)arg1),nl
	exe	,←hid⊃(pacc'update device(tmp[:1])')''
	exe	,←((typ,⍨2⍴1↑⍺)((0⊃⍺⍺)scmx ⍵⍵)arg2)
	exe	,←(hid⊃(pacc'update device(zv[(i*rc)+k:1])')''),'}}}',nl
	exe	,←hid⊃(pacc'exit data delete(tmp[:1])')''
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[cf]
⍝[of]:Mixed Functions
fdb←0 5⍴⊂'' ⋄ fcl←{cln ⍺(⍎⊃(((0⌷⍉⍵⍵)⍳⊂⍺⍺),¯1+≢⍵)⌷⍵⍵⍪fnc ⍺⍺)⍵}
fnc←{⍵('''',⍵,'''calm')('''',⍵,'''cald')'' ''}
⍝[c]
⍝[c]Prim	Monadic	Dyadic	Monadic Bool	Dyadic Bool
fdb⍪←,¨'⌷'	'{⎕SIGNAL 99}'	'idxd'	''	''
fdb⍪←,¨'['	'{⎕SIGNAL 99}'	'brid'	''	''
fdb⍪←,¨'⍳'	'iotm'	'{⎕SIGNAL 16}'	''	''
fdb⍪←,¨'⍴'	'shpm'	'shpd'	''	''
fdb⍪←,¨','	'catm'	'catd'	''	''
fdb⍪←,¨'⍪'	'fctm'	'fctd'	''	''
fdb⍪←,¨'⌽'	'rotm'	'rotd'	''	''
fdb⍪←,¨'⊖'	'rtfm'	'rtfd'	''	''
fdb⍪←,¨'∊'	'memm'	'memd'	''	''
fdb⍪←,¨'⊃'	'dscm'	'{⎕SIGNAL 16}'	''	''
fdb⍪←,¨'≡'	'eqvm'	'eqvd'	''	''
fdb⍪←,¨'≢'	'nqvm'	'nqvd'	''	''
fdb⍪←,¨'⊢'	'rgtm'	'rgtd'	''	''
fdb⍪←,¨'⊣'	'lftm'	'lftd'	''	''
fdb⍪←,¨'//'	'{⎕SIGNAL 99}'	'fltd'	''	''
fdb⍪←,¨'⍉'	'tspm'	'{⎕SIGNAL 16}'	''	''
fdb⍪←,¨'↓'	'{⎕SIGNAL 16}'	'drpd'	''	''
fdb⍪←,¨'↑'	'{⎕SIGNAL 16}'	'tked'	''	''
fdb⍪←,¨'⊤'	'{⎕SIGNAL 99}'	'encd'	''	''
fdb⍪←,¨'⊥'	'{⎕SIGNAL 99}'	'decd'	''	''
fdb⍪←,¨'⎕sp'	'{⎕SIGNAL 99}'	'sopid'	''	''

⍝[of]:Function Utilities
calm←{	z r	←var/⍵
	arr	←⍺⍺,((1⌷⍺)⊃'iifb'),'n(',z,',NULL,',r,',env);',nl
	scl	←'{A sz,sr;sz.v=NULL;ai(&sz,0,NULL,',(⍕⊃⍺),');',nl
	scl	,←'sr.r=0;sr.v=&',r,';sr.f=0;sr.c=1;sr.z=sizeof(',(1⊃git ⍺),');',nl
	scl	,←⍺⍺,((1⌷⍺)⊃'iifb'),'n(&sz,NULL,&sr,env);',nl
	scl	,←(⊃git ⍺),'*restrict szv=sz.v;',nl,pacc'update host(szv[:1])'
	scl	,←z,'=*szv;frea(&sz);}',nl
		(∧/¯1=,↑1⌷⍉⍵)⊃arr scl}
cald←{	z r l	←var/⍵
	arr	←⍺⍺,((¯2↑⍺)⊃¨⊂'iifb'),'(',z,',',l,',',r,',env);',nl
	scl	←'{A sz,sr,sl;sz.v=NULL;ai(&sz,0,NULL,',(⍕⊃⍺),');',nl
	scl	,←'sr.r=0;sr.f=0;sr.c=1;sr.v=&',r,';sr.z=sizeof(',(1⊃git ⍺),');',nl
	scl	,←'sl.r=0;sl.f=0;sl.c=1;sl.v=&',l,';sl.z=sizeof(',(2⊃git ⍺),');',nl
	scl	,←⍺⍺,((¯2↑⍺)⊃¨⊂'iifb'),'(&sz,&sl,&sr,env);',nl
	scl	,←(⊃git⍺),'*szv=sz.v;',nl,pacc'update host(szv[:1])'
	scl	,←z,'=*szv;frea(&sz);}',nl
		(∧/¯1=,↑1⌷⍉⍵)⊃arr scl}
mxfn←{	chk siz exe	←⍺
	al tp el	←⍵
	vr	←(∧/¯1=↑1⌷⍉el)+0≠(⊃0⍴⊃)¨0⌷⍉el
	tpl tpv tps	←(tp(/⍨)vr=⊢)¨⍳3
	nml nmv nms	←(('zrl'↑⍨≢el)/⍨vr=⊢)¨⍳3
	elv ell els	←1 0 2(⊢(/⍨)vr=⊣)¨(⊂(≢el)↑'rslt' 'rgt' 'lft'),2⍴⊂0⌷⍉el
	z	←'{B zc=1,rc=1,lc=1;',nl
	z	,←(⊃,/(⊂''),elv{'A *',⍺,'=',⍵,';'}¨var/(1=vr)⌿el),nl
	z	,←⊃,/(⊂''),nml{'I ',⍺,'r=',(⍕≢⍴⍵),';B ',⍺,'s[]={',(⍕≢⍵),'};'}¨ell
	z	,←⊃,/(⊂''),(git tpl),¨nml{⍺,'v[]={',(⊃{⍺,',',⍵}/⍕¨⍵),'};',nl}¨ell
	z	,←pacc'enter data copyin(',(⊃{⍺,',',⍵}/(⊂'zc'),{⍵,'v'}¨nml),')'
	z	,←(⊃,/(⊂''),(git tps),¨nms{'*s',⍺,'=&',⍵,';'}¨els),nl↑⍨≢els
	z	,←(⊃,/(⊂''),{'I ',⍵,'r=0;B*',⍵,'s=NULL;'}¨nms),nl↑⍨≢nms
	z	,←(⊃,/(⊂''),(git tps){⍺,⍵,'v[]={*s',⍵,'};'}¨nms),nl↑⍨≢nms
	iso	←(⊂⊃1⌷⍉el)∨.≡n2f 1↓1⌷⍉el
	z	,←iso⊃''('A*orz=rslt;A tz;tz.v=NULL;rslt=&tz;',nl)
	z	,←(0≡≢elv)⊃'' 'A tp;tp.v=NULL;A*rslt=&tp;'
	tpv nmv elv	,←(0≡≢elv)⊃(3⍴⊂⍬)((⊃tps)'z' 'rslt')
	z	,←((1↓tpv)((1↓nmv)decl)1↓elv),'I zr;B zs[15];',nl
	z	,←chk,(nl ''⊃⍨''≡chk),siz,nl
	alloc	←'ai(rslt,zr,zs,',(⍕⊃0⌷tp),');',nl
	alloc	,←(1↑tpv)((1↑nmv)declv)1↑elv
	z	,←(al⊃'' alloc),exe,((0≡≢elv)⊃'' '*sz=zv[0];'),nl
	z	,←pacc'exit data delete(',(⊃{⍺,',',⍵}/(⊂'zc'),{⍵,'v'}¨nml),')'
	z	,←iso⊃''('cpaa(orz,rslt);',nl)
	z	,←'}',nl
		z}
decl←{	z	←(⊃,/(⊂''),⍺⍺{'I ',⍺,'r=',⍵,'->r;'}¨⍵),nl
	z	,←(⊃,/(⊂''),⍺⍺{'B*restrict ',⍺,'s=',⍵,'->s;'}¨⍵),nl
	z	,←⍺(⍺⍺ declv) ⍵
		z}
declv	←{(⊃,/(⊂''),(git ⍺),¨⍺⍺{'*restrict ',⍺,'v=(',⍵,')->v;'}¨⍵),nl}

⍝[cf]
⍝[of]:Iota/Index Generation
iotm←{	chk	←'if(!(rr==0||(rr==1&&1==rs[0])))error(16);'
	siz	←'zr=1;zc=zs[0]=rv[0];'
	exe	←(simd 'present(zv[:zc])'),'DO(i,zs[0])zv[i]=i;'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Shape/Reshape
shpm←{	exe	←'DO(i,rr)zv[i]=rs[i];',nl,pacc'update device(zv[:rr])'
		'' 'zr=1;zs[0]=rr;' exe mxfn 1 ⍺ ⍵}
shpd←{	chk	←'if(lr==0){ls[0]=1;lr=1;}if(1!=lr)error(11);'
	siz	←'zr=ls[0];',nl
	siz	,←pacc'update host(lv[:zr])'
	siz	,←'DO(i,zr)zc*=zs[i]=lv[i];DO(i,rr)rc*=rs[i];'
	cpy	←'ai(rslt,zr,zs,',(⍕⊃0⌷⍺),');',nl
	cpy	,←(⊃0⌷⍺)((,'z')declv),⊂'rslt'
	cpy	,←'if(rc==0){',nl,(simd'present(zv)'),'DO(i,zc)zv[i]=0;}',nl
	cpy	,←'else{',nl,(simd'present(zv,rv)'),'DO(i,zc)zv[i]=rv[i%rc];}'
	ref	←'rslt->r=zr;DO(i,zr){rslt->s[i]=zs[i];};rslt->f=0;rslt->c=zc;',nl
	ref	,←'rslt->z=zc*sizeof(',(⊃git ⊃0⌷⍺),');rslt->v=rgt->v;',nl
	exe	←'if(zc<=rc){',nl,ref,'} else {',nl,cpy,nl,'}'
		chk siz (exe cpy⊃⍨0=⊃0⍴⊃⊃1 0⌷⍵) mxfn 0 ⍺ ⍵}
⍝[cf]
⍝[of]:Squad Indexing
idxd←{	chk	←'if(lr>1)error(4);if(lr==0)ls[0]=1;if(ls[0]>rr)error(5);'
	chk	,←'DO(i,lr)lc*=ls[i];DO(i,rr)rc*=rs[i];',nl
	chk	,←pacc'update host(lv[:lc])'
	chk	,←'DO(i,ls[0])if(lv[i]<0||lv[i]>=rs[i])error(3);'
	siz	←'zr=rr-ls[0];DO(i,zr)zs[i]=rs[ls[0]+i];'
	exe	←'B a,m,k=0;DO(i,zr)zc*=zs[i];m=zc;',nl
	exe	,←'DO(i,ls[0]){a=ls[0]-(i+1);k+=m*lv[a];m*=rs[a];}',nl
	exe	,←(simd'present(rv[:rc],zv[:zc])'),'DO(i,zc)zv[i]=rv[k+i];'
	∧/,1≥≡¨⍵:	chk siz exe mxfn 1 ⍺ ⍵
	sep	←{⊃⍺{⍺,⍺⍺,⍵}/⍵}
	ixv ixe	←2⌷⍵
	ixn	←{'idx[',(⍕⍵),']'}¨⍳≢ixv
	idx	←'{A *idx[]={',(','sep ixv var¨ixe),'};',nl
	idx	,←(⊃,/(⍳≢ixv){'I ir',(⍕⍺),'=',⍵,'->r;'}¨ixn),nl
	idx	,←(⊃,/(⍳≢ixv){'B*restrict is',(⍕⍺),'=',⍵,'->s;'}¨ixn),nl
	idx	,←(⊃,/(⍳≢ixv){'I*restrict iv',(⍕⍺),'=',⍵,'->v;'}¨ixn),nl
	idx	,←(⊃,/(⍳≢ixv){'B ic',(⍕⍺),'=',⍵,'->c;'}¨ixn),nl
	idx	,←'A irz;irz.v=NULL;A*irzp=&irz;',nl
	iso	←(0 1⌷⍵)∨.≡ixe
	idx	,←iso⊃('irzp=',(irzv←⊃var/0⌷⍵),';',nl)''
	siz	←'zr=',(⍕≢ixv),';',⊃,/{'zs[',(⍕⍵),']=ic',(⍕⍵),';'}¨⍳≢ixv
	gdx	←{'+'sep (↑∘⍺¨-⌽⍳≢⍺){'(',('*'sep(⊂⍵),⍺),')'}¨⍵}
	idi	←(≢ixv)↑'ijklmnopqrstuvw'
	zidx	←({'ic',(⍕⍵),''}¨⍳≢ixv)gdx idi
	ridx	←({'rs[',(⍕⍵),']'}¨⍳≢ixv)gdx(⍳≢ixv){'iv',(⍕⍺),'[',⍵,']'}¨idi
	stm	←'zv[',zidx,']=rv[',(ridx),'];',nl
	mklp	←{i s←⍺ ⋄ (⊂'DO(',i,',',s,'){',nl),(' ',¨⍵),(⊂'}')}
	pres	←'present(zv[:rslt->c],rv[:rgt->c],',(','sep{'iv',(⍕⍵),'[:ic',(⍕⍵),']'}¨⍳≢ixv),') '
	exe	←simd pres,'independent collapse(',(⍕≢ixv),')'
	exe	,←⊃,/⊃mklp/(idi{⍺('ic',⍕⍵)}¨⍳≢ixv),⊂⊂stm
	idx	,←'' siz exe mxfn 1(¯1↓⍺)('irzp'(¯2 0)⍪1↓¯1↓⍵)
	idx	,←(iso⊃''('cpaa(',irzv,',irzp);')),'}',nl
		idx}
⍝[cf]
⍝[of]:Bracket Indexing
brid←{	chk	←'if(lr!=1)error(16);DO(i,rr)rc*=rs[i];DO(i,lr)lc*=ls[i];',nl
	chkn	←pacc'update host(rv[:rc],lv[:lc])'
	chkn	,←'DO(i,rc)if(rv[i]<0||rv[i]>=ls[0])error(3);'
	chkb	←'I n=ceil(rc/8.0);',nl
	chkb	,←pacc'update host(rv[:n],lv[:lc])'
	chkb	,←'DO(i,n){DO(j,8){if((1&(rv[i]>>(7-j)))>=ls[0])error(3);}}'
	chk	,←(3≡1⊃⍺)⊃chkn chkb
	siz	←'zr=rr;DO(i,zr)zs[i]=rs[i];'
	exen	←(simd'present(zv[:rslt->c],lv[:lc],rv[:rc])'),'DO(i,rc)zv[i]=lv[rv[i]];'
	exeb	←(simd'present(zv[:rslt->c],lv[:lc],rv[:n])')
	exeb	,←'DO(i,n){DO(j,8){zv[i*8+j]=lv[1&(rv[i]>>(7-j))];}}'
	exe	←(3≡1⊃⍺)⊃exen exeb
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Left/Right
lftm←{	chk siz	←''('zr=rr;DO(i,rr)zs[i]=rs[i];')
	exe	←'DO(i,zr)zc*=zs[i];',nl,(simd'present(zv[:zc],rv[:zc])'),'DO(i,zc)zv[i]=rv[i];'
		chk siz exe mxfn 1 ⍺ ⍵}
rgtm←{	chk siz	←''('zr=rr;DO(i,rr)zs[i]=rs[i];')
	exe	←'DO(i,zr)zc*=zs[i];',nl,(simd'present(zv[:zc],rv[:zc])'),'DO(i,zc)zv[i]=rv[i];'
		chk siz exe mxfn 1 ⍺ ⍵}
lftd←{	chk siz	←''('zr=lr;DO(i,lr)zs[i]=ls[i];')
	exe	←'DO(i,zr)zc*=zs[i];',nl,(simd'present(zv[:zc],lv[:zc])'),'DO(i,zc)zv[i]=lv[i];'
		chk siz exe mxfn 1 ⍺ ⍵}
rgtd←{	chk siz	←''('zr=rr;DO(i,rr)zs[i]=rs[i];')
	exe	←'DO(i,zr)zc*=zs[i];',nl,(simd'present(zv[:zc],rv[:zc])'),'DO(i,zc)zv[i]=rv[i];'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Catenate/Ravel
catm←{	chk	←''
	siz	←'zr=1;DO(i,rr)rc*=rs[i];zs[0]=rc;'
	exe	←(simd'present(zv[:rslt->c],rv[:rc])'),'DO(i,rc)zv[i]=rv[i];'
		chk siz exe mxfn 1 ⍺ ⍵}
catd←{	chk	←'if(rr!=0&&lr!=0&&abs(rr-lr)>1)error(4);int minr=rr>lr?lr:rr;',nl
	chk	,←'int sr=rr==lr&&lr!=0?lr-1:minr;DO(i,sr)if(rs[i]!=ls[i])error(5);'
	siz	←'zs[0]=1;if(lr>rr){zr=lr;DO(i,lr)zs[i]=ls[i];}',nl
	siz	,←'else{zr=rr;DO(i,rr)zs[i]=rs[i];}',nl
	siz	,←'zr=zr==0?1:zr;zs[zr-1]+=minr==zr?ls[zr-1]:1;'
	exe	←'DO(i,zr)zc*=zs[i];DO(i,lr)lc*=ls[i];DO(i,rr)rc*=rs[i];',nl
	exe	,←'B li=0,ri=0,zm=zs[zr-1],lm=(lr<rr||lr==0)?1:ls[lr-1];',nl
	exe	,←'B lt=lft->c!=1,rt=rgt->c!=1;',nl
	exe	,←pacc'update host(lv[:lft->c],rv[:rgt->c])'
	exe	,←'DO(i,zc){zv[i]=(i%zm)<lm?lv[lt*(li++)]:rv[rt*(ri++)];}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Catenate First Axis/Table
fctm←{	siz	←'zr=2;if(rr==0){zs[0]=1;zs[1]=1;}else{zs[0]=rs[0];'
	siz	,←'I n=rr-1;DO(i,n)rc*=rs[i+1];zs[1]=rc;rc*=rs[0];}'
	exe	←(simd'present(zv[:rc],rv[:rc])'),'DO(i,rc)zv[i]=rv[i];'
		'' siz exe mxfn 1 ⍺ ⍵}
fctd←{	chk	←'if(rr!=0&&lr!=0&&abs(rr-lr)>1)error(4);int minr=rr>lr?lr:rr;',nl
	chk	,←'if(lr==rr&&rr>0){I n=rr-1;DO(i,n)if(rs[i+1]!=ls[i+1])error(5);}',nl
	chk	,←'else if(lr<rr){DO(i,lr)if(ls[i]!=rs[i+1])error(5);}',nl
	chk	,←'else{DO(i,rr)if(ls[i+1]!=rs[i])error(5);}'
	siz	←'zs[0]=1;if(lr>rr){zr=lr;DO(i,lr)zs[i]=ls[i];}',nl
	siz	,←'else{zr=rr;DO(i,rr)zs[i]=rs[i];}',nl
	siz	,←'zr=zr==0?1:zr;zs[0]+=minr==zr?ls[0]:1;'
	exe	←'DO(i,lr)lc*=ls[i];DO(i,rr)rc*=rs[i];',nl
	exe	,←'if(abs(lr-rr)<=1){',nl
	exe	,←(simd'present(zv[:lc],lv[:lc])'),' DO(i,lc)zv[i]=lv[i];',nl
	exe	,←(simd'present(zv[lc:rc],rv[:rc])'),'DO(i,rc)zv[lc+i]=rv[i];',nl
	exe	,←'}else{I n=zr-1;DO(i,n)zc*=zs[i+1];',nl,' if(lr==0){',nl
	exe	,←(simd'present(zv[:zc],lv[:1])'),'DO(i,zc)zv[i]=lv[0];',nl
	exe	,←(simd'present(zv[zc:rc],rv[:rc])'),' DO(i,rc)zv[zc+i]=rv[i];}',nl
	exe	,←' else{',nl,(simd'present(zv[:lc],lv[:lc])'),'DO(i,lc)zv[i]=lv[i];',nl
	exe	,←(simd'present(zv[lc:zc],rv[:1])'),'DO(i,zc)zv[lc+i]=rv[0];}}'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Reverse/Rotate
rotm←{	siz	←'zr=rr;DO(i,zr)zs[i]=rs[i];'
	exe	←'I n=zr==0?0:zr-1;DO(i,n)zc*=zs[i];rc=rr==0?1:rs[rr-1];lc=zc*rc;',nl
	exen	←simd 'independent collapse(2) present(rv[:lc],zv[:lc])'
	exen	,←'DO(i,zc){DO(j,rc){zv[i*rc+j]=rv[i*rc+(rc-(j+1))];}}'
	exeb	←'I zcp=ceil(lc/8.0);',nl
	exeb	,←simd'present(zv[:zcp])'
	exeb	,←'DO(i,zcp){zv[i]=0;}',nl
	exeb	,←simd'collapse(2) present(zv[:zcp],rv[:zcp])'
	exeb	,←'DO(i,zc){DO(j,rc){I zi=i*rc+j;I ri=i*rc+(rc-(j+1));',nl
	exeb	,←' zv[zi/8]|=(1&(rv[ri/8]>>(7-(ri%8))))<<(7-(zi%8));',nl
	exeb	,←'}}'
	exe	,←(3=⊃0⌷⍺)⊃exen exeb
		''('zr=rr;DO(i,zr)zs[i]=rs[i];')exe mxfn 1 ⍺ ⍵}
rotd←{	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(16);'
	siz	←'zr=rr;DO(i,zr)zs[i]=rs[i];'
	exe	←'zc=rr==0?1:rs[rr-1];I n=rr==0?0:rr-1;DO(i,n)rc*=rs[i];',nl
	exe	,←'DO(i,lr)lc*=ls[i];I s=(lv[0]<0)?abs(lv[0]):zc-lv[0];',nl
	exen	←simd'collapse(2) present(zv[:rslt->c],rv[:rslt->c],lv[:lc])'
	exen	,←'DO(i,rc){DO(j,zc){zv[i*zc+((j+s)%zc)]=rv[(i*zc)+j];}}'
	exeb	←'I zcp=ceil(rslt->c/8.0);',nl
	exeb	,←simd'present(zv[:zcp])'
	exeb	,←'DO(i,zcp){zv[i]=0;}',nl
	exeb	,←simd'collapse(2) present(zv[:zcp],rv[:zcp],lv[:lc])'
	exeb	,←'DO(i,rc){DO(j,zc){',nl
	exeb	,←' I zi=i*zc+((j+s)%zc);',nl
	exeb	,←' I ri=(i*zc)+j;',nl
	exeb	,←' zv[zi/8]|=(1&(rv[ri/8]>>(7-(ri%8))))<<(7-(zi%8));',nl
	exeb	,←'}}'
	exe	,←(3=⊃0⌷⍺)⊃exen exeb
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Member/Enlist
memm←{	siz	←'DO(i,rr)rc*=rs[i];zr=1;zs[0]=rc;'
	exe	←(simd'present(rv[:rc],zv[:rslt->c])'),'DO(i,rc)zv[i]=rv[i];'
		'' siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Disclose/Pick/First
dscm←{	exe	←pacc'update host(rv[:rgt->c])'
	exe	,←'DO(i,rr)rc*=rs[i];zv[0]=rc==0?0:rv[0];',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		'' 'zr=0;' exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Rotate First Axis/Reverse First Axis
rtfm←{	exe	←'I n=zr==0?0:zr-1;DO(i,n)zc*=zs[i+1];rc=rr==0?1:rs[0];',nl
	exe	,←simd 'collapse(2) independent present(rv[:rc*zc],zv[:rc*zc])'
	exe	,←'DO(i,rc){DO(j,zc){zv[i*zc+j]=rv[(rc-(i+1))*zc+j];}}'
		''('zr=rr;DO(i,zr)zs[i]=rs[i];')exe mxfn 1 ⍺ ⍵}
rtfd←{	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(16);'
	siz	←'zr=rr;DO(i,zr)zs[i]=rs[i];'
	exe	←'zc=rr==0?1:rs[0];I n=rr==0?0:rr-1;DO(i,n)rc*=rs[i+1];',nl
	exe	,←'DO(i,lr)lc*=ls[i];',nl
	exe	,←simd'collapse(2) present(zv[:rslt->c],rv[:rslt->c],lv[:lc])'
	exe	,←'DO(i,zc){DO(j,rc){zv[(((i-lv[0])%zc)*rc)+j]=rv[(i*rc)+j];}}'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Equivalent/Match/Depth
eqvm←{	exe	←'zv[0]=rr==0?0:1;',nl,pacc'update device(zv[:1])'
		'' 'zr=0;' exe mxfn 1 ⍺ ⍵}
eqvd←{	chk siz	←'' 'zr=0;'
	exe	←pacc 'update host(lv[:lft->c],rv[:rgt->c])'
	exe	,←'zv[0]=1;if(rr!=lr)zv[0]=0;',nl
	exe	,←'DO(i,lr){if(!zv[0])break;if(rs[i]!=ls[i]){zv[0]=0;break;}}',nl
	exe	,←'DO(i,lr)lc*=ls[i];',nl
	exe	,←'DO(i,lc){if(!zv[0])break;if(lv[i]!=rv[i]){zv[0]=0;break;}}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Not Match/Disequivalent/Tally
nqvm←{	exe	←'zv[0]=rr==0?1:rs[0];',nl,pacc'update device(zv[:1])'
		'' 'zr=0;' exe mxfn 1 ⍺ ⍵}
nqvd←{	chk siz	←'' 'zr=0;'
	exe	←pacc'update host(lv[:lft->c],rv[:rgt->c])'
	exe	,←'zv[0]=0;if(rr!=lr)zv[0]=1;',nl
	exe	,←'DO(i,lr){if(zv[0])break;if(rs[i]!=ls[i]){zv[0]=1;break;}}',nl
	exe	,←'DO(i,lr)lc*=ls[i];',nl
	exe	,←'DO(i,lc){if(zv[0])break;if(lv[i]!=rv[i]){zv[0]=1;break;}}',nl
	exe	,←pacc'update device(zv[:rslt->c])'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Replicate/Filter
fltd←{	chk	←'if(lr>1)error(4);',nl
	chk	,←'if(lr!=0&&ls[0]!=1&&rr!=0&&rs[rr-1]!=1&&ls[0]!=rs[rr-1])error(5);'
	popcnt	←'__builtin_popcount' '_popcnt32' '__popcnt'
	pcnt	←popcnt⊃⍨'gc' 'ic' 'pg'⍳⊂2↑COMPILER
	siz	←'zr=rr==0?1:rr;I n=zr-1;DO(i,n)zs[i]=rs[i];',nl
	siz	,←'if(lr==1)lc=ls[0];if(rr!=0)rc=rs[rr-1];zs[zr-1]=0;B last=0;',nl
	szn	←siz,pacc 'update host(lv[:lc],rv[:rgt->c])'
	szn	,←'if(lc>=rc){DO(i,lc)last+=abs(lv[i]);}else{last+=rc*abs(lv[0]);}',nl
	szn	,←'zs[zr-1]=last;DO(i,n)zc*=zs[i];'
	szb	←siz,pacc 'update host(lv[:lft->z],rv[:rgt->c])'
	szb	,←'if(lc>=rc){I n=ceil(lc/32.0);I*lv32=(I*)lv;',nl
	szb	,←'DO(i,n)last+=',pcnt,'(lv32[i]);',nl
	szb	,←'}else{last+=rc*(lv[0]>>7);}',nl
	szb	,←'zs[zr-1]=last;DO(i,n)zc*=zs[i];'
	exe	←'B a=0;if(rc==lc){',nl,'DO(i,lc){',nl
	exe	,←' if(lv[i]==0)continue;',nl
	exe	,←' else if(lv[i]>0){',nl
	exe	,←'  DO(j,zc){DO(k,lv[i]){zv[(j*zs[zr-1])+a+k]=rv[(j*rc)+i];}}',nl
	exe	,←'  a+=lv[i];',nl
	exe	,←' }else{',nl
	exe	,←'  DO(j,zc){L n=abs(lv[i]);DO(k,n){zv[(j*zs[zr-1])+a+k]=0;}}',nl
	exe	,←'  a+=abs(lv[i]);}}}',nl
	exe	,←'else if(rc>lc){',nl
	exe	,←' if(lv[0]>0){'
	exe	,←'DO(i,zc){DO(j,rc){DO(k,lv[0]){zv[(i*zs[zr-1])+a++]=rv[(i*rc)+j];}}}}',nl
	exe	,←' else if(lv[0]<0){L n=zc*zs[zr-1];DO(i,n)zv[i]=0;}}',nl
	exe	,←'else{DO(i,lc){',nl
	exe	,←' if(lv[i]==0)continue;',nl
	exe	,←' else if(lv[i]>0){',nl
	exe	,←'  DO(j,zc){DO(k,lv[i]){zv[(j*zs[zr-1])+a+k]=rv[j*rc];}}',nl
	exe	,←'  a+=lv[i];',nl
	exe	,←' }else{',nl
	exe	,←'  DO(j,zc){L n=abs(lv[i]);DO(k,n){zv[(j*zs[zr-1])+a+k]=0;}}',nl
	exe	,←'  a+=abs(lv[i]);}}}',nl
	exe	,←pacc 'update device(zv[:rslt->c])'
	exb	←'B a=0;if(rr==1&&rc==lc){I n=ceil(lc/8.0);;',nl
	exb	,←' DO(i,n){DO(j,8){if(1&(lv[i]>>(7-j)))zv[a++]=rv[i*8+j];}}',nl
	exb	,←'}else if(rc==lc){I n=ceil(lc/8.0);',nl,'DO(i,n){DO(m,8){',nl
	exb	,←' if(1&(lv[i]>>(7-m))){',nl
	exb	,←'  DO(j,zc){zv[(j*zs[zr-1])+a]=rv[(j*rc)+i*8+m];}',nl
	exb	,←'  a++;}}}',nl
	exb	,←'}else if(rc>lc){if(lv[0]>>7){',nl
	exb	,←'  DO(i,zc){DO(j,rc){zv[(i*zs[zr-1])+a++]=rv[(i*rc)+j];}}}',nl
	exb	,←'}else{I n=ceil(lc/8.0);DO(i,n){DO(m,8){',nl
	exb	,←' if(1&(lv[i]>>(7-m))){',nl
	exb	,←'  DO(j,zc){zv[(j*zs[zr-1])+a]=rv[j*rc];}',nl
	exb	,←'  a++;}}}}',nl
	exb	,←pacc 'update device(zv[:rslt->c])'
		((3≡2⊃⍺)⊃(chk szn exe)(chk szb exb)) mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[of]:Decode/Encode
decd←{	chk	←'if(lr>1||lv[0]<0)error(16);'
	siz	←'zr=rr==0?0:rr-1;DO(i,zr){zs[i]=rs[i+1];zc*=rs[i+1];}',nl
	siz	,←'if(rr>0)rc=rs[0];'
	exen	←pacc'update host(lv,rv[:rgt->c])'
	exen	,←'DO(i,zc){zv[i]=0;DO(j,rc){zv[i]=rv[(j*zc)+i]+lv[0]*zv[i];}}',nl
	exen	,←pacc'update device(zv[:rslt->c])'
	exeb	←'I rcp=ceil(rgt->c/8.0);',nl
	exeb	,←pacc'update host(lv,rv[:rcp])'
	exeb	,←'DO(i,zc){zv[i]=0;DO(j,rc){I ri=(j*zc)+i;',nl
	exeb	,←'zv[i]=(1&(rv[ri/8]>>(7-(ri%8))))+lv[0]*zv[i];}}',nl
	exeb	,←pacc'update device(zv[:rslt->c])'
	exe	←(3=⊃1⌷⍺)⊃exen exeb
		chk siz exe mxfn 1 ⍺ ⍵}
encd←{	chk	←'if(lr>1)error(16);DO(i,lr)lc*=ls[i];',nl
	chk	,←pacc'update host(lv[:lc])'
	chk	,←'DO(i,lc){if(lv[i]<=0)error(16);}'
	siz	←'zr=1+rr;zs[0]=lc;DO(i,rr)zs[i+1]=rs[i];DO(i,rr)rc*=rs[i];'
	exe	←simd'collapse(2) present(zv[:rslt->c],rv[:rc],lv[:lc])'
	exe	,←'DO(i,rc){DO(j,lc){zv[(j*rc)+i]=(rv[i]>>(lc-(j+1)))%2;}}'
		chk siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[l]:Definition for sopid:codfns.dyalog?s=^sopid←
⍝[of]:Take/Drop
drpd←{	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(16);'
	siz	←pacc'update host(lv[:1])'
	siz	,←'zr=rr;DO(i,zr)zs[i]=rs[i];zs[0]-=(zs[0]==0?0:lv[0]);',nl
	siz	,←'I n=zr-1;DO(i,n)zc*=zs[i+1];lc=lv[0];'
	cpy	←'ai(rslt,zr,zs,',(⍕⊃0⌷⍺),');',nl
	cpy	,←(⊃0⌷⍺)((,'z')declv),⊂'rslt'
	cpyn	←simd'independent collapse(2) present(zv[:rslt->c],rv[:rgt->c])'
	cpyn	,←'DO(i,zs[0]){DO(j,zc){zv[(i*zc)+j]=rv[((i+lc)*zc)+j];}}'
	cpyb	←'I zcp=ceil(rslt->c/8.0);I rcp=ceil(rgt->c/8.0);',nl
	cpyb	,←'I sti=(lc*zc)/8;I stp=(lc*zc)%8;n=(zcp==0?0:zcp-1);',nl
	cpyb	,←simd'independent present(zv[:zcp],rv[:rcp])'
	cpyb	,←'DO(i,n){U8 x=rv[i+sti]<<stp;',nl
	cpyb	,←'x|=rv[i+1+sti]>>(8-stp);zv[i]=x;}',nl
	cpyb	,←'if(zcp){',nl,(pacc'update host(rv[n+sti:1])')
	cpyb	,←'zv[n]=rv[n+sti]<<stp;',nl,(pacc'update device(zv[n:1])'),'}'
	cpy	,←(3=⊃0⌷⍺)⊃cpyn cpyb
	ref	←'rslt->r=zr;DO(i,zr){rslt->s[i]=zs[i];};rslt->f=0;',nl
	ref	,←'rslt->c=zs[0]*zc;rslt->z=rslt->c*sizeof(',(⊃git ⊃0⌷⍺),');',nl
	ref	,←'rslt->v=rv+(lc*zc);'
	exe	←ref cpy⊃⍨1⌊(3=⊃0⌷⍺)+0=⊃0⍴⊃⊃1 0⌷⍵
		chk siz exe mxfn 0 ⍺ ⍵}
tked←{	chk	←'if(lr!=0&&(lr!=1||ls[0]!=1))error(16);'
	siz	←pacc'update host(lv[:1])'
	siz	,←'zr=rr;DO(i,zr)zs[i]=rs[i];',nl
	siz	,←'zs[0]=lv[0];I n=zr-1;DO(i,n)zc*=zs[i+1];'
	cpy	←'ai(rslt,zr,zs,',(⍕⊃0⌷⍺),');',nl
	cpy	,←(⊃0⌷⍺)((,'z')declv),⊂'rslt'
	cpy	,←simd'independent collapse(2) present(zv[:rslt->c],rv[:rgt->c])'
	cpy	,←'DO(i,zs[0]){DO(j,zc){zv[(i*zc)+j]=rv[(i*zc)+j];}}'
	ref	←'rslt->r=zr;DO(i,zr){rslt->s[i]=zs[i];};rslt->f=0;',nl
	ref	,←'rslt->c=zs[0]*zc;rslt->z=rslt->c*sizeof(',(⊃git ⊃0⌷⍺),');',nl
	ref	,←'rslt->v=rv;'
	exe	←ref cpy⊃⍨0=⊃0⍴⊃⊃1 0⌷⍵
		chk siz exe mxfn 0 ⍺ ⍵}
⍝[cf]
⍝[of]:Transpose
tspm←{	siz	←'zr=rr;DO(i,rr)zs[rr-(1+i)]=rs[i];'
	exe	←simd'independent collapse(2) present(zv[:rslt->c],rv[:rgt->c])'
	exe	,←'DO(i,rs[0]){DO(j,rs[1]){zv[(j*zs[1])+i]=rv[(i*rs[1])+j];}}'
		'' siz exe mxfn 1 ⍺ ⍵}
⍝[cf]
⍝[cf]
⍝[of]:Horrible Hacks
sopid←{	siz	←'zr=(lr-1)+rr;zs[0]=ls[0];DO(i,zr-1)zs[i+1]=rs[i];'
	exe	←'zc=zs[0];rc=rs[0];lc=ls[rr-1];',nl
	exe	,←'B szz=rslt->c,szr=rgt->c,szl=ceil(lft->c/8.0);',nl
	exe	,←simd'independent collapse(3) present(zv[:szz],rv[:szr],lv[:szl])'
	exe	,←'DO(i,zc){DO(j,rc){DO(k,lc){I li=(i*lc)+k;',nl
	exe	,←'zv[(i*rc*lc)+(j*lc)+k]=(1&(lv[li/8]>>(7-(li%8))))*rv[(j*lc)+k];',nl
	exe	,←'}}}'
		'' siz exe mxfn 1 ⍺ ⍵}

 ⍝ Lamination
  catdo←{0≡⊃0⍴⊂⊃⊃1 0⌷⍵:⍺ catdr ⍵ ⋄ 0≡⊃0⍴⊂⊃⊃2 0⌷⍵:⍺ catdl ⍵ ⋄ ⍺ catdv ⍵}

  catdv←{z←'{',(⊃,/'rslt' 'rgt' 'lft'{'A*',⍺,'=',⍵,';'}¨var/⍵),nl
   z,←'B s[]={rgt->s[0],2};'
   z,←'A*orz;A tp;tp.v=NULL;int tpused=0;',nl
   z,←'if(rslt==lft||rslt==rgt){orz=rslt;rslt=&tp;tpused=1;}',nl
   z,←'ai(rslt,2,s,',(⍕⊃0⌷⍺),');',nl
   z,←(⊃,/(git ⍺){⍺,'*restrict ',⍵,';'}¨'zrl'),nl
   z,←⊃,/'zrl'{⍺,'=',⍵,'->v;',nl}¨'rslt' 'rgt' 'lft'
   z,←(simd'present(z,l,r)'),'DO(i,s[0]){z[i*2]=l[i];z[i*2+1]=r[i];}'
   z,←'if(tpused){cpaa(orz,rslt);}',nl
   z,'}',nl}
⍝[cf]
⍝[of]:Runtime Header
⍝[of]:Includes, Structures, Allocation
rth	←'#include <math.h>',nl,'#include <stdio.h>',nl,'#include <string.h>',nl
rth	,←'#ifdef _OPENACC',nl
rth	,←'#include <accelmath.h>',nl,'extern unsigned int __popcnt (unsigned int);',nl
rth	,←'#endif',nl
rth	,←'#include <dwa.h>',nl,'#include <dwa_fns.h>',nl
rth	,←'int isinit=0;',nl
rth	,←'#define PI 3.14159265358979323846',nl,'typedef BOUND B;'
rth	,←'typedef long long int L;typedef aplint32 I;typedef double D;typedef void V;',nl
rth	,←'typedef unsigned char U8;',nl
rth	,←'struct array {I r; B s[15];I f;B c;B z;V*v;};',nl,'typedef struct array A;',nl
rth	,←'#define DO(i,n) for(L i=0;i<(n);i++)',nl,'#define R return',nl
rth	,←'V EXPORT frea(A*a){if (a->v!=NULL){char*v=a->v;B z=a->z;',nl
rth	,←' if(a->f){',nl,'#ifdef _OPENACC',nl
rth	,←'#pragma acc exit data delete(v[:z])',nl,'#endif',nl,'}',nl
rth	,←' if(a->f>1){free(v);}}}',nl
rth	,←'V aa(A*a,I tp){frea(a);B c=1;DO(i,a->r)c*=a->s[i];B z=0;',nl
rth	,←' B pc=8*ceil(c/8.0);',nl
rth	,←' switch(tp){',nl
rth	,←'  case 1:z=sizeof(I)*pc;break;',nl
rth	,←'  case 2:z=sizeof(D)*pc;break;',nl
rth	,←'  case 3:z=ceil((sizeof(U8)*pc)/8.0);break;',nl
rth	,←'  default: error(16);}',nl
rth	,←' z=4*ceil(z/4.0);char*v=malloc(z);if(NULL==v)error(1);',nl
rth	,←' #ifdef _OPENACC',nl,'  #pragma acc enter data create(v[:z])',nl,' #endif',nl
rth	,←' a->v=v;a->z=z;a->c=c;a->f=2;}',nl
rth	,←'V ai(A*a,I r,B *s,I tp){a->r=r;DO(i,r)a->s[i]=s[i];aa(a,tp);}',nl
rth	,←'V fe(A*e,I c){DO(i,c){frea(&e[i]);}}',nl
⍝[cf]
⍝[of]:Co-dfns/Dyalog Conversion
rth	,←'V cpad(LOCALP*d,A*a,I t){getarray(t,a->r,a->s,d);B z=0;',nl
rth	,←' switch(t){',nl,'  case APLLONG:z=a->c*sizeof(I);break;',nl
rth	,←'  case APLDOUB:z=a->c*sizeof(D);break;',nl
rth	,←'  case APLBOOL:z=ceil(a->c/8.0)*sizeof(U8);break;',nl
rth	,←'  default:error(11);}',nl
rth	,←' #ifdef _OPENACC',nl,'  char *v=a->v;',nl
rth	,←'  #pragma acc update host(v[:z])',nl,' #endif',nl
rth	,←' memcpy(ARRAYSTART(d->p),a->v,z);}',nl
rth	,←'V cpda(A*a,LOCALP*d){if(TYPESIMPLE!=d->p->TYPE)error(16);frea(a);',nl
rth	,←' I r=a->r=d->p->RANK;B c=1;DO(i,r){c*=a->s[i]=d->p->SHAPETC[i];};a->c=c;',nl
rth	,←' switch(d->p->ELTYPE){',nl
rth	,←'  case APLLONG:a->z=c*sizeof(I);a->f=1;a->v=ARRAYSTART(d->p);break;',nl
rth	,←'  case APLDOUB:a->z=c*sizeof(D);a->f=1;a->v=ARRAYSTART(d->p);break;',nl
rth	,←'  case APLINTG:a->z=c*sizeof(I);a->f=2;',nl
rth	,←'   a->v=malloc(a->z);if(a->v==NULL)error(1);',nl
rth	,←'   {aplint16 *restrict s=ARRAYSTART(d->p);I *restrict t=a->v;',nl
rth	,←'   DO(i,c)t[i]=s[i];};break;',nl
rth	,←'  case APLSINT:a->z=c*sizeof(I);a->f=2;',nl
rth	,←'   a->v=malloc(a->z);if(a->v==NULL)error(1);',nl
rth	,←'   {aplint8 *restrict s=ARRAYSTART(d->p);I *restrict t=a->v;',nl
rth	,←'   DO(i,c)t[i]=s[i];};break;',nl
rth	,←'  case APLBOOL:a->z=ceil(c/8.0)*sizeof(U8);a->f=1;',nl
rth	,←'   a->v=ARRAYSTART(d->p);break;',nl
rth	,←'  default:error(16);}',nl
rth	,←' #ifdef _OPENACC',nl,' char *vc=a->v;B z=a->z;',nl
rth	,←' #pragma acc enter data pcopyin(vc[:z])',nl,' #endif',nl,'}',nl
rth	,←'V cpaa(A*t,A*s){frea(t);memcpy(t,s,sizeof(A));}',nl
⍝[cf]
⍝[of]:External Makers, Extractors
rth	,←'EXPORT V*mkarray(LOCALP*da){A*aa=malloc(sizeof(A));if(aa==NULL)error(1);',nl
rth	,←' aa->v=NULL;cpda(aa,da);return aa;}',nl
rth	,←'V EXPORT exarray(LOCALP*da,A*aa,I at){I tp=0;',nl
rth	,←' switch(at){',nl
rth	,←'  case 1:tp=APLLONG;break;',nl
rth	,←'  case 2:tp=APLDOUB;break;',nl
rth	,←'  case 3:tp=APLBOOL;break;',nl
rth	,←'  default:error(11);}',nl
rth	,←' cpad(da,aa,tp);frea(aa);}',nl
⍝[cf]
⍝[of]:Scalar Helpers
rth	,←'#ifdef _OPENACC',nl,'#pragma acc routine seq',nl,'#endif',nl
rth	,←'D gcd(D an,D bn){D a=fabs(an);D b=fabs(bn);',nl
rth	,←' for(;b>1e-10;){D n=fmod(a,b);a=b;b=n;};R a;}',nl
rth	,←'#ifdef _OPENACC',nl,'#pragma acc routine seq',nl,'#endif',nl
rth	,←'D lcm(D a,D b){D n=a*b;D z=fabs(n)/gcd(a,b);',nl
rth	,←' if(a==0&&b==0)R 0;if(n<0)R -1*z;R z;}',nl
⍝[cf]
⍝[cf]
⍝[cf]
@
\end{document}
