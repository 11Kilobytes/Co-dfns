#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

#define UNICODE
#define _UNICODE

#ifdef _WIN32
 #define EXPORT __declspec(dllexport)
 #ifdef BUILD_CODFNS
	#define DECLSPEC EXPORT
 #else
	#define DECLSPEC __declspec(dllimport)
 #endif
#elif defined(__GNUC__)
 #define EXPORT __attribute__ ((visibility ("default")))
 #ifdef BUILD_CODFNS
	#define DECLSPEC EXPORT
 #else
	#define DECLSPEC extern __attribute__ ((visibility ("default")))
 #endif
#else
 #define EXPORT
 #define DECLSPEC
#endif

enum cell_type {
	CELL_VOID,
	CELL_VOID_BOX,
	CELL_ARRAY, 
	CELL_ARRAY_BOX,
	CELL_FUNC,
	CELL_FUNC_BOX,
	CELL_MOPER,
	CELL_MOPER_BOX,
	CELL_DOPER,
	CELL_DOPER_BOX,
	CELL_ENV_BOX,
	CELL_MAX
};

enum array_type {
	ARR_SPAN,
	ARR_BOOL, 
	ARR_SINT, 
	ARR_INT, 
	ARR_DBL, 
	ARR_CMPX,
	ARR_CHAR8, 
	ARR_CHAR16, 
	ARR_CHAR32,
	ARR_MIXED, 
	ARR_NESTED,
	ARR_MAX
};

enum array_storage {
	STG_HOST, STG_DEVICE, STG_MAX
};

struct cell_func;
struct cell_array;

typedef int (*func_mon)(struct cell_array **,
    struct cell_array *, struct cell_func *);

typedef int (*func_dya)(struct cell_array **,
    struct cell_array *, struct cell_array *, struct cell_func *);
    
typedef int (*topfn_ptr)(struct cell_array **, 
    struct cell_array *, struct cell_array *);

struct cell_void {
	enum cell_type ctyp;
	unsigned int refc;
};

struct apl_cmpx {
	double real;
	double imag;
};

struct cell_array {
	enum cell_type ctyp;
	unsigned int refc;
	enum array_storage storage;
	enum array_type type;
	void *values;
	unsigned int *vrefc;
	unsigned int rank;
	size_t shape[];
};

struct cell_func {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_mon;
	func_dya fptr_dya;
	void **opts;
	void **fv;
	unsigned int fs;
	void *fv_[];
};

struct cell_moper {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_am;
	func_dya fptr_ad;
	func_mon fptr_fm;
	func_dya fptr_fd;
	unsigned int fs;
	void *fv[];
};

struct cell_doper {
	enum cell_type ctyp;
	unsigned int refc;
	func_mon fptr_aam;
	func_dya fptr_aad;
	func_mon fptr_afm;
	func_dya fptr_afd;
	func_mon fptr_fam;
	func_dya fptr_fad;
	func_mon fptr_ffm;
	func_dya fptr_ffd;
	unsigned int fs;
	void *fv[];
};

#define DECL_BOX_STRUCT(type)		\
struct cell_##type##_box {		\
	enum cell_type ctyp;		\
	unsigned int refc;		\
	struct cell_##type *value;	\
};

DECL_BOX_STRUCT(void);
DECL_BOX_STRUCT(array);
DECL_BOX_STRUCT(func);
DECL_BOX_STRUCT(moper);
DECL_BOX_STRUCT(doper);

/* Error Handling */
DECLSPEC struct cell_array *get_debug_info(void);
DECLSPEC void release_debug_info(void);
DECLSPEC void debug_trace(int, const char *, int, const char *, const char *);

#define CHK(expr, fail, msg)					\
if (0 < (err = (expr))) {					\
	debug_trace(err, __FILE__, __LINE__, __func__, msg);	\
	goto fail;						\
}								\

#define CHKFN(expr, fail) CHK(expr, fail, "" #expr)
#define CHKIG(expr, fail) if (0 < (err = (expr))) goto fail;

#define TRC(expr, msg)						\
if (0 < (err = (expr))) {					\
	debug_trace(err, __FILE__, __LINE__, __func__, msg);	\
}								\

/* DWA and Interface */
DECLSPEC int set_dwafns(void *);
DECLSPEC int call_dwa(topfn_ptr, void *, void *, void *, char *);

/* Generic cell handlers */
DECLSPEC void release_cell(void *);
DECLSPEC void *retain_cell(void *);

/* Basic VOID type */
DECLSPEC int mk_void(struct cell_void **);
DECLSPEC void release_void(struct cell_void *);
DECLSPEC int mk_void_box(struct cell_void_box **, struct cell_void *);
DECLSPEC void release_void_box(struct cell_void_box *);

/* ARRAY type */
DECLSPEC int mk_array(struct cell_array **, 
    enum array_type, enum array_storage, unsigned int);
DECLSPEC int release_array(struct cell_array *);
DECLSPEC int mk_array_box(struct cell_array_box **, struct cell_array *);
DECLSPEC void release_array_box(struct cell_array_box *);
DECLSPEC int alloc_array(struct cell_array *);
DECLSPEC int fill_array(struct cell_array *, void *);
DECLSPEC int chk_array_valid(struct cell_array *);
DECLSPEC int squeeze_array(struct cell_array *);

/* FUNC types */
DECLSPEC int mk_func_box(struct cell_func_box **, struct cell_func *);
DECLSPEC void release_func_box(struct cell_func_box *);
DECLSPEC int mk_func(struct cell_func **, func_mon, func_dya, unsigned int);
DECLSPEC void release_func(struct cell_func *);
DECLSPEC void release_env(void **, void **);
DECLSPEC int mk_moper(struct cell_moper **, 
    func_mon, func_dya, func_mon, func_dya,
    unsigned int);
DECLSPEC int mk_doper(struct cell_doper **, 
    func_mon, func_dya, func_mon, func_dya,
    func_mon, func_dya, func_mon, func_dya,
    unsigned int);
DECLSPEC void release_moper(struct cell_moper *);
DECLSPEC void release_doper(struct cell_doper *);
DECLSPEC int mk_moper_box(struct cell_moper_box **, struct cell_moper *);
DECLSPEC void release_moper_box(struct cell_moper_box *);
DECLSPEC int mk_doper_box(struct cell_doper_box **, struct cell_doper *);
DECLSPEC void release_doper_box(struct cell_doper_box *);
DECLSPEC int derive_func_opts(struct cell_func **, struct cell_func *, int);

/* Calling helpers */
DECLSPEC int mk_nested_array(void ***, size_t count);
DECLSPEC int var_ref(void ***, void *);
DECLSPEC void bind_value(void ***, void **);
DECLSPEC int mk_closure_func(void ***, func_mon, func_dya, unsigned int, void **);
DECLSPEC int mk_closure_moper(void ***, func_mon, func_dya, func_mon, func_dya, 
    unsigned int, void **);
DECLSPEC int mk_closure_doper(void ***, func_mon, func_dya, func_mon, func_dya, 
    func_mon, func_dya, func_mon, func_dya, unsigned int, void **);
DECLSPEC int apply_monadic(void ***);
DECLSPEC int apply_dyadic(void ***);
DECLSPEC int apply_assign(void ***, struct cell_array_box *);
DECLSPEC int apply_mop(struct cell_func **, struct cell_moper *, 
    func_mon, func_dya, void *);
DECLSPEC int apply_mop_a(void ***);
DECLSPEC int apply_mop_f(void ***);
DECLSPEC int apply_dop(struct cell_func **, struct cell_doper *, 
    func_mon, func_dya, void *, void *);
DECLSPEC int apply_dop_aa(void ***);
DECLSPEC int apply_dop_af(void ***);
DECLSPEC int apply_dop_fa(void ***);
DECLSPEC int apply_dop_ff(void ***);
DECLSPEC int apply_variant(void ***);
DECLSPEC int guard_check(void ***);

/* Runtime initialization function */
DECLSPEC int cdf_prim_init(void);
