{
  "name": "Co-dfns",
  "tagline": "High-performance, Reliable, and Parallel APL",
  "body": "﻿# Co-dfns Compiler\r\n\r\nThe Co-dfns project aims to provide a high-performance, high-reliability\r\ncompiler for a parallel extension of the Dyalog dfns programming language.\r\nThe dfns language is a functionally oriented, lexically scoped dialect of\r\nAPL. The Co-dfns language extends the dfns language to include explicit task\r\nparallelism with implicit structures for synchronization and determinism. The\r\nlanguage is designed to enable rigorous formal analysis of programs to aid\r\nin compiler optimization and programmer productivity, as well as in the\r\ngeneral reliability of the code itself.\r\n\r\nOur mission is to deliver scalable APL programming to information and domain\r\nexperts across many fields, expanding the scope and capabilities of what\r\nyou can effectively accomplish with APL.\r\n\r\n## Using the Compiler\r\n\r\nThe compiler is designed around a simple public interface that can be \r\ndirectly and simply used to replace or enhance traditional funtionality. \r\n\r\n### codfns.Fix\r\n\r\n    Namespace ← Name codfns.Fix Namspace_Script\r\n\r\nThis is the primary interface into the compiler. It serves as a drop-in \r\nreplacement for the ⎕FIX function. The `Name` should be some name that \r\nwill serve as a prefix identifier for extra files that the compiler \r\nneeds to generate in the build directory to create the namespace. It \r\nwill compile the namespace and return the accessible functions as a \r\nDyalog Namespace object.\r\n\r\n### codfns.Cmp\r\n\r\n    Exports ← Name codfns.Cmp Namespace_Script\r\n\r\nThis is used as a part of fixing, and allows you to run the compiler without \r\nbuilding the namespace object. It will return a list of the exports of \r\nthe namespace.\r\n\r\n### codfns.MkNS\r\n\r\n    Namespace ← Name codfns.MkNS Exports\r\n\r\nThis will take a list of exports and the compiler prefix name and fix a \r\nDyalog namespace object with functions coming from the compiled code given \r\nby `Name`. \r\n\r\n### codfns.Xml\r\n\r\n    String ← codfns.Xml AST\r\n\r\nIf you need to see the AST of the compiler, or work with it, this function \r\nallows you to serialize your code in the form of XML, rather than as a \r\nNamespace Script. It does require that you use either the parser or \r\nyour own hacking skills to extract out a Co-dfns AST. \r\n\r\n### codfns.BSO\r\n\r\n    Path ← codfns.BSO Name\r\n\r\nGiven the `Name` used as the left argument to `Fix`, it will give back the \r\npath to the primary Co-dfns compilation object. This is useful for doing \r\nmanual linking into the compilation object using `⎕NA`.\r\n\r\n### codfns.MKA\r\n\r\n    Codfns_Array ← Name codfns.MKA Array\r\n\r\nThis allows you to manually obtain a pointer to a Co-dfns array created from \r\na given Dyalog DWA Array. \r\n\r\n### codfns.EXA\r\n\r\n    Array ← Name codfns.EXA Codfns_Array Type\r\n\r\nUsed to extract an array from Co-dfns. It will take a pointer to a Co-dfns \r\narray and the type of that array, and will free the array from the Co-dfns \r\nspace and return that array as its result in the form of a normal Dyalog \r\narray.\r\n\r\n### codfns.FREA\r\n\r\n    {} ← Name codfns.FREA Codfns_Array\r\n\r\nFrees a Co-dfns array pointer obtained from `MKA`. \r\n\r\n## Configuration\r\n\r\nThere are a few global settings that should be examined or set based on your \r\nlocal environment. The values given below are their default values.\r\n\r\n### COMPILER\r\n\r\n    COMPILER ← 'vsc'\r\n\r\nThis indicates the backend compiler to use. It should be one of the following \r\nnames:\r\n\r\n    Windows: vsc pgi icl\r\n    Linux: gcc icc pgcc\r\n\r\n### TEST∆COMPILERS\r\n\r\n    TEST∆COMPILERS ← ⊂'vsc'\r\n\r\nA vector of the backend compilers to test when running the test suite. See \r\n`COMPILERS` for valid options.\r\n\r\n### BUILD∆PATH\r\n\r\n    BUILD∆PATH ← 'build'\r\n\r\nThe path relative to your working directory where the compiler will store its \r\nintermediate files and the compiled objects. Should be a directory. \r\n\r\n### VISUAL∆STUDIO∆PATH\r\n\r\n    VISUAL∆STUDIO∆PATH ←'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\'\r\n\r\nThe path to your Visual Studio installation. Make sure that you have installed \r\nthe C++ compiler. \r\n\r\n### INTEL∆C∆PATH\r\n\r\n    INTEL∆C∆PATH ← 'C:\\Program Files (x86)\\IntelSWTools\\'\r\n    INTEL∆C∆PATH ,← 'compilers_and_libraries_2016.0.110\\windows\\bin\\'\r\n\r\nThe location of your `bin` directory for the Intel C Compiler. Needed to use \r\nIntel's C compiler on Windows. \r\n\r\n### PGI∆PATH\r\n\r\n    PGI∆PATH ← 'C:\\Program Files\\PGI\\win64\\16.7\\'\r\n\r\nThe path to your PGI installation on Windows. Needed if you wish to use PGI \r\non Windows. You must have the OpenACC version of PGI. \r\n\r\n### VERSION\r\n\r\n    Major Minor Patch ← VERSION\r\n\r\nThis is not designed to be set by the user, but indicates the version of the \r\ncompiler. Version numbers are only valid as releases, and are subject to change \r\nduring development in the repository. \r\n\r\n## System Requirements\r\n\r\nThe Co-dfns compiler is fairly self-contained. You will need the following \r\nsoftware in order to use the compiler:\r\n\r\n1. Dyalog APL 15.0 or later 64-bit Unicode edition\r\n\r\n2. A supported compiler\r\n\r\n    * PGI Accelerator 16.7+ (Preferred, Linux and Windows)\r\n    * Visual Studio 2015 (Windows)\r\n    * GCC (Linux)\r\n    * Intel C Compiler (Linux or Windows)\r\n\r\n3. LibreSSL\r\n\r\nYou will need to make sure that the LibreSSL libraries are visible\r\nand accessible to the compiler. For Windows this usually means putting \r\nthem in the directory where you are running/compiling your code. \r\nFor Linux, we generally expect them in /usr/local/lib64 or any other \r\nstandard location. \r\n\r\n## Contributing and Helping\r\n\r\nWe need your help! There are many ways to assist with the Co-dfns project. \r\nHere are some ways that you can do it.\r\n\r\n### Support the Project\r\n\r\nWe are seeking to create an open funding model for Co-dfns research through \r\nthe use of Gratipay. You can support the project by contributing code, feedback, \r\nbenchmarks, and otherwise becoming a member of the team, but you can also \r\ndirectly support the Co-dfns team by funding us on Gratipay:\r\n\r\nhttps://www.gratipay.com/Co-dfns/\r\n\r\n### Joining the Co-dfns Team\r\n\r\nWe are an open development team dedicated to free research, but we are also \r\nfunded by other sources as well. We encourage people to get involved in various \r\nways. Here are a few of the best ways to get working on the project:\r\n\r\n1. Download, install, and run the compiler on your code.\r\n\r\n2. Report bugs and issues in the GitHub Issue Tracker.\r\n\r\n3. Contribute code, tests, and benchmarks through pull requests to the main \r\n   repository. \r\n\r\n4. Discuss Co-dfns on various social media sites. \r\n\r\n5. Spread the word and evangalize the Co-dfns approach to computing!\r\n\r\nThis project is heavily focused on producing quality code, and as such, we \r\nhave strong guidelines about how to code in the project. We are happy to assist \r\nwith this, and it may help to read the publications listed in this document. \r\n\r\nFurthermore, we explicitly avoid too much non-code documentation that isn't \r\nhuman-to-human direct communication. Instead, we tend to focus on executable \r\ncontracts and documentation through the use of our testing suite. We also have \r\na growing Benchmarks suite here:\r\n\r\nhttps://github.com/arcfide/Co-dfns-benchmarks\r\n\r\nPlease contact arcfide@sacrideo.us (Aaron W. Hsu) for more information on the \r\nbest ways to contribute and to get involved in the project. \r\n\r\nNote: All pull requests and contributions to this project imply an acceptance \r\nof the dual licensing nature of the Co-dfns project. Part of this is the \r\ncopyright assignment and details laid out in the LICENSE.txt file. Furthermore, \r\nDyalog, Ltd. is a contributing partner in this project, and receives exclusive \r\nrights to non-AGPL licensing options of the Co-dfns compiler. To facilitate \r\nthis all contributions are assumed to be copyright transferred to Aaron Hsu.\r\n\r\n## Publications\r\n\r\n[The Key to a Data Parallel Compiler](http://dl.acm.org/citation.cfm?id=2935331)\r\n\r\n[Accelerating Information Experts Through Compiler Design](http://dl.acm.org/citation.cfm?id=2774968)\r\n\r\n[Co-dfns: Ancient Language, Modern Compiler](http://dl.acm.org/citation.cfm?id=2627384)\r\n\r\n[U11: Using Co-dfns to Accelerate APL Code](http://dyalog.com/user-meetings/dyalog15.htm)\r\n\r\n[U07: Co-dfns Report: Performance and Reliability Prototyping](http://dyalog.com/user-meetings/dyalog14.htm)\r\n\r\n[I04: Co-dfns Compiler](http://dyalog.com/user-meetings/dyalog13.htm)\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}