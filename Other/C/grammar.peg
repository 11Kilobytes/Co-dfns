Module <- OWSONL Global+ OWSONL 
	{ parse_module(ctx->pool, ctx->stack); }

Global <- Variable OWS "←" OWS Function 
	{ parse_global(ctx->pool, ctx->stack, GLOBAL_FUNC); }

Function <- "{" OWSONL Statements OWSONL "}"
	{ parse_function(ctx->pool, ctx->stack); }

Statements <- { parse_barrier(ctx->pool, ctx->stack); }
	(Assignment OWSNL)* Value

Variable <- <[a-zA-Z_] [a-zA-Z0-9_]*> 
	{ parse_variable(ctx->pool, ctx->stack, yytext, yyleng); }

Value <- Application
	{ parse_expression(ctx->pool, ctx->stack, EXPR_APP); }
	/ SingleValue

Expression <- Assignment
	/ Application 
	{ parse_expression(ctx->pool, ctx->stack, EXPR_APP); }
	/ SingleValue

Assignment <- Variable OWS "←" OWS Expression
	{ parse_assignment(ctx->pool, ctx->stack); }

Application <- SingleValue OWS Primitive OWS Expression
	{ parse_application(ctx->pool, ctx->stack); }

SingleValue <- IntegerArray
	{ parse_expression(ctx->pool, ctx->stack, EXPR_LIT); }
	/ Variable
	{ parse_expression(ctx->pool, ctx->stack, EXPR_VAR); }
	/ "(" OWS Expression OWS ")" 

Primitive <-
	<("-" / "+" / "<" / "≤" / "=" / "≥" / ">" / "≠" 
	/ "∨" / "∧" / "×" / "÷" / "?" / "∊" / "⍴" / "~" / "↑" 
	/ "↓" / "⍳" / "○" / "*" / "⌈" / "⌊" / "∇" / "⍎" / "⍕" 
	/ "⊢" / "⊂" / "⊃" / "∩" / "∪" / "⊥" / "⊤" / "|" / "⍀" 
	/ "⌿" / "⍒" / "⍋" / "⌽" / "⍉" / "⊖" / "⍟" / "⍱" / "⍲" 
	/ "!" / "⌹" / "⍷" / "⍸" / "⌷" / "≡" / "≢" / "⍪" / "/" 
	/ "," / "\\" / "⊣" / "^")>
	{ parse_primitive(ctx->pool, ctx->stack, yytext, yyleng); }


IntegerArray <- { parse_barrier(ctx->pool, ctx->stack); }
	Integer (WS Integer)* 
	{ parse_intarray(ctx->pool, ctx->stack); }

Integer <- <[0-9]+> { parse_int(ctx->pool, ctx->stack, yytext, yyleng); }

OWS <- WS ?
OWSONL <- (WS / NL)*
OWSNL <- OWS NL OWSONL
WS <- (" " / "\t" )+
NL <- "\r" ? "\n"
