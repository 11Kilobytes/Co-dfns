respos←'fmod((double)⍵,(double)⍺)'
resneg←'⍵-⍺*floor(((double)⍵)/(double)(⍺+(0==⍺)))'
residue←'(0<=⍺&&0<=⍵)?',respos,':',resneg
dnv←{(0≡z)⊃('LOCALP ',⍺,'[',(⍕z←⊃v⍵),'];')('LOCALP*',⍺,'=NULL;')}
reg←{(⊃v⍵)do'regp(&',⍺,'[i]);'}
cutp←'cutp(&env0[0]);'
frt←'void static inline ' ⋄ fre←'void EXPORT '
flp←'(LOCALP*z,LOCALP*l,LOCALP*r,LOCALP*penv[])'
elp←'(LOCALP*z,LOCALP*l,LOCALP*r)'
foi←'if(!isinit){Init(NULL,NULL,NULL,NULL);isinit=1;}',nl
fnv←{'LOCALP*env[]={',(⊃,/(⊂'env0'),{',penv[',(⍕⍵),']'}¨⍳⊃s ⍵),'};',nl}
smcd←{'copyin(',(⊃{⍺,',',⍵}/{'d',(⍕⍵),'[0:mz',(⍕⍵),']'}¨⍳≢⍵),')'}
smcr←{'copyout(',(⊃{⍺,',',⍵}/{'r',(⍕⍵),'[0:cnt]'}¨⍳≢⍵),')'}
simc←{(smcd(⊃v⍵)fvs(⊃e⍵)),' ',(smcr⊃n⍵),nl}
prag←{('#pragma acc parallel loop ',simc ⍵)('#pragma simd',nl)('')}
simd←{('pgi' 'icc'⍳⊂COMPILER)⊃prag ⍵}
slp←{(simd ⍵),(for'cnt'),nl,⊃,/(git 1⌷⍉(⊃v⍵)fvs(⊃y⍵))sip¨⍳≢(⊃v⍵)fvs(⊃e⍵)}
⍝ Scalar Primitives
sdb←0 3⍴⊂'' ⋄ scl←{cln ((≢⍵)↑,¨'⍵⍺')⎕R(⍕¨⍵) ⊃⍺⌷⍨((⊂⍺⍺)⍳⍨0⌷⍉⍺),≢⍵}
⍝      Prim  Monadic            Dyadic
⍝ ────────────────────────────────────────────────────────────────
sdb⍪←,¨'+'   '⍵'                '⍺+⍵'
sdb⍪←,¨'-'   '-1*⍵'             '⍺-⍵'
sdb⍪←,¨'×'   '(⍵>0)-(⍵<0)'      '⍺*⍵'
sdb⍪←,¨'÷'   '1.0/⍵'            '((double)⍺)/((double)⍵)'
sdb⍪←,¨'*'   'exp((double)⍵)'   'pow((double)⍺,(double)⍵)'
sdb⍪←,¨'⍟'   'log((double)⍵)'   'log((double)⍵)/log((double)⍺)'
sdb⍪←,¨'|'   'fabs(⍵)'          residue
sdb⍪←,¨'○'   'PI*⍵'             'error(16)'
sdb⍪←,¨'⌊'   'floor((double)⍵)' '⍺ < ⍵ ? ⍺ : ⍵'
sdb⍪←,¨'⌈'   'ceil((double)⍵)'  '⍺ > ⍵ ? ⍺ : ⍵'
sdb⍪←,¨'<'   'error(99)'        '⍺<⍵'
sdb⍪←,¨'≤'   'error(99)'        '⍺<=⍵'
sdb⍪←,¨'='   'error(99)'        '⍺==⍵'
sdb⍪←,¨'≥'   'error(99)'        '⍺>=⍵'
sdb⍪←,¨'>'   'error(99)'        '⍺>⍵'
sdb⍪←,¨'≠'   'error(99)'        '⍺!=⍵'
sdb⍪←,¨'~'   '0==⍵'             'error(16)'
sdb⍪←,¨'∧'   'error(99)'        '⍺ && ⍵'
sdb⍪←,¨'∨'   'error(99)'        '⍺ || ⍵'
sdb⍪←,¨'⍲'   'error(99)'        '!(⍺ && ⍵)'
sdb⍪←,¨'⍱'   'error(99)'        '!(⍺ || ⍵)'
sdb⍪←,¨'⌷'   '⍵'                'error(99)'
