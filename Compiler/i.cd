var←{(,'⍺')≡⍺:,'l' ⋄ (,'⍵')≡⍺:,'r' ⋄ ¯1=⊃⍵:,⍺ ⋄ '&env[',(⍕⊃⍵),'][',(⍕⊃⌽⍵),']'}
nl←⎕UCS 13 10
for←{'for(i=0;i<',(⍕⍵),';i++){'}
do←{'{BOUND i,_n=',(⍕⍺),';',(for'_n'),⍵,'}}',nl}
pdo←{p←((⊂COMPILER)∊'icc' 'icl' 'pgi')⊃''('#pragma simd',nl)
 '{BOUND i;',nl,p,(for ⍺),⍵,'}}',nl}
tl←{('di'⍳⍵)⊃¨⊂('APLDOUB' 'double')('APLLONG' 'aplint32')}
enc←⊂⊣,∘⊃((⊣,'_',⊢)/(⊂''),(⍕¨(0≠⊢)(/∘⊢)⊢))
fvs←,⍤0(⌿⍨)0≠(≢∘⍴¨⊣)
cln←'¯'⎕R'-'
rth ←'#include <math.h>',nl,'#include <dwa.h>',nl,'#include <dwa_fns.h>',nl
rth,←'#include <stdio.h>',nl
rth,←'int isinit=0;',nl
rth,←'#define PI 3.14159265358979323846',nl
dnv←{(0≡z)⊃('LOCALP ',⍺,'[',(⍕z←⊃v⍵),'];')('LOCALP*',⍺,'=NULL;')}
reg←{(⊃v⍵)do'regp(&',⍺,'[i]);'}
cutp←'cutp(&env0[0]);'
frt←'static void ' ⋄ fre←'void EXPORT '
flp←'(LOCALP*z,LOCALP*l,LOCALP*r,LOCALP*penv[])'
elp←'(LOCALP*z,LOCALP*l,LOCALP*r)'
foi←'if(!isinit){Init(NULL,NULL,NULL,NULL);isinit=1;}',nl
fnv←{'LOCALP*env[]={',(⊃,/(⊂'env0'),{',penv[',(⍕⍵),']'}¨⍳⊃s ⍵),'};',nl}
smcd←{'copyin(',(⊃{⍺,',',⍵}/{'d',(⍕⍵),'[0:mz',(⍕⍵),']'}¨⍳≢⍵),')'}
smcr←{'copyout(',(⊃{⍺,',',⍵}/{'r',(⍕⍵),'[0:cnt]'}¨⍳≢⍵),')'}
simc←{(smcd(⊃v⍵)fvs(⊃e⍵)),' ',(smcr⊃n⍵),nl}
prag←{('#pragma acc parallel loop ',simc ⍵)('#pragma simd',nl)('#pragma simd',nl)('')}
simd←{('pgi' 'icc' 'icl'⍳⊂COMPILER)⊃prag ⍵}
slp←{(simd ⍵),(for'cnt'),nl,⊃,/(git 1⌷⍉(⊃v⍵)fvs(⊃y⍵))sip¨⍳≢(⊃v⍵)fvs(⊃e⍵)}
