<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Software Boundaries</title>
  <para>
    There are two primary sources of user input. The user will
    first call the compiler with a given program to compile, which represents
    the first external input. Secondly, the compiled namespace that is
    created as a result will be called repeatedly and used as its own thing.
    This represents the second potential input to the system. These are
    distinct because the input given to the second, and the behavior that
    is appropriate to it is entirely dependent on the input that is given
    as the program input. Thus, it is impossible to speak directly about
    the kinds of inputs and their responses for the second types of input,
    except very broadly. Instead, the semantics are encoded in the first
    input, and as long as the semantics are preserved in the compiler,
    then it will work as intended.
  </para>
  <para>
    Thus, the main sources of input that will be considered are
    the programs that are given, rather than on the inputs that will be
    given to the programs described or compiled. This may or may not accurately
    reflect how the code is used in practice. Indeed, we normally expected
    to compile a program once and then run it multiple times. However,
    most of the more useful information comes from the program input, rather
    than the input to the compiled program.
  </para>
  <para>
    Finally, the code produced must interact with the DWA interface of the 
    Dyalog Interpreter, which is the primary interface to the user. 
  </para>
  <xi:include href="tables/Summary_of_External_Entities.xml"></xi:include>
  <para>
    However, the software itself, as complex as it is, requires a decomposition 
    of the primary compiler into a set of components that are each specified 
    individually. Each component is in charge of a specific task, transforming 
    the input it receives into either the output of the compiler or another 
    set of stimuli suitable for the next component to receive. In this case 
    we have the following compiler passes for specification.
  </para>
  <xi:include href="tables/Summary_of_Passes.xml" />
</section>
