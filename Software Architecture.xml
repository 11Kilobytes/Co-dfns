<?xml version="1.0" encoding="utf-8" ?>

<article xmlns="http://docbook.org/ns/docbook" version="5.0">
  <info>
    <author>Aaron W. Hsu</author>
    <date>Monday, October 7th, 2013</date>
  </info>
  <section>
    <title>Co-Dfns Software Architecture</title>
    <simpara>
      This document describes the high-level system architecture of the 
      Co-Dfns compiler at the module and top levels. This includes the 
      high-level design of passes and their box-based specifications, the 
      programming approach used to develop each of the passes and the 
      methodology of handling state-box specifications.
    </simpara>
    <simpara>
      The methodology for handling the state-based specifications are 
      different and differ from the practices found in normal box-structure 
      methods. This is because the overal design favors a pure-functional 
      approach, or one that is externally functional for any given level 
      of abstraction. This necessitates no change in the clear or black 
      box specifications, but requires a different approach for state-based 
      structured specification and design. The <citetitle>Cleanroom Engineering Guide</citetitle>
      documents this new approach for those who wish to understand it in more 
      detail as it is understood within the scope of this project.
    </simpara>
    <simpara>
      After reading this document, the approach, design, and structure of the compiler 
      should be evident, and it should be possible to navigate source files without 
      difficulty or to understand the reasoning behind the creation of certain essential 
      functions or how they fit together. The dependencies, orderings, and relationships 
      between functions and elements should be clear, as should be the expectations and 
      implied elements not clearly documented in the source code itself. Developers who 
      wish to understand the source code should rely heavily on this document as the 
      main document that guides the structure and implementation of the compiler. 
    </simpara>
    <section>
      <title>Asset Analysis</title>
      <simpara>
        The <citetitle>Software Development Plan</citetitle> identifies four to five 
        major influences on the Software architecture: LLVM, MiniKanren, Nanopass, and 
        prototypes implemented in C, C++, and Dyalog APL. MiniKanren is a specific implementation 
        suggestion for a specific component of the compiler, and as such plays a less 
        significant role in the Software Architecture. The other components, however, play 
        a very significant role in the design of the software, and this section documents 
        the analysis of these elements as they relate to the design of the system. There 
        is a sub-section dedicated to each of these assets as well as specific sections to 
        deal with analysis of the <citetitle>Function Specification</citetitle> and other 
        miscellaneous assets.
      </simpara>
      <section>
        <title>Analysis: Nanopass</title>
      </section>
      <section>
        <title>Analysis: LLVM</title>
      </section>
      <section>
        <title>Analysis: Parsing Prototypes</title>
      </section>
      <section>
        <title>Analysis: Runtime Prototypes</title>
      </section>
      <section>
        <title>Analysis: Performance Benchmarks</title>
      </section>
      <section>
        <title>Analysis: Function Specification</title>
      </section>
      <section>
        <title>Analysis: Language Reference</title>
      </section>
      <section>
        <title>Analysis: Miscellaneous Observations</title>
      </section>
    </section>
    <section>
      <title>Software Strategy</title>
    </section>
    <section>
      <title>Top-level Structure</title>
      <section>
        <title>AST Definition</title>
      </section>
      <section>
        <title>Pass Overview</title>
      </section>
      <section>
        <title>Pass Specifications</title>
      </section>
    </section>
  </section>
</article>