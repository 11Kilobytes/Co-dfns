PS←{
	IN←⍵

	err←'PARSER EXPECTS SCALAR OR VECTOR INPUT'
	1<≢⍴IN:err ⎕SIGNAL 11

	err←'PARSER EXPECTS SIMPLE OR VECTOR OF VECTOR INPUT'
	2<|≡IN:err ⎕SIGNAL 11

	IN←∊(⊆IN),¨⎕UCS 10

	err←'PARSER EXPECTS CHARACTER ARRAY'
	0≠10|⎕DR IN:err ⎕SIGNAL 11
	
	CR LF←⎕UCS 13 10
	linestarts←(⍸1⍪2>⌿IN∊CR LF)⍪≢IN
	mkdm←{⍺←2 ⋄ line←linestarts⍸⍵ ⋄ no←'[',(⍕1+line),'] '
		i←(~IN[i]∊CR LF)⌿i←beg+⍳linestarts[line+1]-beg←linestarts[line]
		(⎕EM ⍺)(no,IN[i])(' ^'[i∊⍵],⍨' '⍴⍨≢no)}
	quotelines←{
		lines←∪linestarts⍸⍵
		nos←(1 0⍴⍨2×≢lines)⍀'[',(⍕⍪1+lines),⍤1⊢'] '
		beg←linestarts[lines] ⋄ end←linestarts[lines+1]
		m←∊∘⍵¨i←beg+⍳¨end-beg
		¯1↓∊nos,(~∘CR LF¨⍪,(IN∘I¨i),⍪' ▔'∘I¨m),CR}
	SIGNAL←{⍺←2 '' ⋄ en msg←⍺ ⋄ EN∘←en ⋄ DM∘←en mkdm ⊃⍵
		dmx←('EN' en)('Category' 'Compiler')('Vendor' 'Co-dfns')
		dmx,←⊂'Message'(msg,CR,quotelines ⍵)
		⎕SIGNAL⊂dmx}

	⍝ Group input into lines as a nested vector
	pos←(⍳≢IN)⊆⍨~IN∊CR LF

	msk←(''''''∘⍷¨x)∨≠⍀¨''''=x←IN∘I¨pos
	pos msk⌿¨⍨←⊂∧⍀¨(~msk)⍲'⍝'=IN∘I¨pos
	0≠≢lin←⍸⊃∘⌽¨msk:{
		EM←'UNBALANCED STRING',('S'⌿⍨2≤≢lin),CR
		2 EM SIGNAL ∊(msk⌿¨pos)[lin]
	}⍬
	t←⊃0⍴⊂pos
	t pos msk(∊,∘⍪⍨)←Z (⊃¨pos) 0
	end←1+pos
	t[i←⍸2<⌿0⍪msk]←C
	end[i]←end[⍸2>⌿msk⍪0]
	t pos end⌿⍨←⊂(t≠0)∨~¯1⌽msk
	t[⍸'⋄'=IN[pos]]←Z
	WS←⎕UCS 9 32
	alp←'ABCDEFGHIJKLMNOPQRSTUVWXYZ_
	alp,←'abcdefghijklmnopqrstuvwxyz'
	alp,←'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝß
	alp,←'àáâãäåæçèéêëìíîïðñòóôõöøùúûüþ'
	alp,←'∆⍙ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ'
	num←⎕D
	syna←'⍬⎕⍞#'
	synb←'¯[]{}()'':⍺⍵⋄;'
	prmfs←'+-×÷|⌈⌊*⍟○!?~∧∨⍲⍱<≤=>≥≠
	prmfs,←'≡≢⍴,⍪⌽⊖⍉↑↓⊂⊆⊃∊⍷∩∪⍳⍸⌷⍋⍒⍎⍕⊥⊤⊣⊢⌹∇←→'
	prmmo←'¨⍨&⌶⌸'
	prmdo←'∘.⍣⍠⌺⍤⍥@'
	prmfo←'/⌿\⍀'
	prms←prmfs,prmmo,prmdo,prmfo
	t pos end⌿⍨←⊂~(t=0)∧(¯1⌽IN[pos])∊WS
	msk←⊃1 ¯1∧.((alp,num,'¯⍺⍵⎕.')∊⍨⌽)⊂x←IN[pos]
	t pos end⌿⍨←⊂msk∨(t≠0)∨~x∊WS
	∨⌿msk←~IN[pos]∊alp,num,syna,synb,prms,WS:{
		EM←'SYNTAX ERROR: INVALID CHARACTER(S) IN SOURCE',CR
		EM,←quotelines ⍸msk
		EM ⎕SIGNAL 2
	}⍬

	x←IN[pos]
	dm←x∊num
	dm∨←('.'=x)∧(¯1⌽dm)∨1⌽dm
	∨⌿msk←1<+⌿¨dm⊆'.'=x:{
		EM←'MULTIPLE . IN FLOAT'
		2 EM SIGNAL ∊msk/dm⊆pos
	}⍬
	dm∨←('¯'=x)∧1⌽dm
	∨⌿msk←1<+⌿¨dm⊆'¯'=x:{
		EM←'MULTIPLE ¯ IN NUMBER'
		2 EM SIGNAL ∊msk⌿dm⊆pos
	}⍬
	∨⌿msk←('¯'=x)∧~dm:{
		EM←'ORPHANED ¯'
		2 EM SIGNAL msk⌿pos
	}⍬
	dm∨←(msk←x∊'Ee')∧(¯1⌽dm)∧1⌽dm
	dm←dm⍀∊{1@(⊃⍸⍵)~⍵}¨dm⊆msk
	dm∨←(msk←x∊'Jj')∧(¯1⌽dm)∧1⌽dm
	dm←dm⍀∊{1@(⊃⍸⍵)~⍵}¨dm⊆msk
	(msk⌿dm)←∊∧⍀¨(msk←x∊alp,num)⊆dm
	dm[⍸dm∧(x='.')∧~(¯1⌽dm)∨1⌽dm]←0
	∨⌿msk←∨⌿¨dm⊆dm∧(x='.')∧¯1⌽(~dm)∧x∊num:{
		EM←'AMBIGUOUS PLACEMENT OF NUMERIC FORM'
		2 EM SIGNAL ∊msk⌿dm⊆pos
	}⍬
	∨⌿msk←∨⌿¨'.'={1⊃(⍵⊆⍨~⍵∊'Ee'),⊂''}¨x⊆⍨rm←dm∧~x∊'Jj':{
		EM←'NON-INTEGER EXPONENT'
		2 EM SIGNAL ∊msk⌿rm⊆pos
	}⍬
	t[i←⍸2<⌿0⍪dm]←N
	end[i]←end⌿⍨2>⌿dm⍪0
	msk←(~dm)∧x∊alp,num
	t[i←⍸2<⌿0⍪msk]←V
	end[i]←end⌿⍨2>⌿msk⍪0
	∨⌿msk←3≤≢¨grp←(pos⊆⍨'⍺'=x),pos⊆⍨'⍵'=x:{
		EM←'AMBIGUOUS FORMALS'
		2 EM SIGNAL ∊msk⌿grp
	}⍬
	msk←('⍺⍺'⍷x)∨'⍵⍵'⍷x
	t[i←⍸msk]←P
	end[i]+←1
	t[⍸(~msk∨¯1⌽msk)∧x∊'⍺⍵']←A
	t[⍸(~dm)∧x∊prms]←P ⋄ t[⍸x∊syna]←A
	t[⍸'{'=x]←F ⋄ 0≠⊃d←¯1⌽+⍀1 ¯1 0['{}'⍳x]:'UNBALANCED DFNS'⎕SIGNAL 2
	∨⌿(d=0)∧(t=P)∧IN[pos]∊'⍺⍵':'DFN FORMAL REFERENCED OUTSIDE DFNS'⎕SIGNAL 2
	∨⌿Z≠t⌿⍨1⌽msk←(d=0)∧'∇'=x:'TRAD-FNS START/END LINES MUST BEGIN WITH ∇'⎕SIGNAL 2
	0≠⊃tm←¯1⌽≠⍀(d=0)∧'∇'=x:'UNBALANCED TRAD-FNS'⎕SIGNAL 2
	∨⌿Z≠t⌿⍨⊃1 ¯1∨.⌽⊂(2>⌿tm)⍪0:'TRAD-FNS END LINE MUST CONTAIN ∇ ALONE'⎕SIGNAL 2
	t[⍸tm∧(d=0)∧∊((~⊃)∧(<⍀∨⍀))¨':'=(t=Z)⊂IN[pos]]←L
	ki←⍸(t=0)∧(d=0)∧(':'=IN[pos])∧1⌽t=V
	t[ki]←K ⋄ end[ki]←end[ki+1] ⋄ t[ki+1]←0
	ERR←'EMPTY COLON IN NON-DFNS CONTEXT, EXPECTED LABEL OR KEYWORD'
	∨⌿(t=0)∧(d=0)∧':'=IN[pos]:ERR ⎕SIGNAL 2
	si←⍸('⎕'=IN[pos])∧1⌽t=V
	t[si]←S ⋄ end[si]←end[si+1] ⋄ t[si+1]←0

	⍝ Delete all characters we no longer need from the tree
	d tm t pos end(⌿⍨)←⊂(t≠0)∨x∊'()[]{}:;'

	ERR←'LABEL MUST CONSIST OF A SINGLE NAME'
	∨⌿(Z≠t[li-1])∨(V≠t[li←⍸1⌽msk←t=L]):ERR ⎕SIGNAL 2
	t[li]←L ⋄ end[li]←end[li+1]
	d tm t pos end(⌿⍨)←⊂~msk
	⍝ Now that all compound data is tokenized, reify n field before tree-building
	n←{1↓⍎¨'0',⍵}@{t=N}(⊂'')@{t∊Z F}1 ⎕C@{t∊K S}IN∘I¨pos+⍳¨end-pos
	n←⍎¨@{t=C}n
	msk vals←⎕VFI ⍕n⍕(t=N)⌿n
	~∧⌿msk:{
		EM←'CANNOT REPRESENT NUMBER'
		2 EM SIGNAL ∊((t=N)⍀~msk)⌿pos+⍳¨end-pos
	}⍬
	n[⍸t=N]←vals

	KW←'NAMESPACE' 'ENDNAMESPACE' 'END' 'IF' 'ELSEIF' 'ANDIF' 'ORIF' 'ENDIF'
	KW,←'WHILE' 'ENDWHILE' 'UNTIL' 'REPEAT' 'ENDREPEAT' 'LEAVE' 'FOR' 'ENDFOR'
	KW,←'IN' 'INEACH' 'SELECT' 'ENDSELECT' 'CASE' 'CASELIST' 'ELSE' 'WITH'
	KW,←'ENDWITH' 'HOLD' 'ENDHOLD' 'TRAP' 'ENDTRAP' 'GOTO' 'RETURN' 'CONTINUE'
	KW,←'SECTION' 'ENDSECTION' 'DISPOSABLE' 'ENDDISPOSABLE'
	KW,¨⍨←':'
	msk←~KW∊⍨kws←n⌿⍨km←t=K
	∨⌿msk:('UNRECOGNIZED KEYWORD ',kws⊃⍨⊃⍸msk)⎕SIGNAL 2
	msk←kws∊':NAMESPACE' ':ENDNAMESPACE'
	∨⌿msk∧km⌿tm:'NAMESPACE SCRIPTS MUST APPEAR AT THE TOP LEVEL'⎕SIGNAL 2
	msk←kws∊KW~':NAMESPACE' ':ENDNAMESPACE' ':SECTION' ':ENDSECTION'
	∨⌿msk←msk∧~km⌿tm:{
		msg←2'STRUCTURED STATEMENTS MUST APPEAR WITHIN TRAD-FNS'
		msg SIGNAL ∊{x+⍳end[⍵]-x←pos[⍵]}¨⍸km⍀msk
	}⍬
	SYSV←,¨'Á' 'A' 'AI' 'AN' 'AV' 'AVU' 'BASE' 'CT' 'D' 'DCT' 'DIV' 'DM'
	SYSV,←,¨'DMX' 'EXCEPTION' 'FAVAIL' 'FNAMES' 'FNUMS' 'FR' 'IO' 'LC' 'LX'
	SYSV,←,¨'ML' 'NNAMES' 'NNUMS' 'NSI' 'NULL' 'PATH' 'PP' 'PW' 'RL' 'RSI'
	SYSV,←,¨'RTL' 'SD' 'SE' 'SI' 'SM' 'STACK' 'TC' 'THIS' 'TID' 'TNAME' 'TNUMS'
	SYSV,←,¨'TPOOL' 'TRACE' 'TRAP' 'TS' 'USING' 'WA' 'WSID' 'WX' 'XSI'
	SYSF←,¨'ARBIN' 'ARBOUT' 'AT' 'C' 'CLASS' 'CLEAR' 'CMD' 'CONV' 'CR' 'CS' 'CSV'
	SYSF,←,¨'CY' 'DF' 'DL' 'DQ' 'DR' 'DT' 'ED' 'EM' 'EN' 'EX' 'EXPORT'
	SYSF,←,¨'FAPPEND' 'FCHK' 'FCOPY' 'FCREATE' 'FDROP' 'FERASE' 'FFT' 'IFFT'
	SYSF,←,¨'FHIST' 'FHOLD' 'FIX' 'FLIB' 'FMT' 'FPROPS' 'FRDAC' 'FRDCI' 'FREAD'
	SYSF,←,¨'FRENAME' 'FREPLACE' 'FRESIZE' 'FSIZE' 'FSTAC' 'FSTIE' 'FTIE'
	SYSF,←,¨'FUNTIE' 'FX' 'INSTANCES' 'JSON' 'KL' 'LOAD' 'LOCK' 'MAP' 'MKDIR'
	SYSF,←,¨'MONITOR' 'NA' 'NAPPEND' 'NC' 'NCOPY' 'NCREATE' 'NDELETE' 'NERASE'
	SYSF,←,¨'NEW' 'NEXISTS' 'NGET' 'NINFO' 'NL' 'NLOCK' 'NMOVE' 'NPARTS'
	SYSF,←,¨'NPUT' 'NQ' 'NR' 'NREAD' 'NRENAME' 'NREPLACE' 'NRESIZE' 'NS'
	SYSF,←,¨'NSIZE' 'NTIE' 'NUNTIE' 'NXLATE' 'OFF' 'OR' 'PFKEY' 'PROFILE'
	SYSF,←,¨'REFS' 'SAVE' 'SH' 'SHADOW' 'SIGNAL' 'SIZE' 'SR' 'SRC' 'STATE'
	SYSF,←,¨'STOP' 'SVC' 'SVO' 'SVQ' 'SVR' 'SVS' 'TCNUMS' 'TGET' 'TKILL' 'TPUT'
	SYSF,←,¨'TREQ' 'TSYNC' 'UCS' 'VR' 'VFI' 'WC' 'WG' 'WN' 'WS' 'XML' 'XT'
	SYSD←,¨'OPT' 'R' 'S'
	∨⌿msk←(t=S)∧~n∊'⎕',¨SYSV,SYSF,SYSD:{
		ERR←2'INVALID SYSTEM VARIABLE, FUNCTION, OR OPERATOR'
		ERR SIGNAL∊pos[⍵]{⍺+⍳⍵-⍺}¨end[⍵]
	}⍸msk

	⍝ Compute parent vector from d
	p←D2P d

	k←2×t∊F ⋄ k[∪p⌿⍨(t=P)∧n∊⊂'⍺⍺']←3 ⋄ k[∪p⌿⍨(t=P)∧n∊⊂'⍵⍵']←4

	⍝ We will often wrap a set of nodes as children under a Z node
	gz←{
		z←⍵↑⍨-0≠≢⍵ ⋄ ks←¯1↓⍵
		t[z]←Z ⋄ p[ks]←⊃z ⋄ pos[z]←pos[⊃⍵] ⋄ end[z]←end[⊃⌽z,ks]
		z
	}

	_←(gz 1⌽⊢)¨(t[i]=Z)⊂i←⍸d=0
	'Non-Z top-level node'assert t[⍸p=⍳≢p]=Z:
	_←p[i]{end[⍺]←end[⊃⌽⍵] ⋄ gz¨⍵⊂⍨1,¯1↓t[⍵]=Z}⌸i←⍸t[p]=F
	'Non-Z dfns body node'assert t[⍸t[p]=F]=Z:

	⍝ Drop/eliminate any Z nodes that are empty or blank
	_←p[i]{msk[⍺,⍵]←~∧⌿IN[pos[⍵]]∊WS}⌸i←⍸(t[p]=Z)∧p≠⍳≢p⊣msk←t≠Z
	tm n t k pos end(⌿⍨)←⊂msk ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p

	nss←n∊⊂':NAMESPACE' ⋄ nse←n∊⊂':ENDNAMESPACE'
	ERR←':NAMESPACE KEYWORD MAY ONLY APPEAR AT BEGINNING OF A LINE'
	Z∨.≠t⌿⍨1⌽nss:ERR ⎕SIGNAL 2
	ERR←'NAMESPACE DECLARATION MAY HAVE ONLY A NAME OR BE EMPTY'
	∨⌿(Z≠t⌿⍨¯1⌽nss)∧(V≠t⌿⍨¯1⌽nss)∨Z≠t⌿⍨¯2⌽nss:ERR ⎕SIGNAL 2
	ERR←':ENDNAMESPACE KEYWORD MUST APPEAR ALONE ON A LINE'
	∨⌿Z≠t⌿⍨⊃1 ¯1∨.⌽⊂nse:ERR ⎕SIGNAL 2
	t[nsi←⍸1⌽nss]←M ⋄ t[nei←⍸1⌽nse]←-M
	n[i]←n[1+i←⍸(t=M)∧V=1⌽t] ⋄ end[nsi]←end[nei]
	x←⍸p=⍳≢p ⋄ d←+⍀(t[x]=M)+-t[x]=-M
	0≠⊃⌽d:':NAMESPACE KEYWORD MISSING :ENDNAMESPACE PAIR'⎕SIGNAL 2
	p[x]←x[D2P ¯1⌽d]

	⍝ Delete unnecessary namespace nodes from the tree, leave only M's
	msk←~nss∨((¯1⌽nss)∧t=V)∨nse∨1⌽nse
	t k n pos end⌿⍨←⊂msk ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
	_←p[i]{
		0=+⌿m←':'=IN[pos[⍵]]:⍬
		⊃m:'EMPTY GUARD TEST EXPRESSION'⎕SIGNAL 2
		1<+⌿m:'TOO MANY GUARDS'⎕SIGNAL 2
		t[⍺]←G ⋄ p[ti←gz⊃tx cq←2↑(⊂⍬)⍪⍨⍵⊂⍨1,¯1↓m]←⍺ ⋄ k[ti]←1
		ci←≢p ⋄ p,←⍺ ⋄ t k pos end⍪←0 ⋄ n,←⊂'' ⋄ k[gz cq,ci]←1
	0}⌸i←⍸t[p[p]]=F
	_←p[i]{
		x←IN[pos[⍵]]
		bd←+⍀bm←(bo←'['=x)+-bc←']'=x
		pd←+⍀pm←(po←'('=x)+-pc←')'=x
		0≠⊃⌽bd:{
			ix←pos[⍵]{x+⍳(⌈⌿⍵)-x←⌊⌿⍺}⍥{⍵⌿⍨0≠bd}end[⍵]
			2'UNBALANCED BRACKETS'SIGNAL ix
		}⍵
		0≠⊃⌽pd:{
			ix←pos[⍵]{x+⍳(⌈⌿⍵)-x←⌊⌿⍺}⍥{⍵⌿⍨0≠pd}end[⍵]
			2'UNBALANCED PARENTHESES'SIGNAL ix
		}⍵
		(po⌿bd)∨.≠⌽pc⌿bd:{
			'OVERLAPPING BRACKETS AND PARENTHESES'⎕SIGNAL 2
		}⍵
		p[⍵]←(⍺,⍵)[1+¯1@{⍵=⍳≢⍵}D2P +⍀¯1⌽bm+pm]
		t[bo⌿⍵]←¯1 ⋄ t[po⌿⍵]←Z
		end[po⌿⍵]←end[⌽pc⌿⍵] ⋄ end[bo⌿⍵]←end[⌽bc⌿⍵]
	0}⌸i←⍸(t[p]=Z)∧p≠⍳≢p
	t k n pos end⌿⍨←⊂msk←~IN[pos]∊')' ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
	_←p[i]{k[z←⊃⍪⌿gz¨g←⍵⊂⍨¯1⌽IN[pos[⍵]]∊';]']←1 ⋄ t[z]←Z P[1=≢¨g]}⌸i←⍸t[p]=¯1
	⍝ Mark bindable nodes
	bm←(t=V)∨(t=A)∧n∊,¨'⎕⍞'
	bm←{bm⊣p[i]{bm[⍺]←(V ¯1≡t[⍵])∨∧⌿bm[⍵]}⌸i←⍸(~bm[p])∧t[p]=Z}⍣≡bm

	⍝ Binding nodes
	_←p[i]{
		t[⍵⌿⍨(n[⍵]∊⊂,'←')∧0,¯1↓bm[⍵]]←B
		b v←{(⊃¨x)(1↓¨x←⍵⌿⍨{t[⊃⍵]=B}¨⍵)}¯1⌽¨⍵⊂⍨1,¯1↓t[⍵]∊P B
		∨⌿~bm[∊v]:'CANNOT BIND ASSIGNMENT VALUE'⎕SIGNAL 2
		p[⍵]←(⍺,b)[0,¯1↓+⍀t[⍵]=B]
		n[b]←n[∊v] ⋄ t[∊v]←¯7 ⋄ pos[b]←pos[∊v] ⋄ end[b]←end[⊃⌽⍵]
	0}⌸i←⍸(t[p]=Z)∧p≠⍳≢p
	t k n pos end⌿⍨←⊂msk←t≠¯7 ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
	k[⍸(t=S)∧n∊'⎕',¨SYSV]←1 ⋄ k[⍸(t=S)∧n∊'⎕',¨SYSF]←2 ⋄ k[⍸(t=S)∧n∊'⎕',¨SYSD]←4
	t[⍸t=S]←P
	k[⍸t∊A C N]←1
	k[⍸n∊,¨prmfs]←2 ⋄ k[⍸n∊,¨prmmo]←3 ⋄ k[⍸n∊,¨prmdo]←4
	k[⍸n∊,¨prmfo]←5
	k[i←⍸msk←(n∊⊂,'∘')∧1⌽n∊⊂,'.']←3 ⋄ end[i]←end[i+1] ⋄ n[i]←⊂,'∘.'
	t k n pos end⌿⍨←⊂msk←~¯1⌽msk ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
	rf←¯1@{~t[⍵]∊F G M}p[rz←I@{~(t[⍵]=Z)∧(t[p[⍵]]∊F G M)∨p[⍵]=⍵}⍣≡⍨p]
	rf[i]←p[i←⍸t=G] ⋄ rz[i]←i ⋄ rf←rf I@{rz∊p[i]⊢∘⊃⌸i←⍸t[p]=G}rf
	mk←{⍺[⍵],⍪n[⍵]}
	fr←rf mk⊢fb←fb[⍳⍨rf mk⊢fb←fb I∘(⍳⍨)U⊖rz mk⊢fb←⍸t=B] ⋄ fb,←¯1
	vb←fb[fr⍳rf mk i]@(i←⍸t=V)⊢¯1⍴⍨≢p
	vb[i⌿⍨(rz[i]<rz[b])∨(rz[i]=rz[b])∧i≥b←vb[i←i⌿⍨vb[i]≠¯1]]←¯1
	_←{z/⍨¯1=vb[1⌷z]←fb[fr⍳⍉n I@1⊢z←rf I@0⊢⍵]}⍣≡⍉{rf[⍵],⍪⍵}⍸(t=V)∧vb=¯1
	∨⌿msk←(t=V)∧vb=¯1:{
		6'ALL VARIABLES MUST REFERENCE A BINDING'SIGNAL∊pos[⍵]{⍺+⍳⍵-⍺}¨end[⍵]
	}⍸msk
	t←F@{t=M}t
	t←V@(i←⍸(t=A)∧n∊,¨'⍺⍵')⊢t ⋄ vb[i]←i
	k[⍸(t=P)∧n∊'⍺⍺' '⍵⍵']←2
	z x←↓⍉p[i]{⍺⍵}⌸i←⍸(t[p]∊B Z)∧p≠⍳≢p
	x←{⍵⌿⍨~∧⍀t[⍵]=¯1}U⌽¨x
	0∨.=≢¨x:'BRACKET SYNTAX REQUIRES FUNCTION OR ARRAY TO ITS LEFT'⎕SIGNAL 2
	_←{
		k[msk⌿z]←k[x⌿⍨msk←(k[⊃¨x]≠0)∧1=≢¨x]
		z x⌿⍨←⊂~msk

		k[z⌿⍨msk←k[⊃¨x]=4]←3
		z x⌿⍨←⊂~msk

		k[z⌿⍨msk←{(2 3 5∊⍨k[⊃⍵])∨4=(⍵,≢k)[0⍳⍨∧⍀k[⍵]=1]⌷k,0}∘⌽¨x]←2
		z x⌿⍨←⊂~msk

		k[z⌿⍨msk←k[⊃∘⌽¨x]=1]←1
		z x⌿⍨←⊂~msk

		k[i]←k[vb[i←⍸t=V]]
	≢z}⍣(=∨0=⊣)≢z
	'FAILED TO INFER ALL BINDING TYPES'assert 0=≢z:
	i←|i⊣km←0<i←i[⍋|(i,⍨←-∪p[i]),p[i←⍸t[p]∊B Z]]
	msk←(t[i]∊C N)∨msk∧⊃1 ¯1∨.⌽⊂msk←km∧(t[i]∊A C N V Z)∧k[i]=1
	np←(≢p)+⍳≢ai←i⌿⍨am←2>⌿msk⍪0 ⋄ p←(np@ai⍳≢p)[p] ⋄ p,←ai ⋄ km←2<⌿0⍪msk
	t k n pos end(⊣,I)←⊂ai ⋄ k[ai]←1 6[∨⌿¨msk⊆t[i]≠N]
	t n pos(⊣@ai⍨)←A(⊂'')(pos[km⌿i]) ⋄ p[msk⌿i]←ai[(msk←msk∧~am)⌿¯1++⍀km]
	i←⍸(t[p]=A)∧(k[p]=6)∧t=N
	p,←i ⋄ t k n pos end(⊣,I)←⊂i ⋄ t k n(⊣@i⍨)←A 1(⊂'')
	⍝ PARSE B←D...
	⍝ PARSE B←...D
	_←p[i]{
		⊃m←t[⍵]=¯1:'SYNTAX ERROR:NOTHING TO INDEX'⎕SIGNAL 2
		k[⍵⌿⍨m∧¯1⌽(k[⍵]∊2 3 5)∨¯1⌽k[⍵]=4]←4
	0}⌸i←⍸(t[p]∊B Z)∧(p≠⍳≢p)∧k[p]∊1 2
	i←⍸(t=¯1)∧k=4 ⋄ j←⍸(t[p]=¯1)∧k[p]=4
	(≢i)≠≢j:{
		2'AXIS REQUIRES SINGLE AXIS EXPRESSION'SIGNAL ∊pos[⍵]+⍳¨end[⍵]-pos[⍵]
	}⊃⍪⌿{⊂⍺⌿⍨1<≢⍵}⌸p[j]
	∨⌿msk←t[j]≠Z:{
		2'AXIS REQUIRES NON-EMPTY AXIS EXPRESSION'SIGNAL ∊pos[⍵]+⍳¨end[⍵]-pos[⍵]
	}msk⌿p[j]
	p[j]←p[i] ⋄ t[i]←P ⋄ end[i]←1+pos[i]
	i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸(t[p]∊B Z)∧(p≠⍳≢p)∧k[p]∊1 2
	⍝ Mask and verify dyadic operator right operands
	(dm←¯1⌽(k[i]=4)∧t[i]∊F P V Z)∨.∧(~km)∨k[i]∊0 3 4:{
		'MISSING RIGHT OPERAND'⎕SIGNAL 2
	}⍬

	⍝ Refine schizophrenic types
	k[i⌿⍨(k[i]=5)∧dm∨¯1⌽(~km)∨(~dm)∧k[i]∊1 6]←2 ⋄ k[i⌿⍨k[i]=5]←3

	⍝ Rationalize ∘.
	jm←(t[i]=P)∧n[i]∊⊂,'∘.'
	jm∨.∧1⌽(~km)∨k[i]∊3 4:'MISSING OPERAND TO ∘.'⎕SIGNAL 2
	p←((ji←jm⌿i)@(jj←i⌿⍨¯1⌽jm)⍳≢p)[p] ⋄ t[ji,jj]←t[jj,ji] ⋄ k[ji,jj]←k[jj,ji]
	n[ji,jj]←n[jj,ji] ⋄ pos[ji,jj]←pos[ji,ji] ⋄ end[ji,jj]←end[jj,jj]

	⍝ Mask and verify monadic and dyadic operator left operands
	∨⌿msk←(dm∧¯2⌽~km)∨(¯1⌽~km)∧mm←(k[i]=3)∧t[i]∊F P V Z:{
		2'MISSING LEFT OPERAND'SIGNAL ∊pos[⍵]+⍳¨end[⍵]-pos[⍵]
	}i⌿⍨msk
	msk←dm∨mm

	⍝ Parse function expressions
	np←(≢p)+⍳xc←≢oi←msk⌿i ⋄ p←(np@oi⍳≢p)[p] ⋄ p,←oi ⋄ t k n pos end(⊣,I)←⊂oi
	p[g⌿i]←oi[(g←(~msk)∧(1⌽msk)∨2⌽dm)⌿xc-⌽+⍀⌽msk]
	p[g⌿oi]←(g←msk⌿(1⌽mm)∨2⌽dm)⌿1⌽oi ⋄ t[oi]←O ⋄ n[oi]←⊂''
	pos[oi]←pos[g⌿i][msk⌿¯1++⍀g←(~msk)∧(1⌽mm)∨2⌽dm]
	ol←1+(k[i⌿⍨(2⌽mm)∨3⌽dm]=4)∨k[i⌿⍨(1⌽mm)∨2⌽dm]∊2 3
	or←(msk⌿dm)⍀1+k[dm⌿i]=2
	k[oi]←3 3⊥↑or ol
	⍝ Wrap all assignment values as Z nodes
	i km←⍪⌿p[i]{(⍺⍪⍵)(0,1∨⍵)}⌸i←⍸(t[p]∊B Z)∧(p≠⍳≢p)∧k[p]∊1
	j←i⌿⍨msk←(t[i]=P)∧n[i]∊⊂,'←' ⋄ nz←(≢p)+⍳zc←+⌿msk
	p,←nz ⋄ t k n,←zc⍴¨Z 1(⊂'') ⋄ pos,←1+pos[j] ⋄ end,←end[p[j]]
	zm←¯1⌽msk ⋄ p[km⌿i]←(zpm⌿(i×~km)+zm⍀nz)[km⌿¯1++⍀zpm←zm∨~km]

	⍝ This is the definition of a function value at this point
	isfn←{(t[⍵]∊O F)∨(t[⍵]∊B P V Z)∧k[⍵]=2}

	⍝ Parse modified assignment to E4(V, F, Z)
	j←i⌿⍨m←msk∧(¯1⌽isfn i)∧¯2⌽(t[i]=V)∧k[i]=1 ⋄ p[zi←nz⌿⍨msk⌿m]←j
	p[i⌿⍨(1⌽m)∨2⌽m]←2⌿j ⋄ t k(⊣@j⍨)←E 4 ⋄ pos end n{⍺[⍵]@j⊢⍺}←vi zi,⊂vi←i⌿⍨2⌽m

	⍝ Parse bracket modified assignment to E4(E6, O2(F, P3(←)), Z)
	j←i⌿⍨m←msk∧(¯1⌽isfn i)∧(¯2⌽t[i]=¯1)∧¯3⌽(t[i]=V)∧k[i]=1
	p[zi←nz⌿⍨msk⌿m]←ei←i⌿⍨3⌽m ⋄ t k end(⊣@ei⍨)←E 4(end[zi])
	p t k n(⊣@(i⌿⍨2⌽m)⍨)←ei E 6(⊂'')
	p,←j ⋄ t,←P⍴⍨≢j ⋄ k,←3⍴⍨≢j ⋄ n,←(≢j)⍴⊂,'←' ⋄ pos,←pos[j] ⋄ end,←end[j]
	p t k n pos(⊣@j⍨)←ei O 2(⊂'')(pos[fi←i⌿⍨1⌽m]) ⋄ p[fi]←j

	⍝ Parse bracket assignment to E4(E6, P2(←), Z)
	j←i⌿⍨m←msk∧(¯1⌽t[i]=¯1)∧¯2⌽(t[i]=V)∧k[i]=1 ⋄ p[zi←nz⌿⍨msk⌿m]←ei←i⌿⍨2⌽m
	t k end(⊣@ei⍨)←E 4(end[zi]) ⋄ p t k n(⊣@(i⌿⍨1⌽m)⍨)←ei E 6(⊂'')
	p t k(⊣@j⍨)←ei P 2

	⍝ Parse modified strand assignment
	⍝ Parse strand assignment

	⍝ SELECTIVE MODIFIED ASSIGNMENT
	⍝ SELECTIVE ASSIGNMENT
	i←i[⍋p[i←⍸(t[p]∊B Z)∧(k[p]=1)∧p≠⍳≢p]] ⋄ j←i⌿⍨jm←t[i]=¯1
	t[j]←A ⋄ k[j]←¯1 ⋄ p[i⌿⍨1⌽jm]←j
	⍝ TRAINS
	i km←⍪⌿p[i]{(⍺⍪⍵)(0,(2≤≢⍵)∧1∨⍵)}⌸i←⍸(t[p]∊B Z)∧(k[p]=1)∧p≠⍳≢p
	msk←m2∨fm∧~¯1⌽m2←km∧(1⌽km)∧~fm←(t[i]=O)∨(t[i]≠A)∧k[i]=2
	t,←E⍴⍨xc←+⌿msk ⋄ k,←msk⌿msk+m2 ⋄ n,←xc⍴⊂''
	pos,←pos[msk⌿i] ⋄ end,←end[p[msk⌿i]]
	p,←msk⌿¯1⌽(i×~km)+km×x←¯1+(≢p)++⍀msk ⋄ p[km⌿i]←km⌿x
	i←i[⍋p[i←⍸(t[p]=A)∧k[p]=¯1]] ⋄ msk←~2≠⌿¯1,ip←p[i] ⋄ ip←∪ip ⋄ nc←2×≢ip
	t[ip]←E ⋄ k[ip]←2 ⋄ n[ip]←⊂'' ⋄ p[msk⌿i]←msk⌿(≢p)+1+2×¯1++⍀~msk
	p,←2⌿ip ⋄ t,←nc⍴P E ⋄ k,←nc⍴2 6 ⋄ n,←nc⍴,¨'[' ''
	pos,←2⌿pos[ip] ⋄ end,←∊(1+pos[ip]),⍪end[ip] ⋄ pos[ip]←pos[i⌿⍨~msk]

	⍝ Sanity check
	ERR←'INVARIANT ERROR: Z node with multiple children'
	ERR assert(+⌿(t[p]=Z)∧p≠⍳≢p)=+⌿t=Z:

	⍝ Count parentheses in source information
	ip←p[i←⍸(t[p]=Z)∧n[p]∊⊂,'('] ⋄ pos[i]←pos[ip] ⋄ end[i]←end[ip]

	⍝ VERIFY Z/B NODE TYPES MATCH ACTUAL TYPE

	⍝ Eliminate Z nodes from the tree
	zi←p I@{t[p[⍵]]=Z}⍣≡ki←⍸msk←(t[p]=Z)∧t≠Z
	p←(zi@ki⍳≢p)[p] ⋄ t k n pos end(⊣@zi⍨)←t k n pos end I¨⊂ki
	t k n pos end⌿⍨←⊂msk←~msk∨t=Z ⋄ p←(⍸~msk)(⊢-1+⍸)msk⌿p
	
	msk←(t=B)∧k[I@{t[⍵]≠F}⍣≡⍨p]=0
	xn←(0⍴⊂''),msk⌿n ⋄ xt←msk⌿k
	d i←P2D p ⋄ d n t k pos end I∘⊢←⊂i
	sym←∪('')(,'⍵')(,'⍺')'⍺⍺' '⍵⍵',n
	n←-sym⍳n
	(d t k n pos end)(xn xt)sym IN
}
