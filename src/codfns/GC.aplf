GC←{
	p t k n lx ss se sym←⍵
	
	⍝ Placeholder for mutable values
	mu←(≢p)⍴0

	⍝ Make sure signal retains the stack
	SIGNAL←{⍎'⍺ ⎕SIGNAL ⍵'}
	
	⍝ Variable generation utilities
	var_ckinds←{
		('' 'array' 'func' 'moper' 'doper' 'env' 'void')[k[⍵]]
	}
	
	decl_vars←{
		0=≢⍵:0⍴⊂''
		0∊k[⍵]:'CANNOT DECLARE STACK VARIABLE'SIGNAL 99
		∨⌿(k[⍵]=1)∧lx[⍵]>2:'CANNOT DECLARE GLOBAL ARRAY'SIGNAL 99
		∨⌿(k[⍵]=6)∧lx[⍵]>2:'CANNOT DECLARE AMBIGUOUS GLOBAL'SIGNAL 99
		z←'' 'struct cell_'[lx[⍵]<3]
		z,¨←var_ckinds ⍵
		z,¨←'' '_ptr'[lx[⍵]≥3]
		z,¨←' ' '_box '[mu[⍵]]
		z,¨←'' '*'[lx[⍵]<3]
		z,¨←var_names ⍵
		z,¨';'
	}
	
	var_names←{
		ceqv←'_del_' '_delubar_' 'alpha' 'omega'
		asym←'∆'     '⍙'         '⍺'     '⍵'
		(,¨asym)⎕R ceqv⊢sym[|n[⍵]]
	}
	
	var_nmvec←{
		0=≢⍵:'wchar_t **',⍺,' = NULL;'
		z←'wchar_t *',⍺,'[] = {'
		z,←⊃{⍺,', ',⍵}⌿'L"'∘,¨sym[|n[⍵]],¨'"'
		z,'};'
	}
	
	init_vars←{
		0∊⍺:{
			EM←'CANNOT INITIALIZE STACK VARIABLE'
			EM SIGNAL 99
		}⍬
		(10>|⍺)∧⍺<0:{
			EM←'GLOBAL VARIABLES CANNOT BE MUTABLE'
			EM SIGNAL 99
		}⍬
		z←(≢⍵)⍴⊂⊂''
		i←⍸⍺>0
		z[i]←⊂¨(⍺[i] var_refs ⍵[i]),¨⊂' = NULL;'
		init←{
			z←⊂'err = mk_',⍺,'_box(&',⍵,', NULL);'
			z,←⊂'if (err)'
			z,←⊂TB,'goto fail;'
		z}
		types←var_ckinds ⍺[i]
		names←⍺[i] var_refs ⍵[i]
		z[i]←types init names
		⊃⍪⌿z
	}
	
	var_refs←{
		0∊⍺:{
			EM←'CANNOT REFERENCE STACK VARIABLE'
			EM SIGNAL 99
		}⍬
		z←'' 'loc.' 'lex->' 'dyn->'[⌊10×|⍺]
		z,¨var_names ⍵
	}
	
	var_values←{
		z←'loc.' 'lex->' 'dyn->' ''[lx[⍵]]
		z,¨←var_names ⍵
		z,¨←'' '->value'[mu[⍵]]
		z[⍸0=k[⍵]]←⊂'stkhd[-1]'
	z}
	
	kill_vars←{
		type←var_ckinds ⍺
		'release_'∘,¨type,¨'(',¨(⍺ var_refs ⍵),');'
	}

	⍝ All code has an initial prefix
	pref ←⊂'#include "codfns.h"'
	pref,←⊂''
	pref,←⊂'EXPORT int'
	pref,←⊂'DyalogGetInterpreterFunctions(void *p)'
	pref,←⊂'{'
	pref,←⊂'    return set_dwafns(p);'
	pref,←⊂'}'
	pref,←⊂''
	
	⍝ We have a vector output for each node in the AST
	zz←(≢p)⍴⊂''
	
	⍝ B: Function bindings
	i←⍸t[p]=B
	zz[p[i]],←{
		tgt src←var_values p[⍵],⍵
		z ←⊂tgt,' = retain_cell(',src,');'
	z}¨i
	
	⍝ C: Closures for functions
	i←⍸t=C
	zz[i],←{
		id←⊃var_names ⍵
		z ←⊂'err = mk_func((struct cell_func **)stkhd++, ',id,', 0);'
		z,←⊂'if (err)'
		z,←⊂'	goto cleanup;'
		z,⊂''
	}¨i
	
	⍝ E¯1: Non-returning end of line statement
	i←⍸(t=E)∧k=¯1
	zz[i],←{
		z ←⊂'release_cell(*--stkhd);'
		z,⊂''
	}¨i

	⍝ E0: Returning end of line statement
	i←⍸(t[p]=E)∧k[p]=0
	zz[i],←⊂¨'*z = retain_cell('∘,¨(var_values i),¨⊂');'
	zz[i],←⊂⊂'goto cleanup;'
	zz[i],←⊂⊂''
	
	⍝ E1: Monadic expression application
	
	⍝ F2: D-fns functions
	i←⍸(t=F)∧k=2 
	zz[i],←{
		id←⊃var_names ⍵
		pref,←⊂'int ',id,'(struct cell_array **,'
		pref,←⊂'    struct cell_array *, struct cell_array *,'
		pref,←⊂'    struct cell_func *);'
		z ←⊂'int'
		z,←⊂id,'(struct cell_array **z,'
		z,←⊂'    struct cell_array *alpha, struct cell_array *omega,'
		z,←⊂'    struct cell_func *self)'
		z,←⊂'{'
		z,←⊂'	return 0;'
		z,←⊂'}'
		z,⊂''
	}¨i
	
	⍝ F0: Initialization functions for namespaces
	i←⍸(t=F)∧k=0
	zz[i],←{
		id←⊃var_names ⍵ ⋄ xi←⍸(t=B)∧p=⍵
		z ←⊂'int ',id,'_flag = 0;'
		z,←⊂''
		z,←⊂'struct ',id,'_loc {'
		z,←⊂'	int __count;'
		z,←⊂'	wchar_t **__names;'
		z,← '	',¨decl_vars xi
		z,←⊂'} ',id,'_env;'
		z,←⊂''
		z,←⊂(id,'_names')var_nmvec xi
		z,←⊂''
		z,←⊂'EXPORT int'
		z,←⊂id,'_init(void)'
		z,←⊂'{'
		z,←⊂'	struct ',id,'_loc loc;'
		z,←⊂'	void *stk[128];'
		z,←⊂'	void **stkhd;'
		z,←⊂'	int err;'
		z,←⊂''
		z,←⊂'	if (',id,'_flag)'
		z,←⊂'		return 0;'
		z,←⊂''
		z,←⊂'	stkhd = &stk[0];'
		z,←⊂'	',id,'_flag = 1;'
		z,←⊂'	cdf_init();'
		z,←⊂''
		z,←⊂'	loc.__count = ',(⍕≢xi),';'
		z,←⊂'	loc.__names = ',id,'_names;'
		z,←⊂''
		z,←⊂'	err = 0;'
		z,←⊂''
		z,← '	',¨⊃⍪⌿(p=⍵)⌿zz
		z,←⊂''
		z,←⊂'	',id,'_env = loc;'
		z,←⊂''
		z,←⊂'cleanup:'
		z,←⊂'	return err;'
		z,←⊂'}'
		z,⊂''
	}¨i
	
	⍝ Export functions
	i←⍸(t=B)∧(k=2)∧k[p]=0
	exp←⊃⍪⌿{
		fn ns←var_names ⍵,p[⍵]
		z ←⊂'EXPORT int'
		z,←⊂fn,'(struct cell_array **z, struct cell_array *l, struct cell_array *r)'
		z,←⊂'{'
		z,←⊂'	struct cell_func *self;'
		z,←⊂''
		z,←⊂'	',ns,'_init();'
		z,←⊂''
		z,←⊂'	self = ',ns,'_env.',fn,';'
		z,←⊂''
		z,←⊂'	return self->fptr(z, l, r, self);'
		z,←⊂'}'
		z,←⊂''
		z,←⊂'EXPORT int'
		z,←⊂fn,'_dwa(void *z, void *l, void *r)'
		z,←⊂'{'
		z,←⊂'	return call_dwa(',fn,', z, l, r);'
		z,←⊂'}'
		z,⊂''
	}¨i

	⍝ Warn about nodes that appear which we haven't generated
	⎕←(∨⌿msk)↑⍉⍪'Ungenerated nodes: ',⍕,∪(msk←(zz∊⊂'')∧~t∊V)⌿N∆[t],∘⍕¨k

	⍝ Assemble all the data together into a single character vector
	∊(pref,(⊂''),(⊃⍪⌿zz[⍸p=⍳≢p]),exp),¨⊂⎕UCS 13 10
	
	
⍝ Old Stuff


	Em←{
		z ←⊂'c = *--stkhd;'
		z,←⊂'w = *--stkhd;'
		z,←⊂'(c->fn)((struct array **)stkhd++, NULL, w, c->fv);'
		z,←⊂'release_cell(c);'
		z,←⊂'release_cell(w);'
	z}

	∊,∘(⎕UCS 13 10)¨pref,⊃,⌿(,⌿Zp¨⍸t=F),(,⌿Zx¨xi),(⊂⊂''),dis¨ks ast
}
