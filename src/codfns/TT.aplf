TT←{
	(p d t k n lx pos end)exp sym IN←⍵

	⍝ Compute reference scope
	r←I@{t[⍵]≠F}⍣≡⍨p

	⍝ Mark mutated bindings 
	rn←r,⍪n ⋄ rni←rn[i←⍸msk←(t=V)∧(lx∊0 1)∧n<¯6;] ⋄ mu←(≢i)⍴0
	j←⍸msk∧(tk[p;]∧.=E 4)∨(tk[p;]∧.=E 6)∧(tk←t,⍪k)[p[p];]∧.=E 4
	_←{mu[⍸rni∊⍥↓rn[⍵;]]←1 ⋄ i⌿⍨rni∊⍥↓r[r[z]],⍪n[z←⍵⌿⍨lx[⍵]=1]}⍣≡j
	ci←p[fi←⍸(t=F)∧k≠0]
	mu←msk⍀1@{(↓rni)∊⊃⍪⌿{n[⍵],¨⍨fi⌿⍨ci=p[⍵]}¨i⌿⍨⍵∧t[p[i]]=C}⍣≡mu

	⍝ Delete ⍺← forms for dyadic specializations
	msk←0@(p⌿⍨(≠p)∧(t=P)∧(n=¯2)∧(t[p]=B)∧k[r]∊3+2×⍳7)⊢(≢p)⍴1
	_←{p[⍵]⊣msk∧←msk[⍵]}⍣≡p
	p t k n lx mu r pos end⌿⍨←⊂msk ⋄ p r(⊣-1+⍸⍨)←⊂⍸~msk
	
	⍝ Lift dfns to the top-level
	p,←n[i]←(≢p)+⍳≢i←⍸(t=F)∧p≠⍳≢p ⋄ t k n lx mu pos end r(⊣,I)←⊂i
	p r I⍨←⊂n[i]@i⊢⍳≢p ⋄ t[i]←V

	⍝ Wrap expressions as binding or return statements
	i←(⍸(~t∊F G)∧t[p]=F),¯1~⍨p[i]{⊃⌽2↑⍵,¯1}⌸i←⍸t[p]=G
	p t k n lx mu r pos end⌿⍨←⊂m←2@i⊢1⍴⍨≢p
	p r i I⍨←⊂j←(+⍀m)-1 ⋄ n←j I@(0≤⊢)n ⋄ p[i]←j←i-1
	k[j]←-(k[r[j]]=0)∨0@({⊃⌽⍵}⌸p[j])⊢(t[j]=B)∨(t[j]=E)∧k[j]=4
	t[j]←E
	
	⍝ Count children for E6, and A7 nodes
	_←p[i]{n[⍺]←≢⍵}⌸i←⍸((t[p]=A)∧k[p]=7)∨(t[p]=E)∧k[p]=6
	
	⍝ Lift guard tests
	p[i]←p[x←p[i←⍸(≠p)∧t[p]=G]] ⋄ ix←i,x ⋄ xi←x,i ⋄ p←(xi@ix⊢⍳≢p)[p]
	t[ix]←t[xi] ⋄ k[ix]←k[xi] ⋄ n[x]←n[i] ⋄ n[i]←x ⋄ lx[xi]←lx[ix]
	mu[ix]←mu[xi] ⋄ pos[xi]←pos[ix] ⋄ end[xi]←end[ix]
	
	⍝ Merge B node bindings
	n lx mu{⍺[⍵]@(p[⍵])⊢⍺}←⊂⍸msk←(≠p)∧(t∊V P)∧t[p]=B
	p t k n lx mu r pos end⌿⍨←⊂~msk ⋄ p n r(⊣-1+⍸⍨)←⊂⍸msk
	
	⍝ Lift and flatten expressions
	i←⍸(t∊A B C E G O P Z)∨(t=V)∧t[p]≠C
	p[i]←p[x←p I@{~t[p[⍵]]∊F G}⍣≡i] ⋄ j←(⌽i)[⍋⌽x]
	p t k n lx mu r pos end{⍺[⍵]@i⊢⍺}←⊂j ⋄ p←(i@j⊢⍳≢p)[p]
	
	⍝ Compute a function's local and free variables
	lv←(≢p)⍴⊂⍬ ⋄ lv[r[i]],←i←i[∪⍳⍨(r,⍪n)[i←⍸(t=V)∧(lx=0)∧n<0;]]
	fv←(≢p)⍴⊂⍬ ⋄ fv[r[i]],←i←i[∪⍳⍨(r,⍪n)[i←⍸(t=V)∧(lx=1)∧n<0;]]
	
	⍝ Mark functions with their internal ⍺ type
	⍝    0 1 2 3 4 5 6  7  8  9 10 11 12 13 14 15
	k[i]←0 1 2 4 5 7 8 10 11 13 14 16 17 19 20 22[k[i←⍸t=F]]
	k[r[i]]+←2≤k[i←i⌿⍨≠r[i←⍸(≠p)∧(t=P)∧(n=¯2)∧t[p]=B]]
	
	⍝ Disambiguate schizophrenic functions
	i←⍸(t=P)∧(k=2)∧n∊ns←-sym⍳,¨'/⌿\⍀'
	sym∪←'//' '⌿⌿' '\\' '⍀⍀'[ns⍳∪n[i]]
	n[i]←(-sym⍳'//' '⌿⌿' '\\' '⍀⍀')[ns⍳n[i]]
	
	⍝ Namify pointer variables
	i←⍸(n≥0)∧t∊B E F O P V Z
	sym∪←x←('ptr',⍕)¨n[i] ⋄ n[i]←-sym⍳x

	⍝ Symbol mapping between primitives and runtime names
	syms ←,¨'+'   '-'   '×'   '÷'   '*'   '⍟'   '|'   '○'   '⌊'  
	nams ←  'add' 'sub' 'mul' 'div' 'exp' 'log' 'res' 'cir' 'min'
	syms,←,¨'⌈'   '!'   '<'   '≤'   '='   '≥'   '>'   '≠'   '~'
	nams,←  'max' 'fac' 'lth' 'lte' 'eql' 'gte' 'gth' 'neq' 'not'
	syms,←,¨'∧'   '∨'   '⍲'   '⍱'   '⌷'   '['   '⍳'   '⍴'   ','  
	nams,←  'and' 'lor' 'nan' 'nor' 'sqd' 'brk' 'iot' 'rho' 'cat' 
	syms,←,¨'⍪'   '⌽'   '⍉'   '⊖'   '∊'   '⊃'   '≡'   '≢'   '⊢'
	nams,←  'ctf' 'rot' 'trn' 'rtf' 'mem' 'dis' 'eqv' 'nqv' 'rgt'
	syms,←,¨'⊣'   '⊤'   '⊥'   '/'   '⌿'   '\'   '⍀'   '?'   '↑'   
	nams,←  'lft' 'enc' 'dec' 'red' 'rdf' 'scn' 'scf' 'rol' 'tke' 
	syms,←,¨'↓'   '¨'   '⍨'   '.'   '⍤'   '⍣'   '∘'   '∪'   '∩'
	nams,←  'drp' 'map' 'com' 'dot' 'rnk' 'pow' 'jot' 'unq' 'int'
	syms,←,¨'←'   '⍋'   '⍒'   '∘.'  '⍷'   '⊂'   '⌹'   '⊆'   '∇'
	nams,←  'get' 'gdu' 'gdd' 'oup' 'fnd' 'par' 'mdv' 'nst' 'self'
	syms,←,¨'//'  '⌿⌿'  '\\'  '⍀⍀'
	nams,←  'rep' 'rpf' 'xpd' 'xpf'
	syms,←,¨';'   '⎕FFT'  '⎕IFFT' '⎕CONV'  '⎕NC'  '⎕SIGNAL'  '⎕DR'
	nams,←  'spn' 'q_fft' 'q_ift' 'q_conv' 'q_nc' 'q_signal' 'q_dr'
	syms,←  '⎕VEACH'  '⎕AMBIV'
	nams,←  'q_veach' 'q_ambiv'
	syms,←,¨'⍺'     '⍵'     '⍺⍺'         '⍵⍵'         '∇∇'     '%u'
	nams,←  'alpha' 'omega' 'alphaalpha' 'omegaomega' 'deldel' ''
	syms←⎕C syms

	⍝ Convert all primitives to variables; P → V
	i←⍸t=P ⋄ t[i]←V ⋄ si←syms⍳sym[ni←|n[i]]
	∨⌿msk←(≢syms)=si:6'UNKNOWN PRIMITIVE'SIGNAL SELECT msk⌿i
	sym[ni]←nams[si]
	
	p t k n lx mu lv fv pos end sym IN
}
