TT←{
	(p d t k n lx pos end)exp sym IN←⍵

	⍝ Convert O(''⌶) derived functions to V2(lx[5]) nodes
	i←⍸msk←(t=P)∧sym[|0⌊n]∊,¨'⌶'
	pi←i-2 ⋄ t[pi]←V ⋄ k[pi]←2 ⋄ n[pi]←n[i-1] ⋄ lx[pi]←5
	p d t k n lx pos end⌿⍨←⊂~msk←msk∨1⌽msk ⋄ p←p-1+p⍸⍨⍸msk
	
	⍝ Compute reference scope
	r←I@{t[⍵]≠F}⍣≡⍨p

	⍝ Mark mutated bindings 
	rn←r,⍪n ⋄ rni←rn[i←⍸msk←(t=V)∧(lx∊0 1)∧n<0;] ⋄ mu←(≢i)⍴0
	j←⍸msk∧(tk[p;]∧.=E 4)∨(tk[p;]∧.=E 6)∧(tk←t,⍪k)[p[p];]∧.=E 4
	ci←p[fi←⍸(t=F)∧k≠0]
	_←{mu[⍸rni∊⍥↓rn[⍵;]]←1 ⋄ i⌿⍨rni∊⍥↓r[r[z]],⍪n[z←⍵⌿⍨lx[⍵]=1]}⍣≡j
	mu←msk⍀1@{rni∊⍥↓fi[ci⍳p[j]],⍪n[j←i⌿⍨⍵∧t[p[i]]=C]}⍣≡mu

	⍝ Lift dfns to the top-level
	p,←n[i]←(≢p)+⍳≢i←⍸(t=F)∧p≠⍳≢p ⋄ t k n lx mu pos end r(⊣,I)←⊂i
	p r I⍨←⊂n[i]@i⊢⍳≢p ⋄ t[i]←V

	⍝ Wrap expressions as binding or return statements
	i←(⍸(~t∊F G)∧t[p]=F),¯1~⍨p[i]{⊃⌽2↑⍵,¯1}⌸i←⍸t[p]=G
	p t k n lx mu r pos end⌿⍨←⊂m←2@i⊢1⍴⍨≢p
	p r i I⍨←⊂j←(+⍀m)-1 ⋄ n←j I@(0≤⊢)n ⋄ p[i]←j←i-1
	k[j]←-(k[r[j]]=0)∨0@({⊃⌽⍵}⌸p[j])⊢(t[j]=B)∨(t[j]=E)∧k[j]=4
	t[j]←E

	⍝ Lift guard tests
	x←¯1+i←⍸(t[p]=G)∧(¯1⌽t=G)∧t≠V
	p t k n lx mu r pos end⌿⍨←⊂m←2@x⊢1⍴⍨≢p
	p r i x I⍨←⊂j←(+⍀m)-1 ⋄ n←j I@(0≤⊢)n ⋄ j←x-1 ⋄ p←(j@i⊢⍳≢p)[p]
	t k n lx mu r pos end{⍺[⍵]@j⊢⍺}←⊂i ⋄ t k n(⊣@i⍨)←V 0 j

	⍝ Lift and flatten expressions
	j←(≢p)+⍳≢i←⍸(~t[p]∊F G)∧t∊A B C E O
	p←(j@i⊢⍳≢p)[p] ⋄ p t k n lx mu r pos end(⊣,I)←⊂i ⋄ t k n(⊣@i⍨)←V 0 j
	p[i]←p[x←p I@{~t[p[⍵]]∊F G}⍣≡i←⍸t∊G A B C E O] ⋄ j←(⌽i)[⍋⌽x]
	p t k n lx mu pos end r{⍺[⍵]@i⊢⍺}←⊂j ⋄ p←(i@j⊢⍳≢p)[p]

	⍝ Compute a function's local and free variables
	lv←(≢p)⍴⊂⍬ ⋄ lv[r[i]],←i←i[∪⍳⍨(r,⍪n)[i←⍸(t=V)∧(lx=0)∧n<0;]]
	fv←(≢p)⍴⊂⍬ ⋄ fv[r[i]],←i←i[∪⍳⍨(r,⍪n)[i←⍸(t=V)∧(lx=1)∧n<0;]]
	
	⍝ Namify pointer variables
	i←⍸n≥0 ⋄ sym∪←x←('ptr',⍕)¨n[i] ⋄ n[i]←-sym⍳x

	⍝ Symbol mapping between primitives and runtime names
	syms ←,¨'+'   '-'   '×'   '÷'   '*'   '⍟'   '|'   '○'   '⌊'  
	nams ←  'add' 'sub' 'mul' 'div' 'exp' 'log' 'res' 'cir' 'min'
	syms,←,¨'⌈'   '!'   '<'   '≤'   '='   '≥'   '>'   '≠'   '~'
	nams,←  'max' 'fac' 'lth' 'lte' 'eql' 'gte' 'gth' 'neq' 'not'
	syms,←,¨'∧'   '∨'   '⍲'   '⍱'   '⌷'   '['   '⍳'   '⍴'   ','  
	nams,←  'and' 'lor' 'nan' 'nor' 'sqd' 'brk' 'iot' 'rho' 'cat' 
	syms,←,¨'⍪'   '⌽'   '⍉'   '⊖'   '∊'   '⊃'   '≡'   '≢'   '⊢'
	nams,←  'ctf' 'rot' 'trn' 'rtf' 'mem' 'dis' 'eqv' 'nqv' 'rgt'
	syms,←,¨'⊣'   '⊤'   '⊥'   '/'   '⌿'   '\'   '⍀'   '?'   '↑'   
	nams,←  'lft' 'enc' 'dec' 'red' 'rdf' 'scn' 'scf' 'rol' 'tke' 
	syms,←,¨'↓'   '¨'   '⍨'   '.'   '⍤'   '⍣'   '∘'   '∪'   '∩'
	nams,←  'drp' 'map' 'com' 'dot' 'rnk' 'pow' 'jot' 'unq' 'int'
	syms,←,¨'←'   '⍋'   '⍒'   '∘.'  '⍷'   '⊂'   '⌹'   '⊆'   '∇'
	nams,←  'get' 'gdu' 'gdd' 'oup' 'fnd' 'par' 'mdv' 'nst' 'self'
	syms,←,¨';'   '⎕FFT'  '⎕IFFT' '⎕CONV'  '⎕NC'  '⎕SIGNAL'  '⎕DR'
	nams,←  'spn' 'q_fft' 'q_ift' 'q_conv' 'q_nc' 'q_signal' 'q_dr'
	syms,←  '⎕VEACH'  '⎕AMBIV'
	nams,←  'q_veach' 'q_ambiv'
	syms,←,¨'⍺'     '⍵'     '⍺⍺'         '⍵⍵'         '∇∇'     '%u'
	nams,←  'alpha' 'omega' 'alphaalpha' 'omegaomega' 'deldel' ''
	syms←⎕C syms

	⍝ Convert all primitives to variables; P → V
	i←⍸t=P ⋄ t[i]←V ⋄ si←syms⍳sym[ni←|n[i]]
	∨⌿msk←(≢syms)=si:6'UNKNOWN PRIMITIVE'SIGNAL SELECT msk⌿i
	sym[ni]←nams[si]
	
	p t k n lx mu lv fv pos end sym IN
}
