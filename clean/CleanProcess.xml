<?xml version="1.0" encoding="utf-8"?>

<article xmlns="http://docbook.org/ns/docbook" version="5.0">

<info>
  <title>Cleanroom Software Engineering for the Lone Wolf</title>
  <author>Aaron W. Hsu</author>
  <date>May 13th, 2013</date>
</info> 

<title>Lone Wolf CleanRoom Software Engineering</title>

<para>This document describes the intended development methodology to be 
used in the development of the Co-Dfns compiler in Dyalog APL. It is 
primarily intended to document the use of the Cleanroom SE practice 
as adapted for the single development team, myself.</para>

<para>Cleanroom normally requires at least three people to form the three 
elements of a programming team. The high-level overview of the 
process of CleanRoom is the following adaptation of the Waterfall 
design:</para>

<procedure>
  <step>Receive User Requirements</step>
  <step>Create Functional and Usage Specifications</step>
  <step>Plan a fixed set of Increments</step>
  <step>
    Begin development and verification of next increment in the 
    development team; begin statistical testing for certification 
    in certification team
  </step>
  <step>Certify completed increments with feedback loop</step>
  <step>Repeat from step 4 until all increments are developed</step>
</procedure>

<para>Two teams in parallel do the development and the certification.</para>

<para>The following principles define the essence of CleanRoom 
Software Engineering:</para>

<itemizedlist>
  <listitem>
    User Requirements must be converted to clear, precise 
    specifications
  </listitem>
  <listitem>
    System specifications must include usage specifications
    that decribe the statistical distribution of interactions
  </listitem>
  <listitem>
    Increments are designed around complete, whole systems 
    implementing a subset of the total system
  </listitem>
  <listitem>
    The combination of all increments should result it a complete 
    system that meets the system specification
  </listitem>
  <listitem>
    Development takes place using formal, structured, disciplined 
    design through specification refinement
  </listitem>
  <listitem>
    Designs must be thoroughly verified
  </listitem>
  <listitem>
    Code created from Designs must be verified
  </listitem>
  <listitem>
    Development takes place without executing the code or using 
    any form of unit or execution testing
  </listitem>
  <listitem>
    Certification testing is not testing for defects, but rather, 
    certifying the quality of the released code
  </listitem>
  <listitem>
    Certification testing is done through statistical testing
  </listitem>
  <listitem>
    Statistical testing uses randomly selected tests created based 
    on the given usage statistics to simulate real program use
  </listitem>
  <listitem>
    If the quality of certified code cannot be certified to a 
    specific quality level, casual analysis should identify problems 
    in the process that resulted in quality failure, and should 
    have the process remedied before continuing 
  </listitem>
</itemizedlist>

<para>Of main interest in all of this is the psychological attitude of 
development wherein the goal is the creation of defect-free programs 
that do not require explicit debugging or unit testing. Instead, 
critical review processes allow for high-quality development 
using effective tools for rigorous software creation.</para>

<para>Since I am the Lone Wolf on this project right now, and any 
additional review and support will likely be little to none over 
the course of the first version of the compiler, I will need to 
do all of the work. This will necessitate some clear means by which 
I can ensure that I have good quality ensurance despite the limitations 
this presents on code review.</para>

<orderedlist>
  <listitem>
    Use Co-Dfns as the language of specification, design, development, 
    and testing
  </listitem>
  <listitem>
    No need for user requirements, but complete specification can be 
    merged with user requirements.
  </listitem>
  <listitem>
    Design and Coding elements will be combined using the formal 
    logic for Co-Dfns.
  </listitem>
  <listitem>
    After specification, an increment should have the testing written 
    first, followed by the design and verification, followed by 
    certification, to help adjust for lack of additional members in 
    the team.
  </listitem>
</orderedlist>

</article>