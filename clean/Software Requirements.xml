<?xml version="1.0" encoding="utf-8" ?>

<article xmlns="http://docbook.org/ns/docbook" version="5.0">
  <info>
    <author>Aaron W. Hsu</author>
    <date>Tuesday, July 2nd, 2013</date>
  </info>
  <section>
    <title>Co-Dfns Software Requirements</title>
    <para>
      This document clarifies in English the expected behavior of the Co-Dfns 
      compiler. It is intended to be complete, consistent, and clear as 
      regards the external, visible behavior of the system. It also may state 
      requirements on the quality of the generated code and the performance 
      of the compiler itself. That is, it describes all intended behavior, 
      and not just the requirements for correct semantics preservation of the 
      compiled code. To support tracing of future efforts to these 
      requirements, all requirements are segmented into single units and 
      enumerated. Future documents should refer to these requirements by 
      number, so it is important that the numbers remain as stable as 
      possible.
    </para>
    <orderedlist>
      <title>Enumerated Software Requirements</title>
      <listitem>
        <simpara>
          The entire system should be implemented insofaras it be technically 
          feasible in the Co-Dfns language itself.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The system should integrate with the Dyalog APL interpreter 
          seamlessly.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler shall target the LLVM.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should provide a fix function that behaves functionally 
          equivalent to the <function>⎕FIX</function> function on all valid 
          Co-Dfns programs.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          All valid D-fns programs should be valid Co-Dfns programs unless 
          they have a programming error that the compiler can catch that the 
          interpreter cannot catch until runtime. In other words, a valid 
          D-fns program is one that runs without unintended error as well as 
          just parsing correctly.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should catch errors wherein the type class of a 
          variable changes from code to function to operator or any 
          combination of the above. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should catch errors that are clearly a type error 
          through some sort of type inference. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should support type inference up to the point that it 
          is able to disambiguate all expressions up to the amount possible 
          given the information available.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          It should be possible to produce a shared object from a valid 
          namespace for use by other languages.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          When given erroneous input that would also be caught by the 
          <function>⎕FIX</function> function, the compiler should 
          produce the same error message.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The same error messages should be given when compiling to shared 
          object as are given when fixing a namespace.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          There should be no limit to the number of namespaces that may be 
          compiled and used at any one time outside of environment limitations 
          such as RAM.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should have minimal impact on anyone using it.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should take the form of a single public interface 
          <classname>CoDfns</classname> that implements all public services. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Fix</function> should implement the 
          fixing function for the compiler.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Fix</function> should implement the 
          same interface as the <function>⎕FIX</function> system function. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Obj</function> should implement the 
          shared object functionality of the compiler.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Obj</function> should take the name of 
          the shared object to create as its left argument.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Obj</function> should take as its 
          right argument the same values as the <function>⎕FIX</function> 
          system function.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The function <function>CoDfns.Obj</function> should return a 
          reference to the namespace in the same manner as the 
          <function>CoDfns.Fix</function> function. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should only compile complete namespace scripts.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler will not support any Dyalog system functions.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The Co-Dfns language and the compiler may introduce system functions 
          for its own use provided that they do not conflict with system 
          functions already in use by the interpreter.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should support vectorized coding for scalar primitives. 
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should perform fusion of scalar functions.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The Co-Dfns language should be written to obviate the need for 
          garbage collection.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The compiler should produce code with predictable performance in 
          terms of space and time.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          The executable result of the compiler should be a single workspace 
          that can be distributed. Minimal shared objects may be used if 
          necessary.
        </simpara>
      </listitem>
    </orderedlist>
  </section>
</article>
