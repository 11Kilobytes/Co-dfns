<?xml version="1.0" encoding="utf-8" ?>

<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Compiled Module</title>
  <para>
    After a module is compiled, it is usually invoked and executed
    in various ways. We separate compilation from invocation so that we
    may enumerate their sequence histories separately, but also because
    the stimuli are encoded so differently. Most Source Input stimuli are
    rather close to some specific concrete token that is not defined in
    terms of anything else, but the corresponding concrete stimuli for
    a Module Invocation stimulus is always dependent on a specific module.
    Very few, if any, stimuli will be very concrete. Each stimulus history
    should have few tokens, as we are representing function calls. We note
    that all functions are ambivalent when written in Co-Dfns.
  </para>
  <table frame="void" rules="rows" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <caption>Stimuli for Module Invocation</caption>
    <thead>
      <tr>
        <th>Symbol</th>
        <th colspan="2">Name</th>
        <th colspan="4">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Fv</td>
        <td colspan="2">Valid Function</td>
        <td colspan="4">A valid reference to a function in the module</td>
      </tr>
      <tr>
        <td>Var</td>
        <td colspan="2">Bound Variable</td>
        <td colspan="4">A valid reference to an array in the module</td>
      </tr>
      <tr>
        <td>Ub</td>
        <td colspan="2">Unbound reference</td>
        <td colspan="4">A reference to an unbound variable in the module</td>
      </tr>
      <tr>
        <td>In</td>
        <td colspan="2">Valid input</td>
        <td colspan="4">Input to a function that will not lead to a runtime
          error</td>
      </tr>
      <tr>
        <td>Err</td>
        <td colspan="2">Erroneous input</td>
        <td colspan="4">Input to a function that will lead to an unguarded
          runtime error</td>
      </tr>
      <tr>
        <td>Call</td>
        <td colspan="2">Function call</td>
        <td colspan="4">Either a monadic or dyadic call to a module function</td>
      </tr>
    </tbody>
  </table>
  <para>
    Our responses when calling or referencing into a compiled
    module are much more abstract than our responses for the compiler,
    particularly so for the error responses. This is necessary simply because
    we cannot know ahead of time what inputs will generate what errors.
    Instead, we make our responses very abstract. We assume that when actually
    programmed, the runtime errors will correspond to the appropriate code
    and signal. The same goes for correct, or valid, input. We must abstract
    away until we can only say that the output is equivalent to the result
    of the same function interpreted instead of a fixed or actual value.
  </para>
  <table frame="void" rules="rows" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <caption>Responses for Module Invocation</caption>
    <thead>
      <tr>
        <th>Name</th>
        <th colspan="4">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Value</td>
        <td colspan="4">A value returned by module that is equivalent ot
          the value returned by an equivalent interpreted module invocation</td>
      </tr>
      <tr>
        <td>Value Error</td>
        <td colspan="4">An error signalled when a reference to an unbound
          variable occurs.</td>
      </tr>
      <tr>
        <td>Error</td>
        <td colspan="4">Any runtime error signalled by erroneous input to
          a module invocation. Must be the same error as would be signalled
          by an equivalent interpreted module invocation.</td>
      </tr>
    </tbody>
  </table>
</section>