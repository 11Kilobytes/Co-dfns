      <section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xi="http://www.w3.org/2001/XInclude">
        <title>Expression Enumeration</title>
        <simpara>The expression stimulus captures a single line of Co-Dfns
        code, which is an expression. This is an expression which will
        give a value as a result, not a function or some other thing. It
        may be a named value, or it may be something that is unnamed. The
        expression enumeration may be one of the more complex enumerations,
        because there is so much that can happen. In particular, we need
        a way to capture and handle the following important semantics:</simpara>
        <orderedlist spacing="compact">
          <listitem>
            <simpara>Vector Notation (Strand Syntax)</simpara>
          </listitem>
          <listitem>
            <simpara>Vector Notation Assignment</simpara>
          </listitem>
          <listitem>
            <simpara>Selective Assignment</simpara>
          </listitem>
          <listitem>
            <simpara>Atomic Expressions</simpara>
          </listitem>
        </orderedlist>
        <simpara>
          In order to handle all of these, we actually have a bit more
          stimuli than we have in the other sets, and we include an additional
          meta-response to handle things. In particular, we use the E stimuli
          within the expression itself in order to do a recursive reference
          for handling the nested vector notations. We do not want to deal
          with yet another recursive stimuli just for handling the vector
          notation, since it is mostly subsumed inside of the E stimuli
          anyways. However, a special case is when we have a vector notation
          (also called strand notation) that has only variables in it.
          In this case, we are dealing with something that could potentially
          be a value, if all of the variables are bound, or it could also
          be a valid assignment target. We use the Va and Vnu stimuli to
          encapsulate this behavior, so that we do not need to enumerate
          this recursion. Finally, to handle selective assignment, we allow
          for another meta-response
          <firstterm>selective</firstterm>
          which is the same thing as the
          <glossterm>okay</glossterm>
          response, but that indicates it is also a valid selective expression.
          These expressions that have the
          <glossterm>selective</glossterm>
          response are what is captured by the Es stimuli, which is the
          set of all selective assignment expressions. Anything else is
          subsumed by the E stimuli. The Es stimuli is only a legal stimuli
          when we are encountering a good situation for a selective assignment.
          In all other cases, it is just redundant. In order to be able
          to capture the selective assignment we have to additional stimuli
          that would usually be subsumed by the Fe stimuli, which are Sm
          and Sd. These are the valid dyadic and monadic selective functions,
          or a combination of them and one of the valid operators, such
          as each.
        </simpara>
        <simpara>
          Finally, it is helpful to understand which expressions may be
          considered atomic, that is, whether or not they could be treated
          as a single object, rather than a complete expression. This includes
          things like variable references, variable indexing, strand notation,
          and so forth. We use the response
          <firstterm>atomic</firstterm>
          to indicate that a given sequence is to be considerd a valid
          atomic expression, which implies the okay response. The main
          place that this becomes important is in dealing with operators
          which take arrays as their right arguments. In these cases we
          may have an expression on the right, but the operator
          <quote>slurps</quote>
          the first atomic expression that it can find to use as the right
          argument to the operator, but no more.
        </simpara>
        <xi:include href="tables/Source_Input_Enumeration--_Expressions.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_N.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Va.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Vna.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Vnu.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_N.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_Va.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_Vna.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_RPar_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_RPar_Es.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_N_LBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_N_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_N_Vnu.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_N.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_Va.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_Vna.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Va_LBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_RPar_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_RPar_Es.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_N_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_Va_LBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_N_LBrk_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_RPar_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_RPar_Es.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_N_RPar.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_Va_LBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Va_LBrk_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Va_LBrk_RBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_N_LBrk_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_Va_LBrk_E.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Fea_Va_LBrk_RBrk.xml"></xi:include>
        <xi:include href="tables/Source_Input_Enumeration--_ExpressionsCom_Sm_Va_LBrk_E.xml"></xi:include>
      </section>
