  <section xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Analysis: LLVM</title>
    <simpara>
      LLVM is the target language to which the Co-DFns compiler
      compiles. It's a rather sophisticated VM and it has a number
      of interesting quirks. However, it's fairly easy to use, and
      the C interface is very nice. The C interface is the best one
      to use for our system as it will integrate well with the FFI
      available in Dyalog. We consider the LLVM system as something
      of an internal module that has external software boundaries,
      so we do not want to spend too much time on architecting a
      large LLVM library to handle things. Instead, an ad hoc
      interface as needed will be best.
    </simpara>
    <simpara>
      The LLVM system as it stands has a number of useful types and
      tricks to allow for good performance characteristics, but
      these are not good initial targets for the compiler. Instead,
      the compiler should aim to target a simple subset of LLVM and
      introduce these optimization types and other features later in
      the system. It will not be necessary to leverage the LLVM
      performance tweaks to get the main benefits of the
      optimizations planned for the first version. This may change
      as further optimizations are planned.
    </simpara>
    <simpara>
      The grammar of the compiler needs to be able to express the
      important elements that will allow us to get to the LLVM
      Grammar. By the time LLVM code needs to be generated, it
      should be a simple transformation from the ASt to the LLVM
      IR. At this stage of the compiler design, the LLVM IR has many
      things that are not needed, including most of the instruction
      set. Most of what will be used in this version of the compiler
      is the function call semantics.
    </simpara>
    <simpara>
      When working with the runtime environment, however, we need a
      way to encode the names down to the LLVM equivalents, which
      means that we need to make sure to have a way to specifying
      prefixes for the runtime names versus other names to avoid
      clashes, but also have a way of self-hosting our own runtime
      for when many of the primitives are written in Co-Dfns.
    </simpara>
    <itemizedlist spacing="compact">
      <title>Summary of LLVM Insights</title>
      <listitem>
        <simpara>Most of the IR is unnecessary for this level of optimizations</simpara>
      </listitem>
      <listitem>
        <simpara>The C interface is the best to use right now</simpara>
      </listitem>
      <listitem>
        <simpara>
          We should have handles to control the prefixes used for
          variables and runtime values to ensure that we can
          self-host our runtime if necessary.
        </simpara>
      </listitem>
    </itemizedlist>
  </section>
